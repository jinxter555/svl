00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: AstMvar::AstMvar(const string &v)
00006 var_name: a
00007 Enter: Operand::clone_val()
00007 Exit: clone_val
00006 Exit: AstMvar
00008 Enter: Operand::clone_val()
00008 Exit: clone_val
00009 Enter: AstMvar::AstMvar(const string &v)
00009 var_name: x
00010 Enter: Operand::clone_val()
00010 Exit: clone_val
00009 Exit: AstMvar
00011 Enter: Operand::clone_val()
00011 Exit: clone_val
00012 Enter: AstMvar::AstMvar(const string &v)
00012 var_name: y
00013 Enter: Operand::clone_val()
00013 Exit: clone_val
00012 Exit: AstMvar
00014 Enter: Operand::clone_val()
00014 Exit: clone_val
00015 Enter: Operand::clone_val()
00015 Exit: clone_val
00016 Enter: Operand::clone_val()
00016 Exit: clone_val
00017 Enter: Operand::clone_val()
00017 Exit: clone_val
00018 Enter: AstMap::get_branch(const vector<string> &keys)
00018 keys: [svlvm, module, Main]
00018 Exit: get_branch
00019 Enter: Operand::==(operand&)
00019 Exit: operator==
00020 Enter: AstMap::get_branch(const vector<string> &keys)
00020 keys: [svlvm, module, Main]
00020 Exit: get_branch
00021 Enter: AstMap::get_branch(const vector<string> &keys)
00021 keys: [svlvm, module, Main, function]
00021 Exit: get_branch
00022 Enter: Operand::==(operand&)
00022 Exit: operator==
00023 Enter: AstMap::get_branch(const vector<string> &keys)
00023 keys: [svlvm, module, Main, function]
00023 Exit: get_branch
00024 Enter: Operand::==(operand&)
00024 Exit: operator==
00025 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00025 main: func: main
00025 Exit: add
00026 Enter: AstMap::get_branch(const vector<string> &keys)
00026 keys: [svlvm, module, Main, function]
00026 Exit: get_branch
00027 Enter: Operand::==(operand&)
00027 Exit: operator==
00028 Enter: Operand::==(operand&)
00028 Exit: operator==
00029 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00029 func2: func: func2
00029 Exit: add
00030 Enter: AstMap::get_branch(const vector<string> &keys)
00030 keys: [svlvm, module, Main, function]
00030 Exit: get_branch
00031 Enter: Operand::==(operand&)
00031 Exit: operator==
00032 Enter: Operand::==(operand&)
00032 Exit: operator==
00033 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00033 func3: func: func3
00033 Exit: add
00034 Enter: Operand::clone_val()
00034 Exit: clone_val
00035 Enter: AstMap::get_branch(const vector<string> &keys)
00035 keys: [svlvm, module, Helper]
00035 Exit: get_branch
00036 Enter: Operand::==(operand&)
00036 Exit: operator==
00037 Enter: AstMap::get_branch(const vector<string> &keys)
00037 keys: [svlvm, module, Helper]
00037 Exit: get_branch
00038 Enter: AstMap::get_branch(const vector<string> &keys)
00038 keys: [svlvm, module, Helper, function]
00038 Exit: get_branch
00039 Enter: Operand::==(operand&)
00039 Exit: operator==
00040 Enter: AstMap::get_branch(const vector<string> &keys)
00040 keys: [svlvm, module, Helper, function]
00040 Exit: get_branch
00041 Enter: Operand::==(operand&)
00041 Exit: operator==
00042 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00042 me: func: me
00042 Exit: add
00043 Enter: AstMap::get_branch(const vector<string> &keys)
00043 keys: [svlvm, module, Prompt]
00043 Exit: get_branch
00044 Enter: Operand::==(operand&)
00044 Exit: operator==
00045 Enter: AstMap::get_branch(const vector<string> &keys)
00045 keys: [svlvm, module, Prompt]
00045 Exit: get_branch
00046 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00046 last: {"code": []}
00046 Exit: add
00047 Enter: AstMap::get_branch(const vector<string> &keys)
00047 keys: [svlvm, module, Prompt]
00047 Exit: get_branch
00048 Enter: AstMap::get_branch(const vector<string> &keys)
00048 keys: [svlvm, module, Main, function, main, code]
00048 Exit: get_branch
00049 Enter: Operand::clone_val()
00049 Exit: clone_val
00050 Enter: AstMap::get_branch(const vector<string> &keys)
00050 keys: [svlvm]
00050 Exit: get_branch
00051 Enter: AstMap::get_branch(const vector<string> &keys)
00051 keys: [svlvm, frames]
00051 Exit: get_branch
00052 Enter: Operand::clone_val()
00052 Exit: clone_val
00053 Enter: AstList::evaluate()
00054 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00055 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00055 a = nil
00056 Enter: AstMap::get_branch(const vector<string> &keys)
00056 keys: [svlm_lang]
00056 Exit: get_branch
00057 Enter: Operand::==(operand&)
00057 Exit: operator==
00058 Enter: AstMap::get_branch(const vector<string> &keys)
00058 keys: [svlvm, frames]
00058 Exit: get_branch
00059 Enter: Operand::clone_val()
00059 Exit: clone_val
00060 Enter: AstMap::get_branch(const vector<string> &keys)
00060 keys: [svlvm, module, Main, mvar]
00060 Exit: get_branch
00061 Enter: Operand::==(operand&)
00061 Exit: operator==
00062 Enter: AstMap::get_branch(const vector<string> &keys)
00062 keys: [svlvm, module, Main, mvar]
00062 Exit: get_branch
00055 sub_node.add() before
00063 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00063 a: nil
00064 Enter: Operand::clone_val()
00064 Exit: clone_val
00063 Exit: add
00055 sub_node.add() after
00055 Exit: assign
00054 Exit: evaluate
00065 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00066 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00066 x = 1
00067 Enter: AstMap::get_branch(const vector<string> &keys)
00067 keys: [svlm_lang]
00067 Exit: get_branch
00068 Enter: Operand::==(operand&)
00068 Exit: operator==
00069 Enter: AstMap::get_branch(const vector<string> &keys)
00069 keys: [svlvm, frames]
00069 Exit: get_branch
00070 Enter: Operand::clone_val()
00070 Exit: clone_val
00071 Enter: AstMap::get_branch(const vector<string> &keys)
00071 keys: [svlvm, module, Main, mvar]
00071 Exit: get_branch
00072 Enter: Operand::==(operand&)
00072 Exit: operator==
00066 sub_node.add() before
00073 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00073 x: 1
00074 Enter: Operand::clone_val()
00074 Exit: clone_val
00073 Exit: add
00066 sub_node.add() after
00066 Exit: assign
00065 Exit: evaluate
00075 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00076 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00076 y = 1
00077 Enter: AstMap::get_branch(const vector<string> &keys)
00077 keys: [svlm_lang]
00077 Exit: get_branch
00078 Enter: Operand::==(operand&)
00078 Exit: operator==
00079 Enter: AstMap::get_branch(const vector<string> &keys)
00079 keys: [svlvm, frames]
00079 Exit: get_branch
00080 Enter: Operand::clone_val()
00080 Exit: clone_val
00081 Enter: AstMap::get_branch(const vector<string> &keys)
00081 keys: [svlvm, module, Main, mvar]
00081 Exit: get_branch
00082 Enter: Operand::==(operand&)
00082 Exit: operator==
00076 sub_node.add() before
00083 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00083 y: 1
00084 Enter: Operand::clone_val()
00084 Exit: clone_val
00083 Exit: add
00076 sub_node.add() after
00076 Exit: assign
00075 Exit: evaluate
00053 Exit: evaluate
00085 Enter: Operand::clone_val()
00085 Exit: clone_val
00086 Enter: Operand::clone_val()
00086 Exit: clone_val
00087 Enter: AstMap::get_branch(const vector<string> &keys)
00087 keys: [svlvm, module, Prompt]
00087 Exit: get_branch
00088 Enter: Operand::==(operand&)
00088 Exit: operator==
00089 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00089 last: {"code": [x=1]}
00089 Exit: add
00090 Enter: AstMap::get_branch(const vector<string> &keys)
00090 keys: [svlvm, module, Prompt]
00090 Exit: get_branch
00091 Enter: AstMap::get_branch(const vector<string> &keys)
00091 keys: [svlvm, module, Prompt, last, code]
00091 Exit: get_branch
00092 Enter: AstMap::get_branch(const vector<string> &keys)
00092 keys: [svlvm]
00092 Exit: get_branch
00093 Enter: AstList::evaluate()
00094 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00095 Enter: AstMap::get_branch(const vector<string> &keys)
00095 keys: [svlm_lang]
00095 Exit: get_branch
00096 Enter: AstMap::get_branch(const vector<string> &keys)
00096 keys: [svlvm, frames]
00096 Exit: get_branch
00097 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00097 x: 1
00098 Enter: Operand::clone_val()
00098 Exit: clone_val
00097 Exit: add
00094 Exit: evaluate
00093 Exit: evaluate
00099 Enter: Operand::==(operand&)
00099 Exit: operator==
00100 Enter: Operand::clone_val()
00100 Exit: clone_val
00101 Enter: AstMap::get_branch(const vector<string> &keys)
00101 keys: [svlvm, module, Prompt]
00101 Exit: get_branch
00102 Enter: Operand::==(operand&)
00102 Exit: operator==
00103 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00103 last: {"code": [x]}
00103 Exit: add
00104 Enter: AstMap::get_branch(const vector<string> &keys)
00104 keys: [svlvm, module, Prompt]
00104 Exit: get_branch
00105 Enter: AstMap::get_branch(const vector<string> &keys)
00105 keys: [svlvm, module, Prompt, last, code]
00105 Exit: get_branch
00106 Enter: AstMap::get_branch(const vector<string> &keys)
00106 keys: [svlvm]
00106 Exit: get_branch
00107 Enter: AstList::evaluate()
00108 Enter: AstMap::get_branch(const vector<string> &keys)
00108 keys: [svlm_lang]
00108 Exit: get_branch
00109 Enter: AstMap::get_branch(const vector<string> &keys)
00109 keys: [svlvm, frames]
00109 Exit: get_branch
00107 Exit: evaluate
00110 Enter: Operand::==(operand&)
00110 Exit: operator==
00111 Enter: Operand::clone_val()
00111 Exit: clone_val
00112 Enter: Operand::clone_val()
00112 Exit: clone_val
00113 Enter: AstMap::get_branch(const vector<string> &keys)
00113 keys: [svlvm, module, Prompt]
00113 Exit: get_branch
00114 Enter: Operand::==(operand&)
00114 Exit: operator==
00115 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00115 last: {"code": [hello=5]}
00115 Exit: add
00116 Enter: AstMap::get_branch(const vector<string> &keys)
00116 keys: [svlvm, module, Prompt]
00116 Exit: get_branch
00117 Enter: AstMap::get_branch(const vector<string> &keys)
00117 keys: [svlvm, module, Prompt, last, code]
00117 Exit: get_branch
00118 Enter: AstMap::get_branch(const vector<string> &keys)
00118 keys: [svlvm]
00118 Exit: get_branch
00119 Enter: AstList::evaluate()
00120 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00121 Enter: AstMap::get_branch(const vector<string> &keys)
00121 keys: [svlm_lang]
00121 Exit: get_branch
00122 Enter: AstMap::get_branch(const vector<string> &keys)
00122 keys: [svlvm, frames]
00122 Exit: get_branch
00123 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00123 hello: 5
00124 Enter: Operand::clone_val()
00124 Exit: clone_val
00123 Exit: add
00120 Exit: evaluate
00119 Exit: evaluate
00125 Enter: Operand::==(operand&)
00125 Exit: operator==
00126 Enter: Operand::clone_val()
00126 Exit: clone_val
00127 Enter: AstMap::get_branch(const vector<string> &keys)
00127 keys: [svlvm, module, Prompt]
00127 Exit: get_branch
00128 Enter: Operand::==(operand&)
00128 Exit: operator==
00129 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00129 last: {"code": [hello]}
00129 Exit: add
00130 Enter: AstMap::get_branch(const vector<string> &keys)
00130 keys: [svlvm, module, Prompt]
00130 Exit: get_branch
00131 Enter: AstMap::get_branch(const vector<string> &keys)
00131 keys: [svlvm, module, Prompt, last, code]
00131 Exit: get_branch
00132 Enter: AstMap::get_branch(const vector<string> &keys)
00132 keys: [svlvm]
00132 Exit: get_branch
00133 Enter: AstList::evaluate()
00134 Enter: AstMap::get_branch(const vector<string> &keys)
00134 keys: [svlm_lang]
00134 Exit: get_branch
00135 Enter: AstMap::get_branch(const vector<string> &keys)
00135 keys: [svlvm, frames]
00135 Exit: get_branch
00133 Exit: evaluate
00136 Enter: Operand::==(operand&)
00136 Exit: operator==
00000 Exit: main
