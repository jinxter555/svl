00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: AstMvar::AstMvar(const string &v)
00006 var_name: a
00007 Enter: Operand::clone_val()
00007 Exit: clone_val
00006 Exit: AstMvar
00008 Enter: Operand::clone_val()
00008 Exit: clone_val
00009 Enter: Operand::clone_val()
00009 Exit: clone_val
00010 Enter: AstMap::get_branch(const vector<string> &keys)
00010 keys: [svlvm, module, Main]
00010 Exit: get_branch
00011 Enter: AstMap::get_branch(const vector<string> &keys)
00011 keys: [svlvm, module, Main]
00011 Exit: get_branch
00012 Enter: AstMap::get_branch(const vector<string> &keys)
00012 keys: [svlvm, module, Main, function]
00012 Exit: get_branch
00013 Enter: AstMap::get_branch(const vector<string> &keys)
00013 keys: [svlvm, module, Main, function]
00013 Exit: get_branch
00014 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00014 main: func: main
00014 Exit: add
00015 Enter: AstMap::get_branch(const vector<string> &keys)
00015 keys: [svlvm, module, Prompt]
00015 Exit: get_branch
00016 Enter: AstMap::get_branch(const vector<string> &keys)
00016 keys: [svlvm, module, Prompt]
00016 Exit: get_branch
00017 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00017 last: {"code": []}
00017 Exit: add
00018 Enter: AstMap::get_branch(const vector<string> &keys)
00018 keys: [svlvm, module, Prompt]
00018 Exit: get_branch
00019 Enter: AstMap::get_branch(const vector<string> &keys)
00019 keys: [svlvm, module, Main, function, main, code]
00019 Exit: get_branch
00020 Enter: Operand::clone_val()
00020 Exit: clone_val
00021 Enter: AstMap::get_branch(const vector<string> &keys)
00021 keys: [svlvm]
00021 Exit: get_branch
00022 Enter: AstMap::get_branch(const vector<string> &keys)
00022 keys: [svlvm, frames]
00022 Exit: get_branch
00023 Enter: Operand::clone_val()
00023 Exit: clone_val
00024 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00025 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00025 a = [1,2,3]
00026 Enter: AstMap::get_branch(const vector<string> &keys)
00026 keys: [svlm_lang]
00026 Exit: get_branch
00027 Enter: AstMap::get_branch(const vector<string> &keys)
00027 keys: [svlvm, frames]
00027 Exit: get_branch
00028 Enter: Operand::clone_val()
00028 Exit: clone_val
00029 Enter: AstMap::get_branch(const vector<string> &keys)
00029 keys: [svlvm, module, Main, mvar]
00029 Exit: get_branch
00030 Enter: AstMap::get_branch(const vector<string> &keys)
00030 keys: [svlvm, module, Main, mvar]
00030 Exit: get_branch
00025 sub_node.add() before
00031 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00031 a: [1,2,3]
00032 Enter: Operand::clone_val()
00033 Enter: AstList::clone()
00033 Exit: clone
00034 Enter: AstList::clone()
00034 Exit: clone
00032 Exit: clone_val
00031 Exit: add
00025 sub_node.add() after
00025 Exit: assign
00024 Exit: evaluate
00035 Enter: AstList::clone()
00035 Exit: clone
00036 Enter: AstMvar::AstMvar(const string &v)
00036 var_name: a
00037 Enter: Operand::clone_val()
00037 Exit: clone_val
00036 Exit: AstMvar
00038 Enter: AstMvar::AstMvar(const string &v)
00038 var_name: b
00039 Enter: Operand::clone_val()
00039 Exit: clone_val
00038 Exit: AstMvar
00040 Enter: Operand::clone_val()
00040 Exit: clone_val
00041 Enter: AstMap::get_branch(const vector<string> &keys)
00041 keys: [svlvm, module, Prompt]
00041 Exit: get_branch
00042 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00042 last: {"code": [nil.b=nil.a]}
00042 Exit: add
00043 Enter: AstMap::get_branch(const vector<string> &keys)
00043 keys: [svlvm, module, Prompt]
00043 Exit: get_branch
00044 Enter: AstMap::get_branch(const vector<string> &keys)
00044 keys: [svlvm, module, Prompt, last, code]
00044 Exit: get_branch
00045 Enter: AstMap::get_branch(const vector<string> &keys)
00045 keys: [svlvm]
00045 Exit: get_branch
00046 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00047 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00047 var_name: a
00048 Enter: AstMap::get_branch(const vector<string> &keys)
00048 keys: [svlm_lang]
00048 Exit: get_branch
00049 Enter: AstMap::get_branch(const vector<string> &keys)
00049 keys: [svlvm, frames]
00049 Exit: get_branch
00050 Enter: Operand::clone_val()
00050 Exit: clone_val
00051 Enter: AstMap::get_branch(const vector<string> &keys)
00051 keys: [svlvm, module, Main, mvar]
00051 Exit: get_branch
00052 Enter: AstList::clone()
00052 Exit: clone
00047 Exit: evaluate
00053 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00053 b = [1,2,3]
00054 Enter: AstMap::get_branch(const vector<string> &keys)
00054 keys: [svlm_lang]
00054 Exit: get_branch
00055 Enter: AstMap::get_branch(const vector<string> &keys)
00055 keys: [svlvm, frames]
00055 Exit: get_branch
00056 Enter: Operand::clone_val()
00056 Exit: clone_val
00057 Enter: AstMap::get_branch(const vector<string> &keys)
00057 keys: [svlvm, module, Main, mvar]
00057 Exit: get_branch
00053 sub_node.add() before
00058 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00058 b: [1,2,3]
00058 Exit: add
00053 sub_node.add() after
00053 Exit: assign
00046 Exit: evaluate
00059 Enter: AstList::clone()
00059 Exit: clone
00060 Enter: AstMvar::AstMvar(const string &v)
00060 var_name: a
00061 Enter: Operand::clone_val()
00061 Exit: clone_val
00060 Exit: AstMvar
00062 Enter: AstMap::get_branch(const vector<string> &keys)
00062 keys: [svlvm, module, Prompt]
00062 Exit: get_branch
00063 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00063 last: {"code": [nil.a]}
00063 Exit: add
00064 Enter: AstMap::get_branch(const vector<string> &keys)
00064 keys: [svlvm, module, Prompt]
00064 Exit: get_branch
00065 Enter: AstMap::get_branch(const vector<string> &keys)
00065 keys: [svlvm, module, Prompt, last, code]
00065 Exit: get_branch
00066 Enter: AstMap::get_branch(const vector<string> &keys)
00066 keys: [svlvm]
00066 Exit: get_branch
00067 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00067 var_name: a
00068 Enter: AstMap::get_branch(const vector<string> &keys)
00068 keys: [svlm_lang]
00068 Exit: get_branch
00069 Enter: AstMap::get_branch(const vector<string> &keys)
00069 keys: [svlvm, frames]
00069 Exit: get_branch
00070 Enter: Operand::clone_val()
00070 Exit: clone_val
00071 Enter: AstMap::get_branch(const vector<string> &keys)
00071 keys: [svlvm, module, Main, mvar]
00071 Exit: get_branch
00072 Enter: AstList::clone()
00072 Exit: clone
00067 Exit: evaluate
00073 Enter: AstList::clone()
00073 Exit: clone
00074 Enter: AstMvar::AstMvar(const string &v)
00074 var_name: b
00075 Enter: Operand::clone_val()
00075 Exit: clone_val
00074 Exit: AstMvar
00076 Enter: AstMap::get_branch(const vector<string> &keys)
00076 keys: [svlvm, module, Prompt]
00076 Exit: get_branch
00077 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00077 last: {"code": [nil.b]}
00077 Exit: add
00078 Enter: AstMap::get_branch(const vector<string> &keys)
00078 keys: [svlvm, module, Prompt]
00078 Exit: get_branch
00079 Enter: AstMap::get_branch(const vector<string> &keys)
00079 keys: [svlvm, module, Prompt, last, code]
00079 Exit: get_branch
00080 Enter: AstMap::get_branch(const vector<string> &keys)
00080 keys: [svlvm]
00080 Exit: get_branch
00081 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00081 var_name: b
00082 Enter: AstMap::get_branch(const vector<string> &keys)
00082 keys: [svlm_lang]
00082 Exit: get_branch
00083 Enter: AstMap::get_branch(const vector<string> &keys)
00083 keys: [svlvm, frames]
00083 Exit: get_branch
00084 Enter: Operand::clone_val()
00084 Exit: clone_val
00085 Enter: AstMap::get_branch(const vector<string> &keys)
00085 keys: [svlvm, module, Main, mvar]
00085 Exit: get_branch
00086 Enter: AstList::clone()
00086 Exit: clone
00081 Exit: evaluate
00087 Enter: AstList::clone()
00087 Exit: clone
00088 Enter: AstMvar::AstMvar(const string &v)
00088 var_name: b
00089 Enter: Operand::clone_val()
00089 Exit: clone_val
00088 Exit: AstMvar
00090 Enter: AstMap::get_branch(const vector<string> &keys)
00090 keys: [svlvm, module, Prompt]
00090 Exit: get_branch
00091 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00091 last: {"code": [nil.b]}
00091 Exit: add
00092 Enter: AstMap::get_branch(const vector<string> &keys)
00092 keys: [svlvm, module, Prompt]
00092 Exit: get_branch
00093 Enter: AstMap::get_branch(const vector<string> &keys)
00093 keys: [svlvm, module, Prompt, last, code]
00093 Exit: get_branch
00094 Enter: AstMap::get_branch(const vector<string> &keys)
00094 keys: [svlvm]
00094 Exit: get_branch
00095 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00095 var_name: b
00096 Enter: AstMap::get_branch(const vector<string> &keys)
00096 keys: [svlm_lang]
00096 Exit: get_branch
00097 Enter: AstMap::get_branch(const vector<string> &keys)
00097 keys: [svlvm, frames]
00097 Exit: get_branch
00098 Enter: Operand::clone_val()
00098 Exit: clone_val
00099 Enter: AstMap::get_branch(const vector<string> &keys)
00099 keys: [svlvm, module, Main, mvar]
00099 Exit: get_branch
00100 Enter: AstList::clone()
00100 Exit: clone
00095 Exit: evaluate
00101 Enter: AstList::clone()
00101 Exit: clone
00000 Exit: main
