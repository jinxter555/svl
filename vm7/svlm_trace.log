00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: Operand::clone_val()
00006 Exit: clone_val
00007 Enter: Operand::clone_val()
00007 Exit: clone_val
00008 Enter: AstMvar::AstMvar(const string &v)
00008 var_name: a
00009 Enter: Operand::clone_val()
00009 Exit: clone_val
00008 Exit: AstMvar
00010 Enter: Operand::clone_val()
00010 Exit: clone_val
00011 Enter: Operand::clone_val()
00011 Exit: clone_val
00012 Enter: Operand::clone_val()
00012 Exit: clone_val
00013 Enter: Operand::clone_val()
00013 Exit: clone_val
00014 Enter: AstMap::get_branch(const vector<string> &keys)
00014 keys: [svlvm, module, Main]
00014 Exit: get_branch
00015 Enter: AstMap::get_branch(const vector<string> &keys)
00015 keys: [svlvm, module, Main]
00015 Exit: get_branch
00016 Enter: AstMap::get_branch(const vector<string> &keys)
00016 keys: [svlvm, module, Main, function]
00016 Exit: get_branch
00017 Enter: AstMap::get_branch(const vector<string> &keys)
00017 keys: [svlvm, module, Main, function]
00017 Exit: get_branch
00018 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00018 main: func: main
00018 Exit: add
00019 Enter: AstMap::get_branch(const vector<string> &keys)
00019 keys: [svlvm, module, Main, function]
00019 Exit: get_branch
00020 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00020 func2: func: func2
00020 Exit: add
00021 Enter: AstMap::get_branch(const vector<string> &keys)
00021 keys: [svlvm, module, Main, function]
00021 Exit: get_branch
00022 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00022 func3: func: func3
00022 Exit: add
00023 Enter: Operand::clone_val()
00023 Exit: clone_val
00024 Enter: AstMap::get_branch(const vector<string> &keys)
00024 keys: [svlvm, module, Helper]
00024 Exit: get_branch
00025 Enter: AstMap::get_branch(const vector<string> &keys)
00025 keys: [svlvm, module, Helper]
00025 Exit: get_branch
00026 Enter: AstMap::get_branch(const vector<string> &keys)
00026 keys: [svlvm, module, Helper, function]
00026 Exit: get_branch
00027 Enter: AstMap::get_branch(const vector<string> &keys)
00027 keys: [svlvm, module, Helper, function]
00027 Exit: get_branch
00028 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00028 me: func: me
00028 Exit: add
00029 Enter: AstMap::get_branch(const vector<string> &keys)
00029 keys: [svlvm, module, Prompt]
00029 Exit: get_branch
00030 Enter: AstMap::get_branch(const vector<string> &keys)
00030 keys: [svlvm, module, Prompt]
00030 Exit: get_branch
00031 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00031 last: {"code": []}
00031 Exit: add
00032 Enter: AstMap::get_branch(const vector<string> &keys)
00032 keys: [svlvm, module, Prompt]
00032 Exit: get_branch
00033 Enter: AstMap::get_branch(const vector<string> &keys)
00033 keys: [svlvm, module, Main, function, main, code]
00033 Exit: get_branch
00034 Enter: Operand::clone_val()
00034 Exit: clone_val
00035 Enter: AstMap::get_branch(const vector<string> &keys)
00035 keys: [svlvm]
00035 Exit: get_branch
00036 Enter: AstMap::get_branch(const vector<string> &keys)
00036 keys: [svlvm, frames]
00036 Exit: get_branch
00037 Enter: Operand::clone_val()
00037 Exit: clone_val
00038 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00039 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00040 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00040 Exit: evaluate
00039 Exit: evaluate
00041 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00041 a = {1,2,24,hello}
00042 Enter: AstMap::get_branch(const vector<string> &keys)
00042 keys: [svlm_lang]
00042 Exit: get_branch
00043 Enter: AstMap::get_branch(const vector<string> &keys)
00043 keys: [svlvm, frames]
00043 Exit: get_branch
00044 Enter: Operand::clone_val()
00044 Exit: clone_val
00045 Enter: AstMap::get_branch(const vector<string> &keys)
00045 keys: [svlvm, module, Main, mvar]
00045 Exit: get_branch
00046 Enter: AstMap::get_branch(const vector<string> &keys)
00046 keys: [svlvm, module, Main, mvar]
00046 Exit: get_branch
00041 sub_node.add() before
00047 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00047 a: {1,2,24,hello}
00047 Exit: add
00041 sub_node.add() after
00041 Exit: assign
00038 Exit: evaluate
00048 Enter: AstMvar::AstMvar(const string &v)
00048 var_name: a
00049 Enter: Operand::clone_val()
00049 Exit: clone_val
00048 Exit: AstMvar
00050 Enter: AstMap::get_branch(const vector<string> &keys)
00050 keys: [svlvm, module, Prompt]
00050 Exit: get_branch
00051 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00051 last: {"code": [nil.a]}
00051 Exit: add
00052 Enter: AstMap::get_branch(const vector<string> &keys)
00052 keys: [svlvm, module, Prompt]
00052 Exit: get_branch
00053 Enter: AstMap::get_branch(const vector<string> &keys)
00053 keys: [svlvm, module, Prompt, last, code]
00053 Exit: get_branch
00054 Enter: AstMap::get_branch(const vector<string> &keys)
00054 keys: [svlvm]
00054 Exit: get_branch
00055 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00055 var_name: a
00056 Enter: AstMap::get_branch(const vector<string> &keys)
00056 keys: [svlm_lang]
00056 Exit: get_branch
00057 Enter: AstMap::get_branch(const vector<string> &keys)
00057 keys: [svlvm, frames]
00057 Exit: get_branch
00058 Enter: Operand::clone_val()
00058 Exit: clone_val
00059 Enter: AstMap::get_branch(const vector<string> &keys)
00059 keys: [svlvm, module, Main, mvar]
00059 Exit: get_branch
00060 Enter: Tuple::clone()
00060 Exit: clone
00055 Exit: evaluate
00061 Enter: AstMvar::AstMvar(const string &v)
00061 var_name: a
00062 Enter: Operand::clone_val()
00062 Exit: clone_val
00061 Exit: AstMvar
00063 Enter: AstMap::get_branch(const vector<string> &keys)
00063 keys: [svlvm, module, Prompt]
00063 Exit: get_branch
00064 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00064 last: {"code": [print nil.a]}
00064 Exit: add
00065 Enter: AstMap::get_branch(const vector<string> &keys)
00065 keys: [svlvm, module, Prompt]
00065 Exit: get_branch
00066 Enter: AstMap::get_branch(const vector<string> &keys)
00066 keys: [svlvm, module, Prompt, last, code]
00066 Exit: get_branch
00067 Enter: AstMap::get_branch(const vector<string> &keys)
00067 keys: [svlvm]
00067 Exit: get_branch
00068 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00068 var_name: a
00069 Enter: AstMap::get_branch(const vector<string> &keys)
00069 keys: [svlm_lang]
00069 Exit: get_branch
00070 Enter: AstMap::get_branch(const vector<string> &keys)
00070 keys: [svlvm, frames]
00070 Exit: get_branch
00071 Enter: Operand::clone_val()
00071 Exit: clone_val
00072 Enter: AstMap::get_branch(const vector<string> &keys)
00072 keys: [svlvm, module, Main, mvar]
00072 Exit: get_branch
00073 Enter: Tuple::clone()
00073 Exit: clone
00068 Exit: evaluate
00074 Enter: AstMap::get_branch(const vector<string> &keys)
00074 keys: [svlvm, module, Main, mvar, a]
00074 Exit: get_branch
00075 Enter: AstMap::get_branch(const vector<string> &keys)
00075 keys: [svlvm, module, Main, mvar, a]
00075 Exit: get_branch
00076 Enter: AstMap::get_branch(const vector<string> &keys)
00076 keys: [svlvm, module, Main, mvar]
00076 Exit: get_branch
00077 Enter: AstMap::get_branch(const vector<string> &keys)
00077 keys: [svlvm, module, Main, mvar, a]
00077 Exit: get_branch
00078 Enter: AstMap::get_branch(const vector<string> &keys)
00078 keys: [svlvm, module, Main, mvar, a]
00078 Exit: get_branch
00079 Enter: AstMap::get_branch(const vector<string> &keys)
00079 keys: [svlvm, readline, commands, svlm]
00079 Exit: get_branch
00080 Enter: AstMap::get_branch(const vector<string> &keys)
00080 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar]
00080 Exit: get_branch
00081 Enter: AstMap::get_branch(const vector<string> &keys)
00081 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar]
00081 Exit: get_branch
00082 Enter: AstMap::get_branch(const vector<string> &keys)
00082 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00082 Exit: get_branch
00083 Enter: AstMap::get_branch(const vector<string> &keys)
00083 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00083 Exit: get_branch
00084 Enter: AstMap::get_branch(const vector<string> &keys)
00084 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00084 Exit: get_branch
00085 Enter: AstMap::get_branch(const vector<string> &keys)
00085 keys: [svlvm, module, Main, mvar, a, 1]
00085 Exit: get_branch
00086 Enter: AstMap::get_branch(const vector<string> &keys)
00086 keys: [svlvm, module, Main, mvar, a, 1]
00086 Exit: get_branch
00087 Enter: AstMap::get_branch(const vector<string> &keys)
00087 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00087 Exit: get_branch
00088 Enter: AstMap::get_branch(const vector<string> &keys)
00088 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00088 Exit: get_branch
00089 Enter: AstMap::get_branch(const vector<string> &keys)
00089 keys: [svlvm, module, Main, mvar, a, 2132]
00089 Exit: get_branch
00090 Enter: AstMap::get_branch(const vector<string> &keys)
00090 keys: [svlvm, module, Main, mvar, a, 2132]
00090 Exit: get_branch
00091 Enter: AstMap::get_branch(const vector<string> &keys)
00091 keys: [svlvm, module, Main, mvar, a, 2132, 1]
00091 Exit: get_branch
00092 Enter: AstMap::get_branch(const vector<string> &keys)
00092 keys: [svlvm, module, Main, mvar, a, 2132, 1]
00092 Exit: get_branch
00000 Exit: main
