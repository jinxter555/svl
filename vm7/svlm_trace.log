00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: AstMvar::AstMvar(const string &v)
00006 var_name: a
00007 Enter: Operand::clone_val()
00007 Exit: clone_val
00006 Exit: AstMvar
00008 Enter: Operand::clone_val()
00008 Exit: clone_val
00009 Enter: Operand::clone_val()
00009 Exit: clone_val
00010 Enter: Operand::clone_val()
00010 Exit: clone_val
00011 Enter: Operand::clone_val()
00011 Exit: clone_val
00012 Enter: AstMap::get_branch(const vector<string> &keys)
00012 keys: [svlvm, module, Main]
00012 Exit: get_branch
00013 Enter: AstMap::get_branch(const vector<string> &keys)
00013 keys: [svlvm, module, Main]
00013 Exit: get_branch
00014 Enter: AstMap::get_branch(const vector<string> &keys)
00014 keys: [svlvm, module, Main, function]
00014 Exit: get_branch
00015 Enter: AstMap::get_branch(const vector<string> &keys)
00015 keys: [svlvm, module, Main, function]
00015 Exit: get_branch
00016 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00016 main: func: main
00016 Exit: add
00017 Enter: AstMap::get_branch(const vector<string> &keys)
00017 keys: [svlvm, module, Main, function]
00017 Exit: get_branch
00018 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00018 func2: func: func2
00018 Exit: add
00019 Enter: AstMap::get_branch(const vector<string> &keys)
00019 keys: [svlvm, module, Main, function]
00019 Exit: get_branch
00020 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00020 func3: func: func3
00020 Exit: add
00021 Enter: Operand::clone_val()
00021 Exit: clone_val
00022 Enter: AstMap::get_branch(const vector<string> &keys)
00022 keys: [svlvm, module, Helper]
00022 Exit: get_branch
00023 Enter: AstMap::get_branch(const vector<string> &keys)
00023 keys: [svlvm, module, Helper]
00023 Exit: get_branch
00024 Enter: AstMap::get_branch(const vector<string> &keys)
00024 keys: [svlvm, module, Helper, function]
00024 Exit: get_branch
00025 Enter: AstMap::get_branch(const vector<string> &keys)
00025 keys: [svlvm, module, Helper, function]
00025 Exit: get_branch
00026 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00026 me: func: me
00026 Exit: add
00027 Enter: AstMap::get_branch(const vector<string> &keys)
00027 keys: [svlvm, module, Prompt]
00027 Exit: get_branch
00028 Enter: AstMap::get_branch(const vector<string> &keys)
00028 keys: [svlvm, module, Prompt]
00028 Exit: get_branch
00029 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00029 last: {"code": []}
00029 Exit: add
00030 Enter: AstMap::get_branch(const vector<string> &keys)
00030 keys: [svlvm, module, Prompt]
00030 Exit: get_branch
00031 Enter: AstMap::get_branch(const vector<string> &keys)
00031 keys: [svlvm, module, Main, function, main, code]
00031 Exit: get_branch
00032 Enter: Operand::clone_val()
00032 Exit: clone_val
00033 Enter: AstMap::get_branch(const vector<string> &keys)
00033 keys: [svlvm]
00033 Exit: get_branch
00034 Enter: AstMap::get_branch(const vector<string> &keys)
00034 keys: [svlvm, frames]
00034 Exit: get_branch
00035 Enter: Operand::clone_val()
00035 Exit: clone_val
00036 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00037 Enter: AstList::clone()
00037 Exit: clone
00038 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00038 a = [1,2,3]
00039 Enter: AstMap::get_branch(const vector<string> &keys)
00039 keys: [svlm_lang]
00039 Exit: get_branch
00040 Enter: AstMap::get_branch(const vector<string> &keys)
00040 keys: [svlvm, frames]
00040 Exit: get_branch
00041 Enter: Operand::clone_val()
00041 Exit: clone_val
00042 Enter: AstMap::get_branch(const vector<string> &keys)
00042 keys: [svlvm, module, Main, mvar]
00042 Exit: get_branch
00043 Enter: AstMap::get_branch(const vector<string> &keys)
00043 keys: [svlvm, module, Main, mvar]
00043 Exit: get_branch
00038 sub_node.add() before
00044 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00044 a: [1,2,3]
00044 Exit: add
00038 sub_node.add() after
00038 Exit: assign
00036 Exit: evaluate
00045 Enter: AstMvar::AstMvar(const string &v)
00045 var_name: a
00046 Enter: Operand::clone_val()
00046 Exit: clone_val
00045 Exit: AstMvar
00047 Enter: AstMap::get_branch(const vector<string> &keys)
00047 keys: [svlvm, module, Prompt]
00047 Exit: get_branch
00048 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00048 last: {"code": [nil.a]}
00048 Exit: add
00049 Enter: AstMap::get_branch(const vector<string> &keys)
00049 keys: [svlvm, module, Prompt]
00049 Exit: get_branch
00050 Enter: AstMap::get_branch(const vector<string> &keys)
00050 keys: [svlvm, module, Prompt, last, code]
00050 Exit: get_branch
00051 Enter: AstMap::get_branch(const vector<string> &keys)
00051 keys: [svlvm]
00051 Exit: get_branch
00052 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00052 var_name: a
00053 Enter: AstMap::get_branch(const vector<string> &keys)
00053 keys: [svlm_lang]
00053 Exit: get_branch
00054 Enter: AstMap::get_branch(const vector<string> &keys)
00054 keys: [svlvm, frames]
00054 Exit: get_branch
00055 Enter: Operand::clone_val()
00055 Exit: clone_val
00056 Enter: AstMap::get_branch(const vector<string> &keys)
00056 keys: [svlvm, module, Main, mvar]
00056 Exit: get_branch
00052 Exit: evaluate
00057 Enter: AstMvar::AstMvar(const string &v)
00057 var_name: a
00058 Enter: Operand::clone_val()
00058 Exit: clone_val
00057 Exit: AstMvar
00059 Enter: AstMvar::AstMvar(const string &v)
00059 var_name: b
00060 Enter: Operand::clone_val()
00060 Exit: clone_val
00059 Exit: AstMvar
00061 Enter: Operand::clone_val()
00061 Exit: clone_val
00062 Enter: AstMap::get_branch(const vector<string> &keys)
00062 keys: [svlvm, module, Prompt]
00062 Exit: get_branch
00063 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00063 last: {"code": [nil.b=nil.a]}
00063 Exit: add
00064 Enter: AstMap::get_branch(const vector<string> &keys)
00064 keys: [svlvm, module, Prompt]
00064 Exit: get_branch
00065 Enter: AstMap::get_branch(const vector<string> &keys)
00065 keys: [svlvm, module, Prompt, last, code]
00065 Exit: get_branch
00066 Enter: AstMap::get_branch(const vector<string> &keys)
00066 keys: [svlvm]
00066 Exit: get_branch
00067 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00068 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00068 var_name: a
00069 Enter: AstMap::get_branch(const vector<string> &keys)
00069 keys: [svlm_lang]
00069 Exit: get_branch
00070 Enter: AstMap::get_branch(const vector<string> &keys)
00070 keys: [svlvm, frames]
00070 Exit: get_branch
00071 Enter: Operand::clone_val()
00071 Exit: clone_val
00072 Enter: AstMap::get_branch(const vector<string> &keys)
00072 keys: [svlvm, module, Main, mvar]
00072 Exit: get_branch
00068 Exit: evaluate
00073 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00073 b = [1,2,3]
00074 Enter: AstMap::get_branch(const vector<string> &keys)
00074 keys: [svlm_lang]
00074 Exit: get_branch
00075 Enter: AstMap::get_branch(const vector<string> &keys)
00075 keys: [svlvm, frames]
00075 Exit: get_branch
00076 Enter: Operand::clone_val()
00076 Exit: clone_val
00077 Enter: AstMap::get_branch(const vector<string> &keys)
00077 keys: [svlvm, module, Main, mvar]
00077 Exit: get_branch
00073 sub_node.add() before
00078 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00078 b: [1,2,3]
00078 Exit: add
00073 sub_node.add() after
00073 Exit: assign
00067 Exit: evaluate
00079 Enter: Operand::clone_val()
00079 Exit: clone_val
00080 Enter: Operand::clone_val()
00080 Exit: clone_val
00081 Enter: AstMap::get_branch(const vector<string> &keys)
00081 keys: [svlvm, module, Prompt]
00081 Exit: get_branch
00082 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00082 last: {"code": [nil.b=5]}
00082 Exit: add
00083 Enter: AstMap::get_branch(const vector<string> &keys)
00083 keys: [svlvm, module, Prompt]
00083 Exit: get_branch
00084 Enter: AstMap::get_branch(const vector<string> &keys)
00084 keys: [svlvm, module, Prompt, last, code]
00084 Exit: get_branch
00085 Enter: AstMap::get_branch(const vector<string> &keys)
00085 keys: [svlvm]
00085 Exit: get_branch
00086 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00087 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00087 b = 5
00088 Enter: AstMap::get_branch(const vector<string> &keys)
00088 keys: [svlm_lang]
00088 Exit: get_branch
00089 Enter: AstMap::get_branch(const vector<string> &keys)
00089 keys: [svlvm, frames]
00089 Exit: get_branch
00090 Enter: Operand::clone_val()
00090 Exit: clone_val
00091 Enter: AstMap::get_branch(const vector<string> &keys)
00091 keys: [svlvm, module, Main, mvar]
00091 Exit: get_branch
00087 Exit: assign
00086 Exit: evaluate
00092 Enter: AstMvar::AstMvar(const string &v)
00092 var_name: b
00093 Enter: Operand::clone_val()
00093 Exit: clone_val
00092 Exit: AstMvar
00094 Enter: AstMap::get_branch(const vector<string> &keys)
00094 keys: [svlvm, module, Prompt]
00094 Exit: get_branch
00095 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00095 last: {"code": [nil.b]}
00095 Exit: add
00096 Enter: AstMap::get_branch(const vector<string> &keys)
00096 keys: [svlvm, module, Prompt]
00096 Exit: get_branch
00097 Enter: AstMap::get_branch(const vector<string> &keys)
00097 keys: [svlvm, module, Prompt, last, code]
00097 Exit: get_branch
00098 Enter: AstMap::get_branch(const vector<string> &keys)
00098 keys: [svlvm]
00098 Exit: get_branch
00099 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00099 var_name: b
00100 Enter: AstMap::get_branch(const vector<string> &keys)
00100 keys: [svlm_lang]
00100 Exit: get_branch
00101 Enter: AstMap::get_branch(const vector<string> &keys)
00101 keys: [svlvm, frames]
00101 Exit: get_branch
00102 Enter: Operand::clone_val()
00102 Exit: clone_val
00103 Enter: AstMap::get_branch(const vector<string> &keys)
00103 keys: [svlvm, module, Main, mvar]
00103 Exit: get_branch
00099 Exit: evaluate
00104 Enter: AstMvar::AstMvar(const string &v)
00104 var_name: a
00105 Enter: Operand::clone_val()
00105 Exit: clone_val
00104 Exit: AstMvar
00106 Enter: AstMap::get_branch(const vector<string> &keys)
00106 keys: [svlvm, module, Prompt]
00106 Exit: get_branch
00107 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00107 last: {"code": [nil.a]}
00107 Exit: add
00108 Enter: AstMap::get_branch(const vector<string> &keys)
00108 keys: [svlvm, module, Prompt]
00108 Exit: get_branch
00109 Enter: AstMap::get_branch(const vector<string> &keys)
00109 keys: [svlvm, module, Prompt, last, code]
00109 Exit: get_branch
00110 Enter: AstMap::get_branch(const vector<string> &keys)
00110 keys: [svlvm]
00110 Exit: get_branch
00111 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00111 var_name: a
00112 Enter: AstMap::get_branch(const vector<string> &keys)
00112 keys: [svlm_lang]
00112 Exit: get_branch
00113 Enter: AstMap::get_branch(const vector<string> &keys)
00113 keys: [svlvm, frames]
00113 Exit: get_branch
00114 Enter: Operand::clone_val()
00114 Exit: clone_val
00115 Enter: AstMap::get_branch(const vector<string> &keys)
00115 keys: [svlvm, module, Main, mvar]
00115 Exit: get_branch
00111 Exit: evaluate
00116 Enter: AstMvar::AstMvar(const string &v)
00116 var_name: a
00117 Enter: Operand::clone_val()
00117 Exit: clone_val
00116 Exit: AstMvar
00118 Enter: AstMvar::AstMvar(const string &v)
00118 var_name: d
00119 Enter: Operand::clone_val()
00119 Exit: clone_val
00118 Exit: AstMvar
00120 Enter: Operand::clone_val()
00120 Exit: clone_val
00121 Enter: AstMap::get_branch(const vector<string> &keys)
00121 keys: [svlvm, module, Prompt]
00121 Exit: get_branch
00122 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00122 last: {"code": [nil.d=nil.a]}
00122 Exit: add
00123 Enter: AstMap::get_branch(const vector<string> &keys)
00123 keys: [svlvm, module, Prompt]
00123 Exit: get_branch
00124 Enter: AstMap::get_branch(const vector<string> &keys)
00124 keys: [svlvm, module, Prompt, last, code]
00124 Exit: get_branch
00125 Enter: AstMap::get_branch(const vector<string> &keys)
00125 keys: [svlvm]
00125 Exit: get_branch
00126 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00127 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00127 var_name: a
00128 Enter: AstMap::get_branch(const vector<string> &keys)
00128 keys: [svlm_lang]
00128 Exit: get_branch
00129 Enter: AstMap::get_branch(const vector<string> &keys)
00129 keys: [svlvm, frames]
00129 Exit: get_branch
00130 Enter: Operand::clone_val()
00130 Exit: clone_val
00131 Enter: AstMap::get_branch(const vector<string> &keys)
00131 keys: [svlvm, module, Main, mvar]
00131 Exit: get_branch
00127 Exit: evaluate
00132 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00132 d = [1,5,3]
00133 Enter: AstMap::get_branch(const vector<string> &keys)
00133 keys: [svlm_lang]
00133 Exit: get_branch
00134 Enter: AstMap::get_branch(const vector<string> &keys)
00134 keys: [svlvm, frames]
00134 Exit: get_branch
00135 Enter: Operand::clone_val()
00135 Exit: clone_val
00136 Enter: AstMap::get_branch(const vector<string> &keys)
00136 keys: [svlvm, module, Main, mvar]
00136 Exit: get_branch
00132 sub_node.add() before
00137 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00137 d: [1,5,3]
00137 Exit: add
00132 sub_node.add() after
00132 Exit: assign
00126 Exit: evaluate
00138 Enter: Operand::clone_val()
00138 Exit: clone_val
00139 Enter: Operand::clone_val()
00139 Exit: clone_val
00140 Enter: AstMap::get_branch(const vector<string> &keys)
00140 keys: [svlvm, module, Prompt]
00140 Exit: get_branch
00141 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00141 last: {"code": [nil.d=66666]}
00141 Exit: add
00142 Enter: AstMap::get_branch(const vector<string> &keys)
00142 keys: [svlvm, module, Prompt]
00142 Exit: get_branch
00143 Enter: AstMap::get_branch(const vector<string> &keys)
00143 keys: [svlvm, module, Prompt, last, code]
00143 Exit: get_branch
00144 Enter: AstMap::get_branch(const vector<string> &keys)
00144 keys: [svlvm]
00144 Exit: get_branch
00145 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00146 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00146 d = 66666
00147 Enter: AstMap::get_branch(const vector<string> &keys)
00147 keys: [svlm_lang]
00147 Exit: get_branch
00148 Enter: AstMap::get_branch(const vector<string> &keys)
00148 keys: [svlvm, frames]
00148 Exit: get_branch
00149 Enter: Operand::clone_val()
00149 Exit: clone_val
00150 Enter: AstMap::get_branch(const vector<string> &keys)
00150 keys: [svlvm, module, Main, mvar]
00150 Exit: get_branch
00146 Exit: assign
00145 Exit: evaluate
00151 Enter: AstMvar::AstMvar(const string &v)
00151 var_name: a
00152 Enter: Operand::clone_val()
00152 Exit: clone_val
00151 Exit: AstMvar
00153 Enter: AstMap::get_branch(const vector<string> &keys)
00153 keys: [svlvm, module, Prompt]
00153 Exit: get_branch
00154 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00154 last: {"code": [nil.a]}
00154 Exit: add
00155 Enter: AstMap::get_branch(const vector<string> &keys)
00155 keys: [svlvm, module, Prompt]
00155 Exit: get_branch
00156 Enter: AstMap::get_branch(const vector<string> &keys)
00156 keys: [svlvm, module, Prompt, last, code]
00156 Exit: get_branch
00157 Enter: AstMap::get_branch(const vector<string> &keys)
00157 keys: [svlvm]
00157 Exit: get_branch
00158 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00158 var_name: a
00159 Enter: AstMap::get_branch(const vector<string> &keys)
00159 keys: [svlm_lang]
00159 Exit: get_branch
00160 Enter: AstMap::get_branch(const vector<string> &keys)
00160 keys: [svlvm, frames]
00160 Exit: get_branch
00161 Enter: Operand::clone_val()
00161 Exit: clone_val
00162 Enter: AstMap::get_branch(const vector<string> &keys)
00162 keys: [svlvm, module, Main, mvar]
00162 Exit: get_branch
00158 Exit: evaluate
00163 Enter: AstMap::get_branch(const vector<string> &keys)
00163 keys: [svlvm, module, Main, mvar, a]
00163 Exit: get_branch
00164 Enter: AstMap::get_branch(const vector<string> &keys)
00164 keys: [svlvm, module, Main, mvar, a]
00164 Exit: get_branch
00165 Enter: AstMap::get_branch(const vector<string> &keys)
00165 keys: [svlvm, module, Main, mvar, b]
00165 Exit: get_branch
00166 Enter: AstMap::get_branch(const vector<string> &keys)
00166 keys: [svlvm, module, Main, mvar, b]
00166 Exit: get_branch
00167 Enter: AstMap::get_branch(const vector<string> &keys)
00167 keys: [svlvm, module, Main, mvar]
00167 Exit: get_branch
00168 Enter: AstMap::get_branch(const vector<string> &keys)
00168 keys: [svlvm, module, Main, mvar, d]
00168 Exit: get_branch
00169 Enter: AstMap::get_branch(const vector<string> &keys)
00169 keys: [svlvm, module, Main, mvar, d]
00169 Exit: get_branch
00170 Enter: AstMvar::AstMvar(const string &v)
00170 var_name: d
00171 Enter: Operand::clone_val()
00171 Exit: clone_val
00170 Exit: AstMvar
00172 Enter: Operand::clone_val()
00172 Exit: clone_val
00173 Enter: AstMap::get_branch(const vector<string> &keys)
00173 keys: [svlvm, module, Prompt]
00173 Exit: get_branch
00174 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00174 last: {"code": [nil.d=333]}
00174 Exit: add
00175 Enter: AstMap::get_branch(const vector<string> &keys)
00175 keys: [svlvm, module, Prompt]
00175 Exit: get_branch
00176 Enter: AstMap::get_branch(const vector<string> &keys)
00176 keys: [svlvm, module, Prompt, last, code]
00176 Exit: get_branch
00177 Enter: AstMap::get_branch(const vector<string> &keys)
00177 keys: [svlvm]
00177 Exit: get_branch
00178 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00179 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00179 d = 333
00180 Enter: AstMap::get_branch(const vector<string> &keys)
00180 keys: [svlm_lang]
00180 Exit: get_branch
00181 Enter: AstMap::get_branch(const vector<string> &keys)
00181 keys: [svlvm, frames]
00181 Exit: get_branch
00182 Enter: Operand::clone_val()
00182 Exit: clone_val
00183 Enter: AstMap::get_branch(const vector<string> &keys)
00183 keys: [svlvm, module, Main, mvar]
00183 Exit: get_branch
00179 sub_node.add() before
00184 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00184 d: 333
00184 Exit: add
00179 sub_node.add() after
00179 Exit: assign
00178 Exit: evaluate
00185 Enter: AstMvar::AstMvar(const string &v)
00185 var_name: d
00186 Enter: Operand::clone_val()
00186 Exit: clone_val
00185 Exit: AstMvar
00187 Enter: AstMap::get_branch(const vector<string> &keys)
00187 keys: [svlvm, module, Prompt]
00187 Exit: get_branch
00188 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00188 last: {"code": [nil.d]}
00188 Exit: add
00189 Enter: AstMap::get_branch(const vector<string> &keys)
00189 keys: [svlvm, module, Prompt]
00189 Exit: get_branch
00190 Enter: AstMap::get_branch(const vector<string> &keys)
00190 keys: [svlvm, module, Prompt, last, code]
00190 Exit: get_branch
00191 Enter: AstMap::get_branch(const vector<string> &keys)
00191 keys: [svlvm]
00191 Exit: get_branch
00192 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00192 var_name: d
00193 Enter: AstMap::get_branch(const vector<string> &keys)
00193 keys: [svlm_lang]
00193 Exit: get_branch
00194 Enter: AstMap::get_branch(const vector<string> &keys)
00194 keys: [svlvm, frames]
00194 Exit: get_branch
00195 Enter: Operand::clone_val()
00195 Exit: clone_val
00196 Enter: AstMap::get_branch(const vector<string> &keys)
00196 keys: [svlvm, module, Main, mvar]
00196 Exit: get_branch
00192 Exit: evaluate
00197 Enter: AstMap::get_branch(const vector<string> &keys)
00197 keys: [svlvm, module, Main, mvar, d]
00197 Exit: get_branch
00198 Enter: AstMap::get_branch(const vector<string> &keys)
00198 keys: [svlvm, module, Main, mvar, d]
00198 Exit: get_branch
00199 Enter: AstMap::get_branch(const vector<string> &keys)
00199 keys: [svlvm, module, Main, mvar, b]
00199 Exit: get_branch
00200 Enter: AstMap::get_branch(const vector<string> &keys)
00200 keys: [svlvm, module, Main, mvar, b]
00200 Exit: get_branch
00201 Enter: AstMap::get_branch(const vector<string> &keys)
00201 keys: [svlvm, module, Main, mvar, a]
00201 Exit: get_branch
00202 Enter: AstMap::get_branch(const vector<string> &keys)
00202 keys: [svlvm, module, Main, mvar, a]
00202 Exit: get_branch
00203 Enter: AstMap::get_branch(const vector<string> &keys)
00203 keys: [svlvm, module, Prompt]
00203 Exit: get_branch
00204 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00204 last: {"code": nil}
00204 Exit: add
00205 Enter: AstMap::get_branch(const vector<string> &keys)
00205 keys: [svlvm, module, Prompt]
00205 Exit: get_branch
00206 Enter: AstMap::get_branch(const vector<string> &keys)
00206 keys: [svlvm, module, Prompt, last, code]
00206 Exit: get_branch
00207 Enter: AstMap::get_branch(const vector<string> &keys)
00207 keys: [svlvm]
00207 Exit: get_branch
00000 Exit: main
