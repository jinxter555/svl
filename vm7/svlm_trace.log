00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: AstMvar::AstMvar(const string &v)
00006 var_name: n
00007 Enter: Operand::clone_val()
00007 Exit: clone_val
00006 Exit: AstMvar
00008 Enter: Operand::clone_val()
00008 Exit: clone_val
00009 Enter: Operand::clone_val()
00009 Exit: clone_val
00010 Enter: Operand::clone_val()
00010 Exit: clone_val
00011 Enter: AstMvar::AstMvar(const string &v)
00011 var_name: n
00012 Enter: Operand::clone_val()
00012 Exit: clone_val
00011 Exit: AstMvar
00013 Enter: AstMvar::AstMvar(const string &v)
00013 var_name: a
00014 Enter: Operand::clone_val()
00014 Exit: clone_val
00013 Exit: AstMvar
00015 Enter: Operand::clone_val()
00015 Exit: clone_val
00016 Enter: Operand::clone_val()
00016 Exit: clone_val
00017 Enter: Operand::clone_val()
00017 Exit: clone_val
00018 Enter: Operand::clone_val()
00018 Exit: clone_val
00019 Enter: AstMap::get_branch(const vector<string> &keys)
00019 keys: [svlvm, module, Main]
00019 Exit: get_branch
00020 Enter: AstMap::get_branch(const vector<string> &keys)
00020 keys: [svlvm, module, Main]
00020 Exit: get_branch
00021 Enter: AstMap::get_branch(const vector<string> &keys)
00021 keys: [svlvm, module, Main, function]
00021 Exit: get_branch
00022 Enter: AstMap::get_branch(const vector<string> &keys)
00022 keys: [svlvm, module, Main, function]
00022 Exit: get_branch
00023 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00023 main: func: main
00023 Exit: add
00024 Enter: AstMap::get_branch(const vector<string> &keys)
00024 keys: [svlvm, module, Main, function]
00024 Exit: get_branch
00025 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00025 func2: func: func2
00025 Exit: add
00026 Enter: AstMap::get_branch(const vector<string> &keys)
00026 keys: [svlvm, module, Main, function]
00026 Exit: get_branch
00027 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00027 func3: func: func3
00027 Exit: add
00028 Enter: Operand::clone_val()
00028 Exit: clone_val
00029 Enter: AstMap::get_branch(const vector<string> &keys)
00029 keys: [svlvm, module, Helper]
00029 Exit: get_branch
00030 Enter: AstMap::get_branch(const vector<string> &keys)
00030 keys: [svlvm, module, Helper]
00030 Exit: get_branch
00031 Enter: AstMap::get_branch(const vector<string> &keys)
00031 keys: [svlvm, module, Helper, function]
00031 Exit: get_branch
00032 Enter: AstMap::get_branch(const vector<string> &keys)
00032 keys: [svlvm, module, Helper, function]
00032 Exit: get_branch
00033 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00033 me: func: me
00033 Exit: add
00034 Enter: AstMap::get_branch(const vector<string> &keys)
00034 keys: [svlvm, module, Prompt]
00034 Exit: get_branch
00035 Enter: AstMap::get_branch(const vector<string> &keys)
00035 keys: [svlvm, module, Prompt]
00035 Exit: get_branch
00036 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00036 last: {"code": []}
00036 Exit: add
00037 Enter: AstMap::get_branch(const vector<string> &keys)
00037 keys: [svlvm, module, Prompt]
00037 Exit: get_branch
00038 Enter: AstMap::get_branch(const vector<string> &keys)
00038 keys: [svlvm, module, Main, function, main, code]
00038 Exit: get_branch
00039 Enter: Operand::clone_val()
00039 Exit: clone_val
00040 Enter: AstMap::get_branch(const vector<string> &keys)
00040 keys: [svlvm]
00040 Exit: get_branch
00041 Enter: AstMap::get_branch(const vector<string> &keys)
00041 keys: [svlvm, frames]
00041 Exit: get_branch
00042 Enter: Operand::clone_val()
00042 Exit: clone_val
00043 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00044 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00044 n = 555
00045 Enter: AstMap::get_branch(const vector<string> &keys)
00045 keys: [svlm_lang]
00045 Exit: get_branch
00046 Enter: AstMap::get_branch(const vector<string> &keys)
00046 keys: [svlvm, frames]
00046 Exit: get_branch
00047 Enter: Operand::clone_val()
00047 Exit: clone_val
00048 Enter: AstMap::get_branch(const vector<string> &keys)
00048 keys: [svlvm, module, Main, mvar]
00048 Exit: get_branch
00049 Enter: AstMap::get_branch(const vector<string> &keys)
00049 keys: [svlvm, module, Main, mvar]
00049 Exit: get_branch
00044 sub_node.add() before
00050 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00050 n: 555
00050 Exit: add
00044 sub_node.add() after
00044 Exit: assign
00043 Exit: evaluate
00051 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00052 Enter: Tuple::evalaute()
00053 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00054 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00054 Exit: evaluate
00053 Exit: evaluate
00055 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00055 var_name: n
00056 Enter: AstMap::get_branch(const vector<string> &keys)
00056 keys: [svlm_lang]
00056 Exit: get_branch
00057 Enter: AstMap::get_branch(const vector<string> &keys)
00057 keys: [svlvm, frames]
00057 Exit: get_branch
00058 Enter: Operand::clone_val()
00058 Exit: clone_val
00059 Enter: AstMap::get_branch(const vector<string> &keys)
00059 keys: [svlvm, module, Main, mvar]
00059 Exit: get_branch
00055 Exit: evaluate
00052 Exit: evaluate
00060 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00060 a = {1,2,24,555,hello}
00061 Enter: AstMap::get_branch(const vector<string> &keys)
00061 keys: [svlm_lang]
00061 Exit: get_branch
00062 Enter: AstMap::get_branch(const vector<string> &keys)
00062 keys: [svlvm, frames]
00062 Exit: get_branch
00063 Enter: Operand::clone_val()
00063 Exit: clone_val
00064 Enter: AstMap::get_branch(const vector<string> &keys)
00064 keys: [svlvm, module, Main, mvar]
00064 Exit: get_branch
00060 sub_node.add() before
00065 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00065 a: {1,2,24,555,hello}
00065 Exit: add
00060 sub_node.add() after
00060 Exit: assign
00051 Exit: evaluate
00066 Enter: AstMvar::AstMvar(const string &v)
00066 var_name: b
00067 Enter: Operand::clone_val()
00067 Exit: clone_val
00066 Exit: AstMvar
00068 Enter: Operand::clone_val()
00068 Exit: clone_val
00069 Enter: AstMap::get_branch(const vector<string> &keys)
00069 keys: [svlvm, module, Prompt]
00069 Exit: get_branch
00070 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00070 last: {"code": [{$b,5}={3,5}]}
00070 Exit: add
00071 Enter: AstMap::get_branch(const vector<string> &keys)
00071 keys: [svlvm, module, Prompt]
00071 Exit: get_branch
00072 Enter: AstMap::get_branch(const vector<string> &keys)
00072 keys: [svlvm, module, Prompt, last, code]
00072 Exit: get_branch
00073 Enter: AstMap::get_branch(const vector<string> &keys)
00073 keys: [svlvm]
00073 Exit: get_branch
00074 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00075 Enter: Tuple::evalaute()
00075 Exit: evaluate
00076 Enter: Tuple::evalaute()
00077 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00077 var_name: b
00078 Enter: AstMap::get_branch(const vector<string> &keys)
00078 keys: [svlm_lang]
00078 Exit: get_branch
00079 Enter: AstMap::get_branch(const vector<string> &keys)
00079 keys: [svlvm, frames]
00079 Exit: get_branch
00080 Enter: Operand::clone_val()
00080 Exit: clone_val
00081 Enter: AstMap::get_branch(const vector<string> &keys)
00081 keys: [svlvm, module, Main, mvar]
00081 Exit: get_branch
00077 Exit: evaluate
00076 Exit: evaluate
00082 Enter: Tuple::clone()
00082 Exit: clone
00083 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00083 b = 3
00084 Enter: AstMap::get_branch(const vector<string> &keys)
00084 keys: [svlm_lang]
00084 Exit: get_branch
00085 Enter: AstMap::get_branch(const vector<string> &keys)
00085 keys: [svlvm, module, Main, mvar]
00085 Exit: get_branch
00083 sub_node.add() before
00086 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00086 b: 3
00086 Exit: add
00083 sub_node.add() after
00083 Exit: assign
00074 Exit: evaluate
00087 Enter: AstMvar::AstMvar(const string &v)
00087 var_name: b
00088 Enter: Operand::clone_val()
00088 Exit: clone_val
00087 Exit: AstMvar
00089 Enter: AstMap::get_branch(const vector<string> &keys)
00089 keys: [svlvm, module, Prompt]
00089 Exit: get_branch
00090 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00090 last: {"code": [$b]}
00090 Exit: add
00091 Enter: AstMap::get_branch(const vector<string> &keys)
00091 keys: [svlvm, module, Prompt]
00091 Exit: get_branch
00092 Enter: AstMap::get_branch(const vector<string> &keys)
00092 keys: [svlvm, module, Prompt, last, code]
00092 Exit: get_branch
00093 Enter: AstMap::get_branch(const vector<string> &keys)
00093 keys: [svlvm]
00093 Exit: get_branch
00094 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00094 var_name: b
00095 Enter: AstMap::get_branch(const vector<string> &keys)
00095 keys: [svlm_lang]
00095 Exit: get_branch
00096 Enter: AstMap::get_branch(const vector<string> &keys)
00096 keys: [svlvm, frames]
00096 Exit: get_branch
00097 Enter: Operand::clone_val()
00097 Exit: clone_val
00098 Enter: AstMap::get_branch(const vector<string> &keys)
00098 keys: [svlvm, module, Main, mvar]
00098 Exit: get_branch
00094 Exit: evaluate
00000 Exit: main
