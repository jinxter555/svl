00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: AstMvar::AstMvar(const string &v)
00006 var_name: a
00007 Enter: Operand::clone_val()
00007 Exit: clone_val
00006 Exit: AstMvar
00008 Enter: Operand::clone_val()
00008 Exit: clone_val
00009 Enter: AstMvar::AstMvar(const string &v)
00009 var_name: a
00010 Enter: Operand::clone_val()
00010 Exit: clone_val
00009 Exit: AstMvar
00011 Enter: AstMvar::AstMvar(const string &v)
00011 var_name: b
00012 Enter: Operand::clone_val()
00012 Exit: clone_val
00011 Exit: AstMvar
00013 Enter: Operand::clone_val()
00013 Exit: clone_val
00014 Enter: Operand::clone_val()
00014 Exit: clone_val
00015 Enter: Operand::clone_val()
00015 Exit: clone_val
00016 Enter: Operand::clone_val()
00016 Exit: clone_val
00017 Enter: AstMap::get_branch(const vector<string> &keys)
00017 keys: [svlvm, module, Main]
00017 Exit: get_branch
00018 Enter: AstMap::get_branch(const vector<string> &keys)
00018 keys: [svlvm, module, Main]
00018 Exit: get_branch
00019 Enter: AstMap::get_branch(const vector<string> &keys)
00019 keys: [svlvm, module, Main, function]
00019 Exit: get_branch
00020 Enter: AstMap::get_branch(const vector<string> &keys)
00020 keys: [svlvm, module, Main, function]
00020 Exit: get_branch
00021 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00021 main: func: main
00021 Exit: add
00022 Enter: AstMap::get_branch(const vector<string> &keys)
00022 keys: [svlvm, module, Main, function]
00022 Exit: get_branch
00023 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00023 func2: func: func2
00023 Exit: add
00024 Enter: AstMap::get_branch(const vector<string> &keys)
00024 keys: [svlvm, module, Main, function]
00024 Exit: get_branch
00025 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00025 func3: func: func3
00025 Exit: add
00026 Enter: Operand::clone_val()
00026 Exit: clone_val
00027 Enter: AstMap::get_branch(const vector<string> &keys)
00027 keys: [svlvm, module, Helper]
00027 Exit: get_branch
00028 Enter: AstMap::get_branch(const vector<string> &keys)
00028 keys: [svlvm, module, Helper]
00028 Exit: get_branch
00029 Enter: AstMap::get_branch(const vector<string> &keys)
00029 keys: [svlvm, module, Helper, function]
00029 Exit: get_branch
00030 Enter: AstMap::get_branch(const vector<string> &keys)
00030 keys: [svlvm, module, Helper, function]
00030 Exit: get_branch
00031 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00031 me: func: me
00031 Exit: add
00032 Enter: AstMap::get_branch(const vector<string> &keys)
00032 keys: [svlvm, module, Prompt]
00032 Exit: get_branch
00033 Enter: AstMap::get_branch(const vector<string> &keys)
00033 keys: [svlvm, module, Prompt]
00033 Exit: get_branch
00034 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00034 last: {"code": []}
00034 Exit: add
00035 Enter: AstMap::get_branch(const vector<string> &keys)
00035 keys: [svlvm, module, Prompt]
00035 Exit: get_branch
00036 Enter: AstMap::get_branch(const vector<string> &keys)
00036 keys: [svlvm, module, Main, function, main, code]
00036 Exit: get_branch
00037 Enter: Operand::clone_val()
00037 Exit: clone_val
00038 Enter: AstMap::get_branch(const vector<string> &keys)
00038 keys: [svlvm]
00038 Exit: get_branch
00039 Enter: AstMap::get_branch(const vector<string> &keys)
00039 keys: [svlvm, frames]
00039 Exit: get_branch
00040 Enter: Operand::clone_val()
00040 Exit: clone_val
00041 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00042 Enter: AstList::clone()
00042 Exit: clone
00043 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00043 a = [1,2,3]
00044 Enter: AstMap::get_branch(const vector<string> &keys)
00044 keys: [svlm_lang]
00044 Exit: get_branch
00045 Enter: AstMap::get_branch(const vector<string> &keys)
00045 keys: [svlvm, frames]
00045 Exit: get_branch
00046 Enter: Operand::clone_val()
00046 Exit: clone_val
00047 Enter: AstMap::get_branch(const vector<string> &keys)
00047 keys: [svlvm, module, Main, mvar]
00047 Exit: get_branch
00048 Enter: AstMap::get_branch(const vector<string> &keys)
00048 keys: [svlvm, module, Main, mvar]
00048 Exit: get_branch
00043 sub_node.add() before
00049 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00049 a: [1,2,3]
00049 Exit: add
00043 sub_node.add() after
00043 Exit: assign
00041 Exit: evaluate
00050 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00051 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00051 var_name: a
00052 Enter: AstMap::get_branch(const vector<string> &keys)
00052 keys: [svlm_lang]
00052 Exit: get_branch
00053 Enter: AstMap::get_branch(const vector<string> &keys)
00053 keys: [svlvm, frames]
00053 Exit: get_branch
00054 Enter: Operand::clone_val()
00054 Exit: clone_val
00055 Enter: AstMap::get_branch(const vector<string> &keys)
00055 keys: [svlvm, module, Main, mvar]
00055 Exit: get_branch
00056 Enter: AstList::clone()
00056 Exit: clone
00051 Exit: evaluate
00057 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00057 b = [1,2,3]
00058 Enter: AstMap::get_branch(const vector<string> &keys)
00058 keys: [svlm_lang]
00058 Exit: get_branch
00059 Enter: AstMap::get_branch(const vector<string> &keys)
00059 keys: [svlvm, frames]
00059 Exit: get_branch
00060 Enter: Operand::clone_val()
00060 Exit: clone_val
00061 Enter: AstMap::get_branch(const vector<string> &keys)
00061 keys: [svlvm, module, Main, mvar]
00061 Exit: get_branch
00057 sub_node.add() before
00062 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00062 b: [1,2,3]
00062 Exit: add
00057 sub_node.add() after
00057 Exit: assign
00050 Exit: evaluate
00063 Enter: AstMvar::AstMvar(const string &v)
00063 var_name: a
00064 Enter: Operand::clone_val()
00064 Exit: clone_val
00063 Exit: AstMvar
00065 Enter: AstMvar::AstMvar(const string &v)
00065 var_name: b
00066 Enter: Operand::clone_val()
00066 Exit: clone_val
00065 Exit: AstMvar
00067 Enter: Operand::clone_val()
00067 Exit: clone_val
00068 Enter: AstMap::get_branch(const vector<string> &keys)
00068 keys: [svlvm, module, Prompt]
00068 Exit: get_branch
00069 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00069 last: {"code": [nil.b=nil.a]}
00069 Exit: add
00070 Enter: AstMap::get_branch(const vector<string> &keys)
00070 keys: [svlvm, module, Prompt]
00070 Exit: get_branch
00071 Enter: AstMap::get_branch(const vector<string> &keys)
00071 keys: [svlvm, module, Prompt, last, code]
00071 Exit: get_branch
00072 Enter: AstMap::get_branch(const vector<string> &keys)
00072 keys: [svlvm]
00072 Exit: get_branch
00073 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00074 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00074 var_name: a
00075 Enter: AstMap::get_branch(const vector<string> &keys)
00075 keys: [svlm_lang]
00075 Exit: get_branch
00076 Enter: AstMap::get_branch(const vector<string> &keys)
00076 keys: [svlvm, frames]
00076 Exit: get_branch
00077 Enter: Operand::clone_val()
00077 Exit: clone_val
00078 Enter: AstMap::get_branch(const vector<string> &keys)
00078 keys: [svlvm, module, Main, mvar]
00078 Exit: get_branch
00079 Enter: AstList::clone()
00079 Exit: clone
00074 Exit: evaluate
00080 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00080 b = [1,2,3]
00081 Enter: AstMap::get_branch(const vector<string> &keys)
00081 keys: [svlm_lang]
00081 Exit: get_branch
00082 Enter: AstMap::get_branch(const vector<string> &keys)
00082 keys: [svlvm, frames]
00082 Exit: get_branch
00083 Enter: Operand::clone_val()
00083 Exit: clone_val
00084 Enter: AstMap::get_branch(const vector<string> &keys)
00084 keys: [svlvm, module, Main, mvar]
00084 Exit: get_branch
00080 sub_node.add() before
00085 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00085 b: [1,2,3]
00085 Exit: add
00080 sub_node.add() after
00080 Exit: assign
00073 Exit: evaluate
00086 Enter: Operand::clone_val()
00086 Exit: clone_val
00087 Enter: Operand::clone_val()
00087 Exit: clone_val
00088 Enter: AstMap::get_branch(const vector<string> &keys)
00088 keys: [svlvm, module, Prompt]
00088 Exit: get_branch
00089 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00089 last: {"code": [nil.a=3]}
00089 Exit: add
00090 Enter: AstMap::get_branch(const vector<string> &keys)
00090 keys: [svlvm, module, Prompt]
00090 Exit: get_branch
00091 Enter: AstMap::get_branch(const vector<string> &keys)
00091 keys: [svlvm, module, Prompt, last, code]
00091 Exit: get_branch
00092 Enter: AstMap::get_branch(const vector<string> &keys)
00092 keys: [svlvm]
00092 Exit: get_branch
00093 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00094 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00094 a = 3
00095 Enter: AstMap::get_branch(const vector<string> &keys)
00095 keys: [svlm_lang]
00095 Exit: get_branch
00096 Enter: AstMap::get_branch(const vector<string> &keys)
00096 keys: [svlvm, frames]
00096 Exit: get_branch
00097 Enter: Operand::clone_val()
00097 Exit: clone_val
00098 Enter: AstMap::get_branch(const vector<string> &keys)
00098 keys: [svlvm, module, Main, mvar]
00098 Exit: get_branch
00094 Exit: assign
00093 Exit: evaluate
00099 Enter: AstMvar::AstMvar(const string &v)
00099 var_name: a
00100 Enter: Operand::clone_val()
00100 Exit: clone_val
00099 Exit: AstMvar
00101 Enter: AstMap::get_branch(const vector<string> &keys)
00101 keys: [svlvm, module, Prompt]
00101 Exit: get_branch
00102 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00102 last: {"code": [nil.a]}
00102 Exit: add
00103 Enter: AstMap::get_branch(const vector<string> &keys)
00103 keys: [svlvm, module, Prompt]
00103 Exit: get_branch
00104 Enter: AstMap::get_branch(const vector<string> &keys)
00104 keys: [svlvm, module, Prompt, last, code]
00104 Exit: get_branch
00105 Enter: AstMap::get_branch(const vector<string> &keys)
00105 keys: [svlvm]
00105 Exit: get_branch
00106 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00106 var_name: a
00107 Enter: AstMap::get_branch(const vector<string> &keys)
00107 keys: [svlm_lang]
00107 Exit: get_branch
00108 Enter: AstMap::get_branch(const vector<string> &keys)
00108 keys: [svlvm, frames]
00108 Exit: get_branch
00109 Enter: Operand::clone_val()
00109 Exit: clone_val
00110 Enter: AstMap::get_branch(const vector<string> &keys)
00110 keys: [svlvm, module, Main, mvar]
00110 Exit: get_branch
00111 Enter: AstList::clone()
00111 Exit: clone
00106 Exit: evaluate
00112 Enter: AstMvar::AstMvar(const string &v)
00112 var_name: b
00113 Enter: Operand::clone_val()
00113 Exit: clone_val
00112 Exit: AstMvar
00114 Enter: AstMap::get_branch(const vector<string> &keys)
00114 keys: [svlvm, module, Prompt]
00114 Exit: get_branch
00115 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00115 last: {"code": [nil.b]}
00115 Exit: add
00116 Enter: AstMap::get_branch(const vector<string> &keys)
00116 keys: [svlvm, module, Prompt]
00116 Exit: get_branch
00117 Enter: AstMap::get_branch(const vector<string> &keys)
00117 keys: [svlvm, module, Prompt, last, code]
00117 Exit: get_branch
00118 Enter: AstMap::get_branch(const vector<string> &keys)
00118 keys: [svlvm]
00118 Exit: get_branch
00119 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00119 var_name: b
00120 Enter: AstMap::get_branch(const vector<string> &keys)
00120 keys: [svlm_lang]
00120 Exit: get_branch
00121 Enter: AstMap::get_branch(const vector<string> &keys)
00121 keys: [svlvm, frames]
00121 Exit: get_branch
00122 Enter: Operand::clone_val()
00122 Exit: clone_val
00123 Enter: AstMap::get_branch(const vector<string> &keys)
00123 keys: [svlvm, module, Main, mvar]
00123 Exit: get_branch
00119 Exit: evaluate
00000 Exit: main
