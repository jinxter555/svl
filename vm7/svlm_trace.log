00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: AstMvar::AstMvar(const string &v)
00006 var_name: a
00007 Enter: Operand::clone_val()
00007 Exit: clone_val
00006 Exit: AstMvar
00008 Enter: Operand::clone_val()
00008 Exit: clone_val
00009 Enter: AstMvar::AstMvar(const string &v)
00009 var_name: x
00010 Enter: Operand::clone_val()
00010 Exit: clone_val
00009 Exit: AstMvar
00011 Enter: Operand::clone_val()
00011 Exit: clone_val
00012 Enter: AstMvar::AstMvar(const string &v)
00012 var_name: y
00013 Enter: Operand::clone_val()
00013 Exit: clone_val
00012 Exit: AstMvar
00014 Enter: Operand::clone_val()
00014 Exit: clone_val
00015 Enter: Operand::clone_val()
00015 Exit: clone_val
00016 Enter: Operand::clone_val()
00016 Exit: clone_val
00017 Enter: Operand::clone_val()
00017 Exit: clone_val
00018 Enter: AstMap::get_branch(const vector<string> &keys)
00018 keys: [svlvm, module, Main]
00018 Exit: get_branch
00019 Enter: Operand::==(operand&)
00020 Enter: OperandCmpEql::()(Nil, Nil)
00020 Exit: operator()
00019 Exit: operator==
00021 Enter: AstMap::get_branch(const vector<string> &keys)
00021 keys: [svlvm, module, Main]
00021 Exit: get_branch
00022 Enter: AstMap::get_branch(const vector<string> &keys)
00022 keys: [svlvm, module, Main, function]
00022 Exit: get_branch
00023 Enter: Operand::==(operand&)
00024 Enter: OperandCmpEql::()(Nil, Nil)
00024 Exit: operator()
00023 Exit: operator==
00025 Enter: AstMap::get_branch(const vector<string> &keys)
00025 keys: [svlvm, module, Main, function]
00025 Exit: get_branch
00026 Enter: Operand::==(operand&)
00026 Exit: operator==
00027 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00027 main: func: main
00027 Exit: add
00028 Enter: AstMap::get_branch(const vector<string> &keys)
00028 keys: [svlvm, module, Main, function]
00028 Exit: get_branch
00029 Enter: Operand::==(operand&)
00029 Exit: operator==
00030 Enter: Operand::==(operand&)
00030 Exit: operator==
00031 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00031 func2: func: func2
00031 Exit: add
00032 Enter: AstMap::get_branch(const vector<string> &keys)
00032 keys: [svlvm, module, Main, function]
00032 Exit: get_branch
00033 Enter: Operand::==(operand&)
00033 Exit: operator==
00034 Enter: Operand::==(operand&)
00034 Exit: operator==
00035 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00035 func3: func: func3
00035 Exit: add
00036 Enter: Operand::clone_val()
00036 Exit: clone_val
00037 Enter: AstMap::get_branch(const vector<string> &keys)
00037 keys: [svlvm, module, Helper]
00037 Exit: get_branch
00038 Enter: Operand::==(operand&)
00039 Enter: OperandCmpEql::()(Nil, Nil)
00039 Exit: operator()
00038 Exit: operator==
00040 Enter: AstMap::get_branch(const vector<string> &keys)
00040 keys: [svlvm, module, Helper]
00040 Exit: get_branch
00041 Enter: AstMap::get_branch(const vector<string> &keys)
00041 keys: [svlvm, module, Helper, function]
00041 Exit: get_branch
00042 Enter: Operand::==(operand&)
00043 Enter: OperandCmpEql::()(Nil, Nil)
00043 Exit: operator()
00042 Exit: operator==
00044 Enter: AstMap::get_branch(const vector<string> &keys)
00044 keys: [svlvm, module, Helper, function]
00044 Exit: get_branch
00045 Enter: Operand::==(operand&)
00045 Exit: operator==
00046 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00046 me: func: me
00046 Exit: add
00047 Enter: AstMap::get_branch(const vector<string> &keys)
00047 keys: [svlvm, module, Prompt]
00047 Exit: get_branch
00048 Enter: Operand::==(operand&)
00049 Enter: OperandCmpEql::()(Nil, Nil)
00049 Exit: operator()
00048 Exit: operator==
00050 Enter: AstMap::get_branch(const vector<string> &keys)
00050 keys: [svlvm, module, Prompt]
00050 Exit: get_branch
00051 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00051 last: {"code": []}
00051 Exit: add
00052 Enter: AstMap::get_branch(const vector<string> &keys)
00052 keys: [svlvm, module, Prompt]
00052 Exit: get_branch
00053 Enter: AstMap::get_branch(const vector<string> &keys)
00053 keys: [svlvm, module, Main, function, main, code]
00053 Exit: get_branch
00054 Enter: Operand::clone_val()
00054 Exit: clone_val
00055 Enter: AstMap::get_branch(const vector<string> &keys)
00055 keys: [svlvm]
00055 Exit: get_branch
00056 Enter: AstMap::get_branch(const vector<string> &keys)
00056 keys: [svlvm, frames]
00056 Exit: get_branch
00057 Enter: Operand::clone_val()
00057 Exit: clone_val
00058 Enter: AstList::evaluate()
00059 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00060 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00060 a = nil
00061 Enter: AstMap::get_branch(const vector<string> &keys)
00061 keys: [svlm_lang]
00061 Exit: get_branch
00062 Enter: Operand::==(operand&)
00063 Enter: OperandCmpEql::()(Nil, Nil)
00063 Exit: operator()
00062 Exit: operator==
00064 Enter: AstMap::get_branch(const vector<string> &keys)
00064 keys: [svlvm, frames]
00064 Exit: get_branch
00065 Enter: Operand::clone_val()
00065 Exit: clone_val
00066 Enter: AstMap::get_branch(const vector<string> &keys)
00066 keys: [svlvm, module, Main, mvar]
00066 Exit: get_branch
00067 Enter: Operand::==(operand&)
00068 Enter: OperandCmpEql::()(Nil, Nil)
00068 Exit: operator()
00067 Exit: operator==
00069 Enter: AstMap::get_branch(const vector<string> &keys)
00069 keys: [svlvm, module, Main, mvar]
00069 Exit: get_branch
00060 sub_node.add() before
00070 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00070 a: nil
00071 Enter: Operand::clone_val()
00071 Exit: clone_val
00070 Exit: add
00060 sub_node.add() after
00060 Exit: assign
00059 Exit: evaluate
00072 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00073 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00073 x = 1
00074 Enter: AstMap::get_branch(const vector<string> &keys)
00074 keys: [svlm_lang]
00074 Exit: get_branch
00075 Enter: Operand::==(operand&)
00076 Enter: OperandCmpEql::()(Nil, Nil)
00076 Exit: operator()
00075 Exit: operator==
00077 Enter: AstMap::get_branch(const vector<string> &keys)
00077 keys: [svlvm, frames]
00077 Exit: get_branch
00078 Enter: Operand::clone_val()
00078 Exit: clone_val
00079 Enter: AstMap::get_branch(const vector<string> &keys)
00079 keys: [svlvm, module, Main, mvar]
00079 Exit: get_branch
00080 Enter: Operand::==(operand&)
00080 Exit: operator==
00073 sub_node.add() before
00081 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00081 x: 1
00082 Enter: Operand::clone_val()
00082 Exit: clone_val
00081 Exit: add
00073 sub_node.add() after
00073 Exit: assign
00072 Exit: evaluate
00083 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00084 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00084 y = 1
00085 Enter: AstMap::get_branch(const vector<string> &keys)
00085 keys: [svlm_lang]
00085 Exit: get_branch
00086 Enter: Operand::==(operand&)
00087 Enter: OperandCmpEql::()(Nil, Nil)
00087 Exit: operator()
00086 Exit: operator==
00088 Enter: AstMap::get_branch(const vector<string> &keys)
00088 keys: [svlvm, frames]
00088 Exit: get_branch
00089 Enter: Operand::clone_val()
00089 Exit: clone_val
00090 Enter: AstMap::get_branch(const vector<string> &keys)
00090 keys: [svlvm, module, Main, mvar]
00090 Exit: get_branch
00091 Enter: Operand::==(operand&)
00091 Exit: operator==
00084 sub_node.add() before
00092 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00092 y: 1
00093 Enter: Operand::clone_val()
00093 Exit: clone_val
00092 Exit: add
00084 sub_node.add() after
00084 Exit: assign
00083 Exit: evaluate
00058 Exit: evaluate
00094 Enter: AstMvar::AstMvar(const string &v)
00094 var_name: y
00095 Enter: Operand::clone_val()
00095 Exit: clone_val
00094 Exit: AstMvar
00096 Enter: Operand::clone_val()
00096 Exit: clone_val
00097 Enter: AstMap::get_branch(const vector<string> &keys)
00097 keys: [svlvm, module, Prompt]
00097 Exit: get_branch
00098 Enter: Operand::==(operand&)
00098 Exit: operator==
00099 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00100 Enter: Operand::==(operand&)
00101 Enter: OperandCmpEql::()(Nil, Nil)
00101 Exit: operator()
00100 Exit: operator==
00099 last: {"code": [2==$y]}
00099 Exit: add
00102 Enter: AstMap::get_branch(const vector<string> &keys)
00102 keys: [svlvm, module, Prompt]
00102 Exit: get_branch
00103 Enter: AstMap::get_branch(const vector<string> &keys)
00103 keys: [svlvm, module, Prompt, last, code]
00103 Exit: get_branch
00104 Enter: AstMap::get_branch(const vector<string> &keys)
00104 keys: [svlvm]
00104 Exit: get_branch
00105 Enter: AstList::evaluate()
00106 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00107 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00107 var_name: y
00108 Enter: AstMap::get_branch(const vector<string> &keys)
00108 keys: [svlm_lang]
00108 Exit: get_branch
00109 Enter: Operand::==(operand&)
00110 Enter: OperandCmpEql::()(Nil, Nil)
00110 Exit: operator()
00109 Exit: operator==
00111 Enter: AstMap::get_branch(const vector<string> &keys)
00111 keys: [svlvm, frames]
00111 Exit: get_branch
00112 Enter: Operand::clone_val()
00112 Exit: clone_val
00113 Enter: AstMap::get_branch(const vector<string> &keys)
00113 keys: [svlvm, module, Main, mvar]
00113 Exit: get_branch
00114 Enter: Operand::==(operand&)
00114 Exit: operator==
00107 Exit: evaluate
00115 Enter: Operand::clone_val()
00115 Exit: clone_val
00116 Enter: Operand::==(operand&)
00117 Enter: OperandCmpEql::()(T, T)
00117 Exit: operator()
00116 Exit: operator==
00106 Exit: evaluate
00105 Exit: evaluate
00118 Enter: Operand::==(operand&)
00118 Exit: operator==
00119 Enter: AstMvar::AstMvar(const string &v)
00119 var_name: y
00120 Enter: Operand::clone_val()
00120 Exit: clone_val
00119 Exit: AstMvar
00121 Enter: Operand::clone_val()
00121 Exit: clone_val
00122 Enter: AstMap::get_branch(const vector<string> &keys)
00122 keys: [svlvm, module, Prompt]
00122 Exit: get_branch
00123 Enter: Operand::==(operand&)
00123 Exit: operator==
00124 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00125 Enter: Operand::==(operand&)
00126 Enter: OperandCmpEql::()(Nil, Nil)
00126 Exit: operator()
00125 Exit: operator==
00124 last: {"code": [1==$y]}
00124 Exit: add
00127 Enter: AstMap::get_branch(const vector<string> &keys)
00127 keys: [svlvm, module, Prompt]
00127 Exit: get_branch
00128 Enter: AstMap::get_branch(const vector<string> &keys)
00128 keys: [svlvm, module, Prompt, last, code]
00128 Exit: get_branch
00129 Enter: AstMap::get_branch(const vector<string> &keys)
00129 keys: [svlvm]
00129 Exit: get_branch
00130 Enter: AstList::evaluate()
00131 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00132 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00132 var_name: y
00133 Enter: AstMap::get_branch(const vector<string> &keys)
00133 keys: [svlm_lang]
00133 Exit: get_branch
00134 Enter: Operand::==(operand&)
00135 Enter: OperandCmpEql::()(Nil, Nil)
00135 Exit: operator()
00134 Exit: operator==
00136 Enter: AstMap::get_branch(const vector<string> &keys)
00136 keys: [svlvm, frames]
00136 Exit: get_branch
00137 Enter: Operand::clone_val()
00137 Exit: clone_val
00138 Enter: AstMap::get_branch(const vector<string> &keys)
00138 keys: [svlvm, module, Main, mvar]
00138 Exit: get_branch
00139 Enter: Operand::==(operand&)
00139 Exit: operator==
00132 Exit: evaluate
00140 Enter: Operand::clone_val()
00140 Exit: clone_val
00141 Enter: Operand::==(operand&)
00142 Enter: OperandCmpEql::()(T, T)
00142 Exit: operator()
00141 Exit: operator==
00131 Exit: evaluate
00130 Exit: evaluate
00143 Enter: Operand::==(operand&)
00143 Exit: operator==
00144 Enter: AstMvar::AstMvar(const string &v)
00144 var_name: x
00145 Enter: Operand::clone_val()
00145 Exit: clone_val
00144 Exit: AstMvar
00146 Enter: AstMvar::AstMvar(const string &v)
00146 var_name: y
00147 Enter: Operand::clone_val()
00147 Exit: clone_val
00146 Exit: AstMvar
00148 Enter: Operand::clone_val()
00148 Exit: clone_val
00149 Enter: AstMap::get_branch(const vector<string> &keys)
00149 keys: [svlvm, module, Prompt]
00149 Exit: get_branch
00150 Enter: Operand::==(operand&)
00150 Exit: operator==
00151 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00152 Enter: Operand::==(operand&)
00153 Enter: OperandCmpEql::()(Nil, Nil)
00153 Exit: operator()
00152 Exit: operator==
00154 Enter: Operand::==(operand&)
00155 Enter: OperandCmpEql::()(Nil, Nil)
00155 Exit: operator()
00154 Exit: operator==
00151 last: {"code": [$x==$y]}
00151 Exit: add
00156 Enter: AstMap::get_branch(const vector<string> &keys)
00156 keys: [svlvm, module, Prompt]
00156 Exit: get_branch
00157 Enter: AstMap::get_branch(const vector<string> &keys)
00157 keys: [svlvm, module, Prompt, last, code]
00157 Exit: get_branch
00158 Enter: AstMap::get_branch(const vector<string> &keys)
00158 keys: [svlvm]
00158 Exit: get_branch
00159 Enter: AstList::evaluate()
00160 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00161 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00161 var_name: y
00162 Enter: AstMap::get_branch(const vector<string> &keys)
00162 keys: [svlm_lang]
00162 Exit: get_branch
00163 Enter: Operand::==(operand&)
00164 Enter: OperandCmpEql::()(Nil, Nil)
00164 Exit: operator()
00163 Exit: operator==
00165 Enter: AstMap::get_branch(const vector<string> &keys)
00165 keys: [svlvm, frames]
00165 Exit: get_branch
00166 Enter: Operand::clone_val()
00166 Exit: clone_val
00167 Enter: AstMap::get_branch(const vector<string> &keys)
00167 keys: [svlvm, module, Main, mvar]
00167 Exit: get_branch
00168 Enter: Operand::==(operand&)
00168 Exit: operator==
00161 Exit: evaluate
00169 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00169 var_name: x
00170 Enter: AstMap::get_branch(const vector<string> &keys)
00170 keys: [svlm_lang]
00170 Exit: get_branch
00171 Enter: Operand::==(operand&)
00172 Enter: OperandCmpEql::()(Nil, Nil)
00172 Exit: operator()
00171 Exit: operator==
00173 Enter: AstMap::get_branch(const vector<string> &keys)
00173 keys: [svlvm, frames]
00173 Exit: get_branch
00174 Enter: Operand::clone_val()
00174 Exit: clone_val
00175 Enter: AstMap::get_branch(const vector<string> &keys)
00175 keys: [svlvm, module, Main, mvar]
00175 Exit: get_branch
00176 Enter: Operand::==(operand&)
00176 Exit: operator==
00169 Exit: evaluate
00177 Enter: Operand::clone_val()
00177 Exit: clone_val
00178 Enter: Operand::==(operand&)
00179 Enter: Operand::==(operand&)
00180 Enter: OperandCmpEql::()(T, T)
00180 Exit: operator()
00179 Exit: operator==
00178 Exit: operator==
00160 Exit: evaluate
00159 Exit: evaluate
00181 Enter: Operand::==(operand&)
00181 Exit: operator==
00182 Enter: Operand::clone_val()
00182 Exit: clone_val
00183 Enter: Operand::clone_val()
00183 Exit: clone_val
00184 Enter: AstMap::get_branch(const vector<string> &keys)
00184 keys: [svlvm, module, Prompt]
00184 Exit: get_branch
00185 Enter: Operand::==(operand&)
00185 Exit: operator==
00186 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00186 last: {"code": [z=1]}
00186 Exit: add
00187 Enter: AstMap::get_branch(const vector<string> &keys)
00187 keys: [svlvm, module, Prompt]
00187 Exit: get_branch
00188 Enter: AstMap::get_branch(const vector<string> &keys)
00188 keys: [svlvm, module, Prompt, last, code]
00188 Exit: get_branch
00189 Enter: AstMap::get_branch(const vector<string> &keys)
00189 keys: [svlvm]
00189 Exit: get_branch
00190 Enter: AstList::evaluate()
00191 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00192 Enter: AstMap::get_branch(const vector<string> &keys)
00192 keys: [svlm_lang]
00192 Exit: get_branch
00193 Enter: AstMap::get_branch(const vector<string> &keys)
00193 keys: [svlvm, frames]
00193 Exit: get_branch
00194 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00194 z: 1
00195 Enter: Operand::clone_val()
00195 Exit: clone_val
00194 Exit: add
00191 Exit: evaluate
00190 Exit: evaluate
00196 Enter: Operand::==(operand&)
00196 Exit: operator==
00197 Enter: Operand::clone_val()
00197 Exit: clone_val
00198 Enter: AstMvar::AstMvar(const string &v)
00198 var_name: y
00199 Enter: Operand::clone_val()
00199 Exit: clone_val
00198 Exit: AstMvar
00200 Enter: Operand::clone_val()
00200 Exit: clone_val
00201 Enter: AstMap::get_branch(const vector<string> &keys)
00201 keys: [svlvm, module, Prompt]
00201 Exit: get_branch
00202 Enter: Operand::==(operand&)
00202 Exit: operator==
00203 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00204 Enter: Operand::==(operand&)
00205 Enter: OperandCmpEql::()(Nil, Nil)
00205 Exit: operator()
00204 Exit: operator==
00203 last: {"code": [z==$y]}
00203 Exit: add
00206 Enter: AstMap::get_branch(const vector<string> &keys)
00206 keys: [svlvm, module, Prompt]
00206 Exit: get_branch
00207 Enter: AstMap::get_branch(const vector<string> &keys)
00207 keys: [svlvm, module, Prompt, last, code]
00207 Exit: get_branch
00208 Enter: AstMap::get_branch(const vector<string> &keys)
00208 keys: [svlvm]
00208 Exit: get_branch
00209 Enter: AstList::evaluate()
00210 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00211 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00211 var_name: y
00212 Enter: AstMap::get_branch(const vector<string> &keys)
00212 keys: [svlm_lang]
00212 Exit: get_branch
00213 Enter: Operand::==(operand&)
00214 Enter: OperandCmpEql::()(Nil, Nil)
00214 Exit: operator()
00213 Exit: operator==
00215 Enter: AstMap::get_branch(const vector<string> &keys)
00215 keys: [svlvm, frames]
00215 Exit: get_branch
00216 Enter: Operand::clone_val()
00216 Exit: clone_val
00217 Enter: AstMap::get_branch(const vector<string> &keys)
00217 keys: [svlvm, module, Main, mvar]
00217 Exit: get_branch
00218 Enter: Operand::==(operand&)
00218 Exit: operator==
00211 Exit: evaluate
00219 Enter: AstMap::get_branch(const vector<string> &keys)
00219 keys: [svlm_lang]
00219 Exit: get_branch
00220 Enter: AstMap::get_branch(const vector<string> &keys)
00220 keys: [svlvm, frames]
00220 Exit: get_branch
00221 Enter: Operand::clone_val()
00221 Exit: clone_val
00222 Enter: Operand::==(operand&)
00223 Enter: Operand::==(operand&)
00224 Enter: OperandCmpEql::()(T, T)
00224 Exit: operator()
00223 Exit: operator==
00222 Exit: operator==
00210 Exit: evaluate
00209 Exit: evaluate
00225 Enter: Operand::==(operand&)
00225 Exit: operator==
00226 Enter: Operand::clone_val()
00226 Exit: clone_val
00227 Enter: Operand::clone_val()
00227 Exit: clone_val
00228 Enter: AstMap::get_branch(const vector<string> &keys)
00228 keys: [svlvm, module, Prompt]
00228 Exit: get_branch
00229 Enter: Operand::==(operand&)
00229 Exit: operator==
00230 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00230 last: {"code": [z=2]}
00230 Exit: add
00231 Enter: AstMap::get_branch(const vector<string> &keys)
00231 keys: [svlvm, module, Prompt]
00231 Exit: get_branch
00232 Enter: AstMap::get_branch(const vector<string> &keys)
00232 keys: [svlvm, module, Prompt, last, code]
00232 Exit: get_branch
00233 Enter: AstMap::get_branch(const vector<string> &keys)
00233 keys: [svlvm]
00233 Exit: get_branch
00234 Enter: AstList::evaluate()
00235 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00236 Enter: AstMap::get_branch(const vector<string> &keys)
00236 keys: [svlm_lang]
00236 Exit: get_branch
00237 Enter: AstMap::get_branch(const vector<string> &keys)
00237 keys: [svlvm, frames]
00237 Exit: get_branch
00238 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00238 z: 2
00238 Exit: add
00235 Exit: evaluate
00234 Exit: evaluate
00239 Enter: Operand::==(operand&)
00239 Exit: operator==
00240 Enter: Operand::clone_val()
00240 Exit: clone_val
00241 Enter: AstMvar::AstMvar(const string &v)
00241 var_name: y
00242 Enter: Operand::clone_val()
00242 Exit: clone_val
00241 Exit: AstMvar
00243 Enter: Operand::clone_val()
00243 Exit: clone_val
00244 Enter: AstMap::get_branch(const vector<string> &keys)
00244 keys: [svlvm, module, Prompt]
00244 Exit: get_branch
00245 Enter: Operand::==(operand&)
00245 Exit: operator==
00246 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00247 Enter: Operand::==(operand&)
00248 Enter: OperandCmpEql::()(Nil, Nil)
00248 Exit: operator()
00247 Exit: operator==
00246 last: {"code": [z==$y]}
00246 Exit: add
00249 Enter: AstMap::get_branch(const vector<string> &keys)
00249 keys: [svlvm, module, Prompt]
00249 Exit: get_branch
00250 Enter: AstMap::get_branch(const vector<string> &keys)
00250 keys: [svlvm, module, Prompt, last, code]
00250 Exit: get_branch
00251 Enter: AstMap::get_branch(const vector<string> &keys)
00251 keys: [svlvm]
00251 Exit: get_branch
00252 Enter: AstList::evaluate()
00253 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00254 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00254 var_name: y
00255 Enter: AstMap::get_branch(const vector<string> &keys)
00255 keys: [svlm_lang]
00255 Exit: get_branch
00256 Enter: Operand::==(operand&)
00257 Enter: OperandCmpEql::()(Nil, Nil)
00257 Exit: operator()
00256 Exit: operator==
00258 Enter: AstMap::get_branch(const vector<string> &keys)
00258 keys: [svlvm, frames]
00258 Exit: get_branch
00259 Enter: Operand::clone_val()
00259 Exit: clone_val
00260 Enter: AstMap::get_branch(const vector<string> &keys)
00260 keys: [svlvm, module, Main, mvar]
00260 Exit: get_branch
00261 Enter: Operand::==(operand&)
00261 Exit: operator==
00254 Exit: evaluate
00262 Enter: AstMap::get_branch(const vector<string> &keys)
00262 keys: [svlm_lang]
00262 Exit: get_branch
00263 Enter: AstMap::get_branch(const vector<string> &keys)
00263 keys: [svlvm, frames]
00263 Exit: get_branch
00264 Enter: Operand::clone_val()
00264 Exit: clone_val
00265 Enter: Operand::==(operand&)
00266 Enter: Operand::==(operand&)
00267 Enter: OperandCmpEql::()(T, T)
00267 Exit: operator()
00266 Exit: operator==
00265 Exit: operator==
00253 Exit: evaluate
00252 Exit: evaluate
00268 Enter: Operand::==(operand&)
00268 Exit: operator==
00269 Enter: Operand::clone_val()
00269 Exit: clone_val
00270 Enter: AstMap::get_branch(const vector<string> &keys)
00270 keys: [svlvm, module, Prompt]
00270 Exit: get_branch
00271 Enter: Operand::==(operand&)
00271 Exit: operator==
00272 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00272 last: {"code": [z]}
00272 Exit: add
00273 Enter: AstMap::get_branch(const vector<string> &keys)
00273 keys: [svlvm, module, Prompt]
00273 Exit: get_branch
00274 Enter: AstMap::get_branch(const vector<string> &keys)
00274 keys: [svlvm, module, Prompt, last, code]
00274 Exit: get_branch
00275 Enter: AstMap::get_branch(const vector<string> &keys)
00275 keys: [svlvm]
00275 Exit: get_branch
00276 Enter: AstList::evaluate()
00277 Enter: AstMap::get_branch(const vector<string> &keys)
00277 keys: [svlm_lang]
00277 Exit: get_branch
00278 Enter: AstMap::get_branch(const vector<string> &keys)
00278 keys: [svlvm, frames]
00278 Exit: get_branch
00276 Exit: evaluate
00279 Enter: Operand::==(operand&)
00279 Exit: operator==
00280 Enter: AstMvar::AstMvar(const string &v)
00280 var_name: y
00281 Enter: Operand::clone_val()
00281 Exit: clone_val
00280 Exit: AstMvar
00282 Enter: AstMap::get_branch(const vector<string> &keys)
00282 keys: [svlvm, module, Prompt]
00282 Exit: get_branch
00283 Enter: Operand::==(operand&)
00283 Exit: operator==
00284 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00285 Enter: Operand::==(operand&)
00286 Enter: OperandCmpEql::()(Nil, Nil)
00286 Exit: operator()
00285 Exit: operator==
00284 last: {"code": [$y]}
00284 Exit: add
00287 Enter: AstMap::get_branch(const vector<string> &keys)
00287 keys: [svlvm, module, Prompt]
00287 Exit: get_branch
00288 Enter: AstMap::get_branch(const vector<string> &keys)
00288 keys: [svlvm, module, Prompt, last, code]
00288 Exit: get_branch
00289 Enter: AstMap::get_branch(const vector<string> &keys)
00289 keys: [svlvm]
00289 Exit: get_branch
00290 Enter: AstList::evaluate()
00291 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00291 var_name: y
00292 Enter: AstMap::get_branch(const vector<string> &keys)
00292 keys: [svlm_lang]
00292 Exit: get_branch
00293 Enter: Operand::==(operand&)
00294 Enter: OperandCmpEql::()(Nil, Nil)
00294 Exit: operator()
00293 Exit: operator==
00295 Enter: AstMap::get_branch(const vector<string> &keys)
00295 keys: [svlvm, frames]
00295 Exit: get_branch
00296 Enter: Operand::clone_val()
00296 Exit: clone_val
00297 Enter: AstMap::get_branch(const vector<string> &keys)
00297 keys: [svlvm, module, Main, mvar]
00297 Exit: get_branch
00298 Enter: Operand::==(operand&)
00298 Exit: operator==
00291 Exit: evaluate
00290 Exit: evaluate
00299 Enter: Operand::==(operand&)
00299 Exit: operator==
00300 Enter: AstMvar::AstMvar(const string &v)
00300 var_name: y
00301 Enter: Operand::clone_val()
00301 Exit: clone_val
00300 Exit: AstMvar
00302 Enter: Operand::clone_val()
00302 Exit: clone_val
00303 Enter: AstMap::get_branch(const vector<string> &keys)
00303 keys: [svlvm, module, Prompt]
00303 Exit: get_branch
00304 Enter: Operand::==(operand&)
00304 Exit: operator==
00305 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00306 Enter: Operand::==(operand&)
00307 Enter: OperandCmpEql::()(Nil, Nil)
00307 Exit: operator()
00306 Exit: operator==
00305 last: {"code": [2==$y]}
00305 Exit: add
00308 Enter: AstMap::get_branch(const vector<string> &keys)
00308 keys: [svlvm, module, Prompt]
00308 Exit: get_branch
00309 Enter: AstMap::get_branch(const vector<string> &keys)
00309 keys: [svlvm, module, Prompt, last, code]
00309 Exit: get_branch
00310 Enter: AstMap::get_branch(const vector<string> &keys)
00310 keys: [svlvm]
00310 Exit: get_branch
00311 Enter: AstList::evaluate()
00312 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00313 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00313 var_name: y
00314 Enter: AstMap::get_branch(const vector<string> &keys)
00314 keys: [svlm_lang]
00314 Exit: get_branch
00315 Enter: Operand::==(operand&)
00316 Enter: OperandCmpEql::()(Nil, Nil)
00316 Exit: operator()
00315 Exit: operator==
00317 Enter: AstMap::get_branch(const vector<string> &keys)
00317 keys: [svlvm, frames]
00317 Exit: get_branch
00318 Enter: Operand::clone_val()
00318 Exit: clone_val
00319 Enter: AstMap::get_branch(const vector<string> &keys)
00319 keys: [svlvm, module, Main, mvar]
00319 Exit: get_branch
00320 Enter: Operand::==(operand&)
00320 Exit: operator==
00313 Exit: evaluate
00321 Enter: Operand::clone_val()
00321 Exit: clone_val
00322 Enter: Operand::==(operand&)
00323 Enter: OperandCmpEql::()(T, T)
00323 Exit: operator()
00322 Exit: operator==
00312 Exit: evaluate
00311 Exit: evaluate
00324 Enter: Operand::==(operand&)
00324 Exit: operator==
00325 Enter: AstMvar::AstMvar(const string &v)
00325 var_name: y
00326 Enter: Operand::clone_val()
00326 Exit: clone_val
00325 Exit: AstMvar
00327 Enter: Operand::clone_val()
00327 Exit: clone_val
00328 Enter: AstMap::get_branch(const vector<string> &keys)
00328 keys: [svlvm, module, Prompt]
00328 Exit: get_branch
00329 Enter: Operand::==(operand&)
00329 Exit: operator==
00330 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00331 Enter: Operand::==(operand&)
00332 Enter: OperandCmpEql::()(Nil, Nil)
00332 Exit: operator()
00331 Exit: operator==
00330 last: {"code": [2==$y]}
00330 Exit: add
00333 Enter: AstMap::get_branch(const vector<string> &keys)
00333 keys: [svlvm, module, Prompt]
00333 Exit: get_branch
00334 Enter: AstMap::get_branch(const vector<string> &keys)
00334 keys: [svlvm, module, Prompt, last, code]
00334 Exit: get_branch
00335 Enter: AstMap::get_branch(const vector<string> &keys)
00335 keys: [svlvm]
00335 Exit: get_branch
00336 Enter: AstList::evaluate()
00337 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00338 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00338 var_name: y
00339 Enter: AstMap::get_branch(const vector<string> &keys)
00339 keys: [svlm_lang]
00339 Exit: get_branch
00340 Enter: Operand::==(operand&)
00341 Enter: OperandCmpEql::()(Nil, Nil)
00341 Exit: operator()
00340 Exit: operator==
00342 Enter: AstMap::get_branch(const vector<string> &keys)
00342 keys: [svlvm, frames]
00342 Exit: get_branch
00343 Enter: Operand::clone_val()
00343 Exit: clone_val
00344 Enter: AstMap::get_branch(const vector<string> &keys)
00344 keys: [svlvm, module, Main, mvar]
00344 Exit: get_branch
00345 Enter: Operand::==(operand&)
00345 Exit: operator==
00338 Exit: evaluate
00346 Enter: Operand::clone_val()
00346 Exit: clone_val
00347 Enter: Operand::==(operand&)
00348 Enter: OperandCmpEql::()(T, T)
00348 Exit: operator()
00347 Exit: operator==
00337 Exit: evaluate
00336 Exit: evaluate
00349 Enter: Operand::==(operand&)
00349 Exit: operator==
00000 Exit: main
