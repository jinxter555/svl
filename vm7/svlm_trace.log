00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: AstMvar::AstMvar(const string &v)
00006 var_name: n
00007 Enter: Operand::clone_val()
00007 Exit: clone_val
00006 Exit: AstMvar
00008 Enter: Operand::clone_val()
00008 Exit: clone_val
00009 Enter: Operand::clone_val()
00009 Exit: clone_val
00010 Enter: Operand::clone_val()
00010 Exit: clone_val
00011 Enter: AstMvar::AstMvar(const string &v)
00011 var_name: n
00012 Enter: Operand::clone_val()
00012 Exit: clone_val
00011 Exit: AstMvar
00013 Enter: AstMvar::AstMvar(const string &v)
00013 var_name: a
00014 Enter: Operand::clone_val()
00014 Exit: clone_val
00013 Exit: AstMvar
00015 Enter: Operand::clone_val()
00015 Exit: clone_val
00016 Enter: Operand::clone_val()
00016 Exit: clone_val
00017 Enter: Operand::clone_val()
00017 Exit: clone_val
00018 Enter: Operand::clone_val()
00018 Exit: clone_val
00019 Enter: AstMap::get_branch(const vector<string> &keys)
00019 keys: [svlvm, module, Main]
00019 Exit: get_branch
00020 Enter: AstMap::get_branch(const vector<string> &keys)
00020 keys: [svlvm, module, Main]
00020 Exit: get_branch
00021 Enter: AstMap::get_branch(const vector<string> &keys)
00021 keys: [svlvm, module, Main, function]
00021 Exit: get_branch
00022 Enter: AstMap::get_branch(const vector<string> &keys)
00022 keys: [svlvm, module, Main, function]
00022 Exit: get_branch
00023 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00023 main: func: main
00023 Exit: add
00024 Enter: AstMap::get_branch(const vector<string> &keys)
00024 keys: [svlvm, module, Main, function]
00024 Exit: get_branch
00025 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00025 func2: func: func2
00025 Exit: add
00026 Enter: AstMap::get_branch(const vector<string> &keys)
00026 keys: [svlvm, module, Main, function]
00026 Exit: get_branch
00027 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00027 func3: func: func3
00027 Exit: add
00028 Enter: Operand::clone_val()
00028 Exit: clone_val
00029 Enter: AstMap::get_branch(const vector<string> &keys)
00029 keys: [svlvm, module, Helper]
00029 Exit: get_branch
00030 Enter: AstMap::get_branch(const vector<string> &keys)
00030 keys: [svlvm, module, Helper]
00030 Exit: get_branch
00031 Enter: AstMap::get_branch(const vector<string> &keys)
00031 keys: [svlvm, module, Helper, function]
00031 Exit: get_branch
00032 Enter: AstMap::get_branch(const vector<string> &keys)
00032 keys: [svlvm, module, Helper, function]
00032 Exit: get_branch
00033 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00033 me: func: me
00033 Exit: add
00034 Enter: AstMap::get_branch(const vector<string> &keys)
00034 keys: [svlvm, module, Prompt]
00034 Exit: get_branch
00035 Enter: AstMap::get_branch(const vector<string> &keys)
00035 keys: [svlvm, module, Prompt]
00035 Exit: get_branch
00036 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00036 last: {"code": []}
00036 Exit: add
00037 Enter: AstMap::get_branch(const vector<string> &keys)
00037 keys: [svlvm, module, Prompt]
00037 Exit: get_branch
00038 Enter: Operand::clone_val()
00038 Exit: clone_val
00039 Enter: AstMap::get_branch(const vector<string> &keys)
00039 keys: [svlvm, module, Prompt]
00039 Exit: get_branch
00040 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00040 last: {"code": [[3,[1,2]]==[3,[1,3]]]}
00040 Exit: add
00041 Enter: AstMap::get_branch(const vector<string> &keys)
00041 keys: [svlvm, module, Prompt]
00041 Exit: get_branch
00042 Enter: AstMap::get_branch(const vector<string> &keys)
00042 keys: [svlvm, module, Prompt, last, code]
00042 Exit: get_branch
00043 Enter: AstMap::get_branch(const vector<string> &keys)
00043 keys: [svlvm]
00043 Exit: get_branch
00044 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00044 Exit: evaluate
00045 Enter: Operand::clone_val()
00045 Exit: clone_val
00046 Enter: AstMap::get_branch(const vector<string> &keys)
00046 keys: [svlvm, module, Prompt]
00046 Exit: get_branch
00047 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00047 last: {"code": [[3,[1,3]]==[3,[1,3]]]}
00047 Exit: add
00048 Enter: AstMap::get_branch(const vector<string> &keys)
00048 keys: [svlvm, module, Prompt]
00048 Exit: get_branch
00049 Enter: AstMap::get_branch(const vector<string> &keys)
00049 keys: [svlvm, module, Prompt, last, code]
00049 Exit: get_branch
00050 Enter: AstMap::get_branch(const vector<string> &keys)
00050 keys: [svlvm]
00050 Exit: get_branch
00051 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00051 Exit: evaluate
00052 Enter: Operand::clone_val()
00052 Exit: clone_val
00053 Enter: AstMap::get_branch(const vector<string> &keys)
00053 keys: [svlvm, module, Prompt]
00053 Exit: get_branch
00054 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00054 last: {"code": [[3,[1,3]]==[3,[1,3]]]}
00054 Exit: add
00055 Enter: AstMap::get_branch(const vector<string> &keys)
00055 keys: [svlvm, module, Prompt]
00055 Exit: get_branch
00056 Enter: AstMap::get_branch(const vector<string> &keys)
00056 keys: [svlvm, module, Prompt, last, code]
00056 Exit: get_branch
00057 Enter: AstMap::get_branch(const vector<string> &keys)
00057 keys: [svlvm]
00057 Exit: get_branch
00058 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00058 Exit: evaluate
00059 Enter: Operand::clone_val()
00059 Exit: clone_val
00060 Enter: AstMap::get_branch(const vector<string> &keys)
00060 keys: [svlvm, module, Prompt]
00060 Exit: get_branch
00061 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00061 last: {"code": [[2,[1,3]]==[3,[1,3]]]}
00061 Exit: add
00062 Enter: AstMap::get_branch(const vector<string> &keys)
00062 keys: [svlvm, module, Prompt]
00062 Exit: get_branch
00063 Enter: AstMap::get_branch(const vector<string> &keys)
00063 keys: [svlvm, module, Prompt, last, code]
00063 Exit: get_branch
00064 Enter: AstMap::get_branch(const vector<string> &keys)
00064 keys: [svlvm]
00064 Exit: get_branch
00065 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00065 Exit: evaluate
00066 Enter: Operand::clone_val()
00066 Exit: clone_val
00067 Enter: AstMap::get_branch(const vector<string> &keys)
00067 keys: [svlvm, module, Prompt]
00067 Exit: get_branch
00068 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00068 last: {"code": [[1,[1,3]]==[3,[1,3]]]}
00068 Exit: add
00069 Enter: AstMap::get_branch(const vector<string> &keys)
00069 keys: [svlvm, module, Prompt]
00069 Exit: get_branch
00070 Enter: AstMap::get_branch(const vector<string> &keys)
00070 keys: [svlvm, module, Prompt, last, code]
00070 Exit: get_branch
00071 Enter: AstMap::get_branch(const vector<string> &keys)
00071 keys: [svlvm]
00071 Exit: get_branch
00072 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00072 Exit: evaluate
00073 Enter: Operand::clone_val()
00073 Exit: clone_val
00074 Enter: AstMap::get_branch(const vector<string> &keys)
00074 keys: [svlvm, module, Prompt]
00074 Exit: get_branch
00075 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00075 last: {"code": [[3,[1,3]]==[3,[1,3]]]}
00075 Exit: add
00076 Enter: AstMap::get_branch(const vector<string> &keys)
00076 keys: [svlvm, module, Prompt]
00076 Exit: get_branch
00077 Enter: AstMap::get_branch(const vector<string> &keys)
00077 keys: [svlvm, module, Prompt, last, code]
00077 Exit: get_branch
00078 Enter: AstMap::get_branch(const vector<string> &keys)
00078 keys: [svlvm]
00078 Exit: get_branch
00079 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00079 Exit: evaluate
00080 Enter: Operand::clone_val()
00080 Exit: clone_val
00081 Enter: AstMap::get_branch(const vector<string> &keys)
00081 keys: [svlvm, module, Prompt]
00081 Exit: get_branch
00082 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00082 last: {"code": [[3,[1,5]]==[3,[1,3]]]}
00082 Exit: add
00083 Enter: AstMap::get_branch(const vector<string> &keys)
00083 keys: [svlvm, module, Prompt]
00083 Exit: get_branch
00084 Enter: AstMap::get_branch(const vector<string> &keys)
00084 keys: [svlvm, module, Prompt, last, code]
00084 Exit: get_branch
00085 Enter: AstMap::get_branch(const vector<string> &keys)
00085 keys: [svlvm]
00085 Exit: get_branch
00086 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00086 Exit: evaluate
00087 Enter: Operand::clone_val()
00087 Exit: clone_val
00088 Enter: AstMap::get_branch(const vector<string> &keys)
00088 keys: [svlvm, module, Prompt]
00088 Exit: get_branch
00089 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00089 last: {"code": [[3,[1,5]]==[3,[1,3]]]}
00089 Exit: add
00090 Enter: AstMap::get_branch(const vector<string> &keys)
00090 keys: [svlvm, module, Prompt]
00090 Exit: get_branch
00091 Enter: AstMap::get_branch(const vector<string> &keys)
00091 keys: [svlvm, module, Prompt, last, code]
00091 Exit: get_branch
00092 Enter: AstMap::get_branch(const vector<string> &keys)
00092 keys: [svlvm]
00092 Exit: get_branch
00093 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00093 Exit: evaluate
00000 Exit: main
