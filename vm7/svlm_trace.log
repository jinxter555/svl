00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00006 www1: server1
00006 Exit: add
00007 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00007 www2: server2
00007 Exit: add
00008 Enter: AstMvar::AstMvar(const string &v)
00008 var_name: m
00009 Enter: Operand::clone_val()
00009 Exit: clone_val
00008 Exit: AstMvar
00010 Enter: Operand::clone_val()
00010 Exit: clone_val
00011 Enter: AstMvar::AstMvar(const string &v)
00011 var_name: l
00012 Enter: Operand::clone_val()
00012 Exit: clone_val
00011 Exit: AstMvar
00013 Enter: Operand::clone_val()
00013 Exit: clone_val
00014 Enter: AstMvar::AstMvar(const string &v)
00014 var_name: m
00015 Enter: Operand::clone_val()
00015 Exit: clone_val
00014 Exit: AstMvar
00016 Enter: AstMvar::AstMvar(const string &v)
00016 var_name: l
00017 Enter: Operand::clone_val()
00017 Exit: clone_val
00016 Exit: AstMvar
00018 Enter: Operand::clone_val()
00018 Exit: clone_val
00019 Enter: AstMap::get_branch(const vector<string> &keys)
00019 keys: [svlvm, module, Main]
00019 Exit: get_branch
00020 Enter: AstMap::get_branch(const vector<string> &keys)
00020 keys: [svlvm, module, Main]
00020 Exit: get_branch
00021 Enter: AstMap::get_branch(const vector<string> &keys)
00021 keys: [svlvm, module, Main, function]
00021 Exit: get_branch
00022 Enter: AstMap::get_branch(const vector<string> &keys)
00022 keys: [svlvm, module, Main, function]
00022 Exit: get_branch
00023 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00023 main: func: main
00023 Exit: add
00024 Enter: AstMap::get_branch(const vector<string> &keys)
00024 keys: [svlvm, module, Prompt]
00024 Exit: get_branch
00025 Enter: AstMap::get_branch(const vector<string> &keys)
00025 keys: [svlvm, module, Prompt]
00025 Exit: get_branch
00026 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00026 last: {"code": []}
00026 Exit: add
00027 Enter: AstMap::get_branch(const vector<string> &keys)
00027 keys: [svlvm, module, Prompt]
00027 Exit: get_branch
00028 Enter: AstMap::get_branch(const vector<string> &keys)
00028 keys: [svlvm, module, Main, function, main, code]
00028 Exit: get_branch
00029 Enter: Operand::clone_val()
00029 Exit: clone_val
00030 Enter: AstMap::get_branch(const vector<string> &keys)
00030 keys: [svlvm]
00030 Exit: get_branch
00031 Enter: AstMap::get_branch(const vector<string> &keys)
00031 keys: [svlvm, frames]
00031 Exit: get_branch
00032 Enter: Operand::clone_val()
00032 Exit: clone_val
00033 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00034 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00034 m = {"www1": server1, "www2": server2}
00035 Enter: AstMap::get_branch(const vector<string> &keys)
00035 keys: [svlm_lang]
00035 Exit: get_branch
00036 Enter: AstMap::get_branch(const vector<string> &keys)
00036 keys: [svlvm, frames]
00036 Exit: get_branch
00037 Enter: Operand::clone_val()
00037 Exit: clone_val
00038 Enter: AstMap::get_branch(const vector<string> &keys)
00038 keys: [svlvm, module, Main, mvar]
00038 Exit: get_branch
00039 Enter: AstMap::get_branch(const vector<string> &keys)
00039 keys: [svlvm, module, Main, mvar]
00039 Exit: get_branch
00034 sub_node.add() before
00040 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00040 m: {"www1": server1, "www2": server2}
00040 Exit: add
00034 sub_node.add() after
00034 Exit: assign
00033 Exit: evaluate
00041 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00042 Enter: AstList::clone()
00042 Exit: clone
00043 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00043 l = [1,2,3]
00044 Enter: AstMap::get_branch(const vector<string> &keys)
00044 keys: [svlm_lang]
00044 Exit: get_branch
00045 Enter: AstMap::get_branch(const vector<string> &keys)
00045 keys: [svlvm, frames]
00045 Exit: get_branch
00046 Enter: Operand::clone_val()
00046 Exit: clone_val
00047 Enter: AstMap::get_branch(const vector<string> &keys)
00047 keys: [svlvm, module, Main, mvar]
00047 Exit: get_branch
00043 sub_node.add() before
00048 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00048 l: [1,2,3]
00048 Exit: add
00043 sub_node.add() after
00043 Exit: assign
00041 Exit: evaluate
00049 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00049 var_name: m
00050 Enter: AstMap::get_branch(const vector<string> &keys)
00050 keys: [svlm_lang]
00050 Exit: get_branch
00051 Enter: AstMap::get_branch(const vector<string> &keys)
00051 keys: [svlvm, frames]
00051 Exit: get_branch
00052 Enter: Operand::clone_val()
00052 Exit: clone_val
00053 Enter: AstMap::get_branch(const vector<string> &keys)
00053 keys: [svlvm, module, Main, mvar]
00053 Exit: get_branch
00049 Exit: evaluate
00054 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00054 var_name: l
00055 Enter: AstMap::get_branch(const vector<string> &keys)
00055 keys: [svlm_lang]
00055 Exit: get_branch
00056 Enter: AstMap::get_branch(const vector<string> &keys)
00056 keys: [svlvm, frames]
00056 Exit: get_branch
00057 Enter: Operand::clone_val()
00057 Exit: clone_val
00058 Enter: AstMap::get_branch(const vector<string> &keys)
00058 keys: [svlvm, module, Main, mvar]
00058 Exit: get_branch
00054 Exit: evaluate
00059 Enter: AstMvar::AstMvar(const string &v)
00059 var_name: l
00060 Enter: Operand::clone_val()
00060 Exit: clone_val
00059 Exit: AstMvar
00061 Enter: AstMvar::AstMvar(const string &v)
00061 var_name: d
00062 Enter: Operand::clone_val()
00062 Exit: clone_val
00061 Exit: AstMvar
00063 Enter: Operand::clone_val()
00063 Exit: clone_val
00064 Enter: AstMap::get_branch(const vector<string> &keys)
00064 keys: [svlvm, module, Prompt]
00064 Exit: get_branch
00065 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00065 last: {"code": [nil.d=nil.l]}
00065 Exit: add
00066 Enter: AstMap::get_branch(const vector<string> &keys)
00066 keys: [svlvm, module, Prompt]
00066 Exit: get_branch
00067 Enter: AstMap::get_branch(const vector<string> &keys)
00067 keys: [svlvm, module, Prompt, last, code]
00067 Exit: get_branch
00068 Enter: AstMap::get_branch(const vector<string> &keys)
00068 keys: [svlvm]
00068 Exit: get_branch
00069 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00070 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00070 var_name: l
00071 Enter: AstMap::get_branch(const vector<string> &keys)
00071 keys: [svlm_lang]
00071 Exit: get_branch
00072 Enter: AstMap::get_branch(const vector<string> &keys)
00072 keys: [svlvm, frames]
00072 Exit: get_branch
00073 Enter: Operand::clone_val()
00073 Exit: clone_val
00074 Enter: AstMap::get_branch(const vector<string> &keys)
00074 keys: [svlvm, module, Main, mvar]
00074 Exit: get_branch
00070 Exit: evaluate
00075 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00075 d = [1,2,3]
00076 Enter: AstMap::get_branch(const vector<string> &keys)
00076 keys: [svlm_lang]
00076 Exit: get_branch
00077 Enter: AstMap::get_branch(const vector<string> &keys)
00077 keys: [svlvm, frames]
00077 Exit: get_branch
00078 Enter: Operand::clone_val()
00078 Exit: clone_val
00079 Enter: AstMap::get_branch(const vector<string> &keys)
00079 keys: [svlvm, module, Main, mvar]
00079 Exit: get_branch
00075 sub_node.add() before
00080 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00080 d: [1,2,3]
00080 Exit: add
00075 sub_node.add() after
00075 Exit: assign
00069 Exit: evaluate
00081 Enter: AstMvar::AstMvar(const string &v)
00081 var_name: d
00082 Enter: Operand::clone_val()
00082 Exit: clone_val
00081 Exit: AstMvar
00083 Enter: AstMap::get_branch(const vector<string> &keys)
00083 keys: [svlvm, module, Prompt]
00083 Exit: get_branch
00084 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00084 last: {"code": [nil.d]}
00084 Exit: add
00085 Enter: AstMap::get_branch(const vector<string> &keys)
00085 keys: [svlvm, module, Prompt]
00085 Exit: get_branch
00086 Enter: AstMap::get_branch(const vector<string> &keys)
00086 keys: [svlvm, module, Prompt, last, code]
00086 Exit: get_branch
00087 Enter: AstMap::get_branch(const vector<string> &keys)
00087 keys: [svlvm]
00087 Exit: get_branch
00088 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00088 var_name: d
00089 Enter: AstMap::get_branch(const vector<string> &keys)
00089 keys: [svlm_lang]
00089 Exit: get_branch
00090 Enter: AstMap::get_branch(const vector<string> &keys)
00090 keys: [svlvm, frames]
00090 Exit: get_branch
00091 Enter: Operand::clone_val()
00091 Exit: clone_val
00092 Enter: AstMap::get_branch(const vector<string> &keys)
00092 keys: [svlvm, module, Main, mvar]
00092 Exit: get_branch
00088 Exit: evaluate
00093 Enter: AstMvar::AstMvar(const string &v)
00093 var_name: a
00094 Enter: Operand::clone_val()
00094 Exit: clone_val
00093 Exit: AstMvar
00095 Enter: AstMap::get_branch(const vector<string> &keys)
00095 keys: [svlvm, module, Prompt]
00095 Exit: get_branch
00096 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00096 last: {"code": [nil.a]}
00096 Exit: add
00097 Enter: AstMap::get_branch(const vector<string> &keys)
00097 keys: [svlvm, module, Prompt]
00097 Exit: get_branch
00098 Enter: AstMap::get_branch(const vector<string> &keys)
00098 keys: [svlvm, module, Prompt, last, code]
00098 Exit: get_branch
00099 Enter: AstMap::get_branch(const vector<string> &keys)
00099 keys: [svlvm]
00099 Exit: get_branch
00100 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00100 var_name: a
00101 Enter: AstMap::get_branch(const vector<string> &keys)
00101 keys: [svlm_lang]
00101 Exit: get_branch
00102 Enter: AstMap::get_branch(const vector<string> &keys)
00102 keys: [svlvm, frames]
00102 Exit: get_branch
00103 Enter: Operand::clone_val()
00103 Exit: clone_val
00104 Enter: AstMap::get_branch(const vector<string> &keys)
00104 keys: [svlvm, module, Main, mvar]
00104 Exit: get_branch
00100 Exit: evaluate
00105 Enter: AstMvar::AstMvar(const string &v)
00105 var_name: l
00106 Enter: Operand::clone_val()
00106 Exit: clone_val
00105 Exit: AstMvar
00107 Enter: AstMap::get_branch(const vector<string> &keys)
00107 keys: [svlvm, module, Prompt]
00107 Exit: get_branch
00108 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00108 last: {"code": [nil.l]}
00108 Exit: add
00109 Enter: AstMap::get_branch(const vector<string> &keys)
00109 keys: [svlvm, module, Prompt]
00109 Exit: get_branch
00110 Enter: AstMap::get_branch(const vector<string> &keys)
00110 keys: [svlvm, module, Prompt, last, code]
00110 Exit: get_branch
00111 Enter: AstMap::get_branch(const vector<string> &keys)
00111 keys: [svlvm]
00111 Exit: get_branch
00112 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00112 var_name: l
00113 Enter: AstMap::get_branch(const vector<string> &keys)
00113 keys: [svlm_lang]
00113 Exit: get_branch
00114 Enter: AstMap::get_branch(const vector<string> &keys)
00114 keys: [svlvm, frames]
00114 Exit: get_branch
00115 Enter: Operand::clone_val()
00115 Exit: clone_val
00116 Enter: AstMap::get_branch(const vector<string> &keys)
00116 keys: [svlvm, module, Main, mvar]
00116 Exit: get_branch
00112 Exit: evaluate
00117 Enter: Operand::clone_val()
00117 Exit: clone_val
00118 Enter: Operand::clone_val()
00118 Exit: clone_val
00119 Enter: AstMap::get_branch(const vector<string> &keys)
00119 keys: [svlvm, module, Prompt]
00119 Exit: get_branch
00120 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00120 last: {"code": [nil.d=5]}
00120 Exit: add
00121 Enter: AstMap::get_branch(const vector<string> &keys)
00121 keys: [svlvm, module, Prompt]
00121 Exit: get_branch
00122 Enter: AstMap::get_branch(const vector<string> &keys)
00122 keys: [svlvm, module, Prompt, last, code]
00122 Exit: get_branch
00123 Enter: AstMap::get_branch(const vector<string> &keys)
00123 keys: [svlvm]
00123 Exit: get_branch
00124 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00125 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00125 d = 5
00126 Enter: AstMap::get_branch(const vector<string> &keys)
00126 keys: [svlm_lang]
00126 Exit: get_branch
00127 Enter: AstMap::get_branch(const vector<string> &keys)
00127 keys: [svlvm, frames]
00127 Exit: get_branch
00128 Enter: Operand::clone_val()
00128 Exit: clone_val
00129 Enter: AstMap::get_branch(const vector<string> &keys)
00129 keys: [svlvm, module, Main, mvar]
00129 Exit: get_branch
00125 Exit: assign
00124 Exit: evaluate
00130 Enter: AstMvar::AstMvar(const string &v)
00130 var_name: l
00131 Enter: Operand::clone_val()
00131 Exit: clone_val
00130 Exit: AstMvar
00132 Enter: AstMap::get_branch(const vector<string> &keys)
00132 keys: [svlvm, module, Prompt]
00132 Exit: get_branch
00133 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00133 last: {"code": [nil.l]}
00133 Exit: add
00134 Enter: AstMap::get_branch(const vector<string> &keys)
00134 keys: [svlvm, module, Prompt]
00134 Exit: get_branch
00135 Enter: AstMap::get_branch(const vector<string> &keys)
00135 keys: [svlvm, module, Prompt, last, code]
00135 Exit: get_branch
00136 Enter: AstMap::get_branch(const vector<string> &keys)
00136 keys: [svlvm]
00136 Exit: get_branch
00137 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00137 var_name: l
00138 Enter: AstMap::get_branch(const vector<string> &keys)
00138 keys: [svlm_lang]
00138 Exit: get_branch
00139 Enter: AstMap::get_branch(const vector<string> &keys)
00139 keys: [svlvm, frames]
00139 Exit: get_branch
00140 Enter: Operand::clone_val()
00140 Exit: clone_val
00141 Enter: AstMap::get_branch(const vector<string> &keys)
00141 keys: [svlvm, module, Main, mvar]
00141 Exit: get_branch
00137 Exit: evaluate
00142 Enter: AstMvar::AstMvar(const string &v)
00142 var_name: d
00143 Enter: Operand::clone_val()
00143 Exit: clone_val
00142 Exit: AstMvar
00144 Enter: AstMap::get_branch(const vector<string> &keys)
00144 keys: [svlvm, module, Prompt]
00144 Exit: get_branch
00145 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00145 last: {"code": [nil.d]}
00145 Exit: add
00146 Enter: AstMap::get_branch(const vector<string> &keys)
00146 keys: [svlvm, module, Prompt]
00146 Exit: get_branch
00147 Enter: AstMap::get_branch(const vector<string> &keys)
00147 keys: [svlvm, module, Prompt, last, code]
00147 Exit: get_branch
00148 Enter: AstMap::get_branch(const vector<string> &keys)
00148 keys: [svlvm]
00148 Exit: get_branch
00149 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00149 var_name: d
00150 Enter: AstMap::get_branch(const vector<string> &keys)
00150 keys: [svlm_lang]
00150 Exit: get_branch
00151 Enter: AstMap::get_branch(const vector<string> &keys)
00151 keys: [svlvm, frames]
00151 Exit: get_branch
00152 Enter: Operand::clone_val()
00152 Exit: clone_val
00153 Enter: AstMap::get_branch(const vector<string> &keys)
00153 keys: [svlvm, module, Main, mvar]
00153 Exit: get_branch
00149 Exit: evaluate
00000 Exit: main
