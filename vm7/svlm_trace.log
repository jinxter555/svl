00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: AstMvar::AstMvar(const string &v)
00006 var_name: n
00007 Enter: Operand::clone_val()
00007 Exit: clone_val
00006 Exit: AstMvar
00008 Enter: Operand::clone_val()
00008 Exit: clone_val
00009 Enter: Operand::clone_val()
00009 Exit: clone_val
00010 Enter: Operand::clone_val()
00010 Exit: clone_val
00011 Enter: AstMvar::AstMvar(const string &v)
00011 var_name: n
00012 Enter: Operand::clone_val()
00012 Exit: clone_val
00011 Exit: AstMvar
00013 Enter: AstMvar::AstMvar(const string &v)
00013 var_name: a
00014 Enter: Operand::clone_val()
00014 Exit: clone_val
00013 Exit: AstMvar
00015 Enter: Operand::clone_val()
00015 Exit: clone_val
00016 Enter: Operand::clone_val()
00016 Exit: clone_val
00017 Enter: Operand::clone_val()
00017 Exit: clone_val
00018 Enter: Operand::clone_val()
00018 Exit: clone_val
00019 Enter: AstMap::get_branch(const vector<string> &keys)
00019 keys: [svlvm, module, Main]
00019 Exit: get_branch
00020 Enter: AstMap::get_branch(const vector<string> &keys)
00020 keys: [svlvm, module, Main]
00020 Exit: get_branch
00021 Enter: AstMap::get_branch(const vector<string> &keys)
00021 keys: [svlvm, module, Main, function]
00021 Exit: get_branch
00022 Enter: AstMap::get_branch(const vector<string> &keys)
00022 keys: [svlvm, module, Main, function]
00022 Exit: get_branch
00023 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00023 main: func: main
00023 Exit: add
00024 Enter: AstMap::get_branch(const vector<string> &keys)
00024 keys: [svlvm, module, Main, function]
00024 Exit: get_branch
00025 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00025 func2: func: func2
00025 Exit: add
00026 Enter: AstMap::get_branch(const vector<string> &keys)
00026 keys: [svlvm, module, Main, function]
00026 Exit: get_branch
00027 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00027 func3: func: func3
00027 Exit: add
00028 Enter: Operand::clone_val()
00028 Exit: clone_val
00029 Enter: AstMap::get_branch(const vector<string> &keys)
00029 keys: [svlvm, module, Helper]
00029 Exit: get_branch
00030 Enter: AstMap::get_branch(const vector<string> &keys)
00030 keys: [svlvm, module, Helper]
00030 Exit: get_branch
00031 Enter: AstMap::get_branch(const vector<string> &keys)
00031 keys: [svlvm, module, Helper, function]
00031 Exit: get_branch
00032 Enter: AstMap::get_branch(const vector<string> &keys)
00032 keys: [svlvm, module, Helper, function]
00032 Exit: get_branch
00033 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00033 me: func: me
00033 Exit: add
00034 Enter: AstMap::get_branch(const vector<string> &keys)
00034 keys: [svlvm, module, Prompt]
00034 Exit: get_branch
00035 Enter: AstMap::get_branch(const vector<string> &keys)
00035 keys: [svlvm, module, Prompt]
00035 Exit: get_branch
00036 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00036 last: {"code": []}
00036 Exit: add
00037 Enter: AstMap::get_branch(const vector<string> &keys)
00037 keys: [svlvm, module, Prompt]
00037 Exit: get_branch
00038 Enter: Operand::clone_val()
00038 Exit: clone_val
00039 Enter: Operand::clone_val()
00039 Exit: clone_val
00040 Enter: AstMap::get_branch(const vector<string> &keys)
00040 keys: [svlvm, module, Prompt]
00040 Exit: get_branch
00041 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00041 last: {"code": [[3,[1,1-2]]==[3,[1,3]]]}
00041 Exit: add
00042 Enter: AstMap::get_branch(const vector<string> &keys)
00042 keys: [svlvm, module, Prompt]
00042 Exit: get_branch
00043 Enter: AstMap::get_branch(const vector<string> &keys)
00043 keys: [svlvm, module, Prompt, last, code]
00043 Exit: get_branch
00044 Enter: AstMap::get_branch(const vector<string> &keys)
00044 keys: [svlvm]
00044 Exit: get_branch
00045 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00046 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00047 Enter: Operand::opfunc()
00047 1-2
00047 Exit: opfunc
00046 Exit: evaluate
00045 Exit: evaluate
00048 Enter: Operand::clone_val()
00048 Exit: clone_val
00049 Enter: Operand::clone_val()
00049 Exit: clone_val
00050 Enter: AstMap::get_branch(const vector<string> &keys)
00050 keys: [svlvm, module, Prompt]
00050 Exit: get_branch
00051 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00051 last: {"code": [[3,[1,1+2]]==[3,[1,3]]]}
00051 Exit: add
00052 Enter: AstMap::get_branch(const vector<string> &keys)
00052 keys: [svlvm, module, Prompt]
00052 Exit: get_branch
00053 Enter: AstMap::get_branch(const vector<string> &keys)
00053 keys: [svlvm, module, Prompt, last, code]
00053 Exit: get_branch
00054 Enter: AstMap::get_branch(const vector<string> &keys)
00054 keys: [svlvm]
00054 Exit: get_branch
00055 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00056 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00057 Enter: Operand::opfunc()
00057 1+2
00057 Exit: opfunc
00056 Exit: evaluate
00055 Exit: evaluate
00058 Enter: Operand::clone_val()
00058 Exit: clone_val
00059 Enter: Operand::clone_val()
00059 Exit: clone_val
00060 Enter: AstMap::get_branch(const vector<string> &keys)
00060 keys: [svlvm, module, Prompt]
00060 Exit: get_branch
00061 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00061 last: {"code": [[1,[1,1+2]]==[3,[1,3]]]}
00061 Exit: add
00062 Enter: AstMap::get_branch(const vector<string> &keys)
00062 keys: [svlvm, module, Prompt]
00062 Exit: get_branch
00063 Enter: AstMap::get_branch(const vector<string> &keys)
00063 keys: [svlvm, module, Prompt, last, code]
00063 Exit: get_branch
00064 Enter: AstMap::get_branch(const vector<string> &keys)
00064 keys: [svlvm]
00064 Exit: get_branch
00065 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00066 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00067 Enter: Operand::opfunc()
00067 1+2
00067 Exit: opfunc
00066 Exit: evaluate
00065 Exit: evaluate
00068 Enter: Operand::clone_val()
00068 Exit: clone_val
00069 Enter: Operand::clone_val()
00069 Exit: clone_val
00070 Enter: AstMap::get_branch(const vector<string> &keys)
00070 keys: [svlvm, module, Prompt]
00070 Exit: get_branch
00071 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00071 last: {"code": [[2,[1,1+2]]==[3,[1,3]]]}
00071 Exit: add
00072 Enter: AstMap::get_branch(const vector<string> &keys)
00072 keys: [svlvm, module, Prompt]
00072 Exit: get_branch
00073 Enter: AstMap::get_branch(const vector<string> &keys)
00073 keys: [svlvm, module, Prompt, last, code]
00073 Exit: get_branch
00074 Enter: AstMap::get_branch(const vector<string> &keys)
00074 keys: [svlvm]
00074 Exit: get_branch
00075 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00076 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00077 Enter: Operand::opfunc()
00077 1+2
00077 Exit: opfunc
00076 Exit: evaluate
00075 Exit: evaluate
00078 Enter: Operand::clone_val()
00078 Exit: clone_val
00079 Enter: AstMap::get_branch(const vector<string> &keys)
00079 keys: [svlvm, module, Prompt]
00079 Exit: get_branch
00080 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00080 last: {"code": [[2,[1,3],5]==[3,[1,3]]]}
00080 Exit: add
00081 Enter: AstMap::get_branch(const vector<string> &keys)
00081 keys: [svlvm, module, Prompt]
00081 Exit: get_branch
00082 Enter: AstMap::get_branch(const vector<string> &keys)
00082 keys: [svlvm, module, Prompt, last, code]
00082 Exit: get_branch
00083 Enter: AstMap::get_branch(const vector<string> &keys)
00083 keys: [svlvm]
00083 Exit: get_branch
00084 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00084 Exit: evaluate
00085 Enter: Operand::clone_val()
00085 Exit: clone_val
00086 Enter: AstMap::get_branch(const vector<string> &keys)
00086 keys: [svlvm, module, Prompt]
00086 Exit: get_branch
00087 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00087 last: {"code": [[2,[1,3],5]==[3,[1,3],5]]}
00087 Exit: add
00088 Enter: AstMap::get_branch(const vector<string> &keys)
00088 keys: [svlvm, module, Prompt]
00088 Exit: get_branch
00089 Enter: AstMap::get_branch(const vector<string> &keys)
00089 keys: [svlvm, module, Prompt, last, code]
00089 Exit: get_branch
00090 Enter: AstMap::get_branch(const vector<string> &keys)
00090 keys: [svlvm]
00090 Exit: get_branch
00091 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00091 Exit: evaluate
00092 Enter: Operand::clone_val()
00092 Exit: clone_val
00093 Enter: AstMap::get_branch(const vector<string> &keys)
00093 keys: [svlvm, module, Prompt]
00093 Exit: get_branch
00094 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00094 last: {"code": [[3,[1,3],5]==[3,[1,3],5]]}
00094 Exit: add
00095 Enter: AstMap::get_branch(const vector<string> &keys)
00095 keys: [svlvm, module, Prompt]
00095 Exit: get_branch
00096 Enter: AstMap::get_branch(const vector<string> &keys)
00096 keys: [svlvm, module, Prompt, last, code]
00096 Exit: get_branch
00097 Enter: AstMap::get_branch(const vector<string> &keys)
00097 keys: [svlvm]
00097 Exit: get_branch
00098 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00098 Exit: evaluate
00099 Enter: Operand::clone_val()
00099 Exit: clone_val
00100 Enter: AstMap::get_branch(const vector<string> &keys)
00100 keys: [svlvm, module, Prompt]
00100 Exit: get_branch
00101 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00101 last: {"code": [[3,[1,3],5]==[3,[1,3],5]]}
00101 Exit: add
00102 Enter: AstMap::get_branch(const vector<string> &keys)
00102 keys: [svlvm, module, Prompt]
00102 Exit: get_branch
00103 Enter: AstMap::get_branch(const vector<string> &keys)
00103 keys: [svlvm, module, Prompt, last, code]
00103 Exit: get_branch
00104 Enter: AstMap::get_branch(const vector<string> &keys)
00104 keys: [svlvm]
00104 Exit: get_branch
00105 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00105 Exit: evaluate
00000 Exit: main
