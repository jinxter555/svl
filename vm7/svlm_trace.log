00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: AstMvar::AstMvar(const string &v)
00006 var_name: a
00007 Enter: Operand::clone_val()
00007 Exit: clone_val
00006 Exit: AstMvar
00008 Enter: Operand::clone_val()
00008 Exit: clone_val
00009 Enter: AstMvar::AstMvar(const string &v)
00009 var_name: x
00010 Enter: Operand::clone_val()
00010 Exit: clone_val
00009 Exit: AstMvar
00011 Enter: Operand::clone_val()
00011 Exit: clone_val
00012 Enter: AstMvar::AstMvar(const string &v)
00012 var_name: y
00013 Enter: Operand::clone_val()
00013 Exit: clone_val
00012 Exit: AstMvar
00014 Enter: Operand::clone_val()
00014 Exit: clone_val
00015 Enter: Operand::clone_val()
00015 Exit: clone_val
00016 Enter: Operand::clone_val()
00016 Exit: clone_val
00017 Enter: Operand::clone_val()
00017 Exit: clone_val
00018 Enter: AstMap::get_branch(const vector<string> &keys)
00018 keys: [svlvm, module, Main]
00018 Exit: get_branch
00019 Enter: Operand::==(operand&)
00019 Exit: operator==
00020 Enter: AstMap::get_branch(const vector<string> &keys)
00020 keys: [svlvm, module, Main]
00020 Exit: get_branch
00021 Enter: AstMap::get_branch(const vector<string> &keys)
00021 keys: [svlvm, module, Main, function]
00021 Exit: get_branch
00022 Enter: Operand::==(operand&)
00022 Exit: operator==
00023 Enter: AstMap::get_branch(const vector<string> &keys)
00023 keys: [svlvm, module, Main, function]
00023 Exit: get_branch
00024 Enter: Operand::==(operand&)
00024 Exit: operator==
00025 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00025 main: func: main
00025 Exit: add
00026 Enter: AstMap::get_branch(const vector<string> &keys)
00026 keys: [svlvm, module, Main, function]
00026 Exit: get_branch
00027 Enter: Operand::==(operand&)
00027 Exit: operator==
00028 Enter: Operand::==(operand&)
00028 Exit: operator==
00029 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00029 func2: func: func2
00029 Exit: add
00030 Enter: AstMap::get_branch(const vector<string> &keys)
00030 keys: [svlvm, module, Main, function]
00030 Exit: get_branch
00031 Enter: Operand::==(operand&)
00031 Exit: operator==
00032 Enter: Operand::==(operand&)
00032 Exit: operator==
00033 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00033 func3: func: func3
00033 Exit: add
00034 Enter: Operand::clone_val()
00034 Exit: clone_val
00035 Enter: AstMap::get_branch(const vector<string> &keys)
00035 keys: [svlvm, module, Helper]
00035 Exit: get_branch
00036 Enter: Operand::==(operand&)
00036 Exit: operator==
00037 Enter: AstMap::get_branch(const vector<string> &keys)
00037 keys: [svlvm, module, Helper]
00037 Exit: get_branch
00038 Enter: AstMap::get_branch(const vector<string> &keys)
00038 keys: [svlvm, module, Helper, function]
00038 Exit: get_branch
00039 Enter: Operand::==(operand&)
00039 Exit: operator==
00040 Enter: AstMap::get_branch(const vector<string> &keys)
00040 keys: [svlvm, module, Helper, function]
00040 Exit: get_branch
00041 Enter: Operand::==(operand&)
00041 Exit: operator==
00042 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00042 me: func: me
00042 Exit: add
00043 Enter: AstMap::get_branch(const vector<string> &keys)
00043 keys: [svlvm, module, Prompt]
00043 Exit: get_branch
00044 Enter: Operand::==(operand&)
00044 Exit: operator==
00045 Enter: AstMap::get_branch(const vector<string> &keys)
00045 keys: [svlvm, module, Prompt]
00045 Exit: get_branch
00046 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00046 last: {"code": []}
00046 Exit: add
00047 Enter: AstMap::get_branch(const vector<string> &keys)
00047 keys: [svlvm, module, Prompt]
00047 Exit: get_branch
00048 Enter: AstMap::get_branch(const vector<string> &keys)
00048 keys: [svlvm, module, Main, function, main, code]
00048 Exit: get_branch
00049 Enter: Operand::clone_val()
00049 Exit: clone_val
00050 Enter: AstMap::get_branch(const vector<string> &keys)
00050 keys: [svlvm]
00050 Exit: get_branch
00051 Enter: AstMap::get_branch(const vector<string> &keys)
00051 keys: [svlvm, frames]
00051 Exit: get_branch
00052 Enter: Operand::clone_val()
00052 Exit: clone_val
00053 Enter: AstList::evaluate()
00054 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00055 Enter: AstList::evaluate()
00055 Exit: evaluate
00056 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00056 a = [1,2,3]
00057 Enter: AstMap::get_branch(const vector<string> &keys)
00057 keys: [svlm_lang]
00057 Exit: get_branch
00058 Enter: Operand::==(operand&)
00058 Exit: operator==
00059 Enter: AstMap::get_branch(const vector<string> &keys)
00059 keys: [svlvm, frames]
00059 Exit: get_branch
00060 Enter: Operand::clone_val()
00060 Exit: clone_val
00061 Enter: AstMap::get_branch(const vector<string> &keys)
00061 keys: [svlvm, module, Main, mvar]
00061 Exit: get_branch
00062 Enter: Operand::==(operand&)
00062 Exit: operator==
00063 Enter: AstMap::get_branch(const vector<string> &keys)
00063 keys: [svlvm, module, Main, mvar]
00063 Exit: get_branch
00056 sub_node.add() before
00064 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00064 a: [1,2,3]
00065 Enter: Operand::clone_val()
00066 Enter: AstList::clone()
00066 Exit: clone
00067 Enter: AstList::clone()
00067 Exit: clone
00065 Exit: clone_val
00064 Exit: add
00056 sub_node.add() after
00056 Exit: assign
00054 Exit: evaluate
00068 Enter: AstList::clone()
00068 Exit: clone
00069 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00070 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00070 x = 1
00071 Enter: AstMap::get_branch(const vector<string> &keys)
00071 keys: [svlm_lang]
00071 Exit: get_branch
00072 Enter: Operand::==(operand&)
00072 Exit: operator==
00073 Enter: AstMap::get_branch(const vector<string> &keys)
00073 keys: [svlvm, frames]
00073 Exit: get_branch
00074 Enter: Operand::clone_val()
00074 Exit: clone_val
00075 Enter: AstMap::get_branch(const vector<string> &keys)
00075 keys: [svlvm, module, Main, mvar]
00075 Exit: get_branch
00076 Enter: Operand::==(operand&)
00076 Exit: operator==
00070 sub_node.add() before
00077 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00077 x: 1
00078 Enter: Operand::clone_val()
00078 Exit: clone_val
00077 Exit: add
00070 sub_node.add() after
00070 Exit: assign
00069 Exit: evaluate
00079 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00080 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00080 y = 1
00081 Enter: AstMap::get_branch(const vector<string> &keys)
00081 keys: [svlm_lang]
00081 Exit: get_branch
00082 Enter: Operand::==(operand&)
00082 Exit: operator==
00083 Enter: AstMap::get_branch(const vector<string> &keys)
00083 keys: [svlvm, frames]
00083 Exit: get_branch
00084 Enter: Operand::clone_val()
00084 Exit: clone_val
00085 Enter: AstMap::get_branch(const vector<string> &keys)
00085 keys: [svlvm, module, Main, mvar]
00085 Exit: get_branch
00086 Enter: Operand::==(operand&)
00086 Exit: operator==
00080 sub_node.add() before
00087 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00087 y: 1
00088 Enter: Operand::clone_val()
00088 Exit: clone_val
00087 Exit: add
00080 sub_node.add() after
00080 Exit: assign
00079 Exit: evaluate
00053 Exit: evaluate
00089 Enter: AstMvar::AstMvar(const string &v)
00089 var_name: x
00090 Enter: Operand::clone_val()
00090 Exit: clone_val
00089 Exit: AstMvar
00091 Enter: Operand::clone_val()
00091 Exit: clone_val
00092 Enter: AstMap::get_branch(const vector<string> &keys)
00092 keys: [svlvm, module, Prompt]
00092 Exit: get_branch
00093 Enter: Operand::==(operand&)
00093 Exit: operator==
00094 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00095 Enter: Operand::==(operand&)
00095 Exit: operator==
00094 last: {"code": [$x==1]}
00094 Exit: add
00096 Enter: AstMap::get_branch(const vector<string> &keys)
00096 keys: [svlvm, module, Prompt]
00096 Exit: get_branch
00097 Enter: AstMap::get_branch(const vector<string> &keys)
00097 keys: [svlvm, module, Prompt, last, code]
00097 Exit: get_branch
00098 Enter: AstMap::get_branch(const vector<string> &keys)
00098 keys: [svlvm]
00098 Exit: get_branch
00099 Enter: AstList::evaluate()
00100 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00101 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00101 var_name: x
00102 Enter: AstMap::get_branch(const vector<string> &keys)
00102 keys: [svlm_lang]
00102 Exit: get_branch
00103 Enter: Operand::==(operand&)
00103 Exit: operator==
00104 Enter: AstMap::get_branch(const vector<string> &keys)
00104 keys: [svlvm, frames]
00104 Exit: get_branch
00105 Enter: Operand::clone_val()
00105 Exit: clone_val
00106 Enter: AstMap::get_branch(const vector<string> &keys)
00106 keys: [svlvm, module, Main, mvar]
00106 Exit: get_branch
00107 Enter: Operand::==(operand&)
00107 Exit: operator==
00101 Exit: evaluate
00108 Enter: Operand::clone_val()
00108 Exit: clone_val
00109 Enter: Operand::==(operand&)
00109 Exit: operator==
00100 Exit: evaluate
00099 Exit: evaluate
00110 Enter: Operand::==(operand&)
00110 Exit: operator==
00111 Enter: AstMvar::AstMvar(const string &v)
00111 var_name: x
00112 Enter: Operand::clone_val()
00112 Exit: clone_val
00111 Exit: AstMvar
00113 Enter: AstMvar::AstMvar(const string &v)
00113 var_name: y
00114 Enter: Operand::clone_val()
00114 Exit: clone_val
00113 Exit: AstMvar
00115 Enter: Operand::clone_val()
00115 Exit: clone_val
00116 Enter: AstMap::get_branch(const vector<string> &keys)
00116 keys: [svlvm, module, Prompt]
00116 Exit: get_branch
00117 Enter: Operand::==(operand&)
00118 Enter: Operand::==(operand&)
00118 Exit: operator==
00117 Exit: operator==
00119 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00120 Enter: Operand::==(operand&)
00120 Exit: operator==
00121 Enter: Operand::==(operand&)
00121 Exit: operator==
00119 last: {"code": [$x==$y]}
00119 Exit: add
00122 Enter: AstMap::get_branch(const vector<string> &keys)
00122 keys: [svlvm, module, Prompt]
00122 Exit: get_branch
00123 Enter: AstMap::get_branch(const vector<string> &keys)
00123 keys: [svlvm, module, Prompt, last, code]
00123 Exit: get_branch
00124 Enter: AstMap::get_branch(const vector<string> &keys)
00124 keys: [svlvm]
00124 Exit: get_branch
00125 Enter: AstList::evaluate()
00126 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00127 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00127 var_name: y
00128 Enter: AstMap::get_branch(const vector<string> &keys)
00128 keys: [svlm_lang]
00128 Exit: get_branch
00129 Enter: Operand::==(operand&)
00129 Exit: operator==
00130 Enter: AstMap::get_branch(const vector<string> &keys)
00130 keys: [svlvm, frames]
00130 Exit: get_branch
00131 Enter: Operand::clone_val()
00131 Exit: clone_val
00132 Enter: AstMap::get_branch(const vector<string> &keys)
00132 keys: [svlvm, module, Main, mvar]
00132 Exit: get_branch
00133 Enter: Operand::==(operand&)
00133 Exit: operator==
00127 Exit: evaluate
00134 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00134 var_name: x
00135 Enter: AstMap::get_branch(const vector<string> &keys)
00135 keys: [svlm_lang]
00135 Exit: get_branch
00136 Enter: Operand::==(operand&)
00136 Exit: operator==
00137 Enter: AstMap::get_branch(const vector<string> &keys)
00137 keys: [svlvm, frames]
00137 Exit: get_branch
00138 Enter: Operand::clone_val()
00138 Exit: clone_val
00139 Enter: AstMap::get_branch(const vector<string> &keys)
00139 keys: [svlvm, module, Main, mvar]
00139 Exit: get_branch
00140 Enter: Operand::==(operand&)
00140 Exit: operator==
00134 Exit: evaluate
00141 Enter: Operand::clone_val()
00141 Exit: clone_val
00142 Enter: Operand::==(operand&)
00143 Enter: Operand::==(operand&)
00143 Exit: operator==
00142 Exit: operator==
00126 Exit: evaluate
00125 Exit: evaluate
00144 Enter: Operand::==(operand&)
00144 Exit: operator==
00145 Enter: Operand::clone_val()
00145 Exit: clone_val
00146 Enter: AstMap::get_branch(const vector<string> &keys)
00146 keys: [svlvm, module, Prompt]
00146 Exit: get_branch
00147 Enter: Operand::==(operand&)
00148 Enter: Operand::==(operand&)
00148 Exit: operator==
00149 Enter: Operand::==(operand&)
00149 Exit: operator==
00147 Exit: operator==
00150 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00150 last: {"code": [1==1]}
00150 Exit: add
00151 Enter: AstMap::get_branch(const vector<string> &keys)
00151 keys: [svlvm, module, Prompt]
00151 Exit: get_branch
00152 Enter: AstMap::get_branch(const vector<string> &keys)
00152 keys: [svlvm, module, Prompt, last, code]
00152 Exit: get_branch
00153 Enter: AstMap::get_branch(const vector<string> &keys)
00153 keys: [svlvm]
00153 Exit: get_branch
00154 Enter: AstList::evaluate()
00155 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00156 Enter: Operand::clone_val()
00156 Exit: clone_val
00157 Enter: Operand::==(operand&)
00157 Exit: operator==
00155 Exit: evaluate
00154 Exit: evaluate
00158 Enter: Operand::==(operand&)
00158 Exit: operator==
00000 Exit: main
