00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: Operand::clone_val()
00006 Exit: clone_val
00007 Enter: Operand::clone_val()
00007 Exit: clone_val
00008 Enter: Operand::clone_val()
00008 Exit: clone_val
00009 Enter: AstMvar::AstMvar(const string &v)
00009 var_name: a
00010 Enter: Operand::clone_val()
00010 Exit: clone_val
00009 Exit: AstMvar
00011 Enter: Operand::clone_val()
00011 Exit: clone_val
00012 Enter: Operand::clone_val()
00012 Exit: clone_val
00013 Enter: Operand::clone_val()
00013 Exit: clone_val
00014 Enter: Operand::clone_val()
00014 Exit: clone_val
00015 Enter: AstMap::get_branch(const vector<string> &keys)
00015 keys: [svlvm, module, Main]
00015 Exit: get_branch
00016 Enter: AstMap::get_branch(const vector<string> &keys)
00016 keys: [svlvm, module, Main]
00016 Exit: get_branch
00017 Enter: AstMap::get_branch(const vector<string> &keys)
00017 keys: [svlvm, module, Main, function]
00017 Exit: get_branch
00018 Enter: AstMap::get_branch(const vector<string> &keys)
00018 keys: [svlvm, module, Main, function]
00018 Exit: get_branch
00019 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00019 main: func: main
00019 Exit: add
00020 Enter: AstMap::get_branch(const vector<string> &keys)
00020 keys: [svlvm, module, Main, function]
00020 Exit: get_branch
00021 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00021 func2: func: func2
00021 Exit: add
00022 Enter: AstMap::get_branch(const vector<string> &keys)
00022 keys: [svlvm, module, Main, function]
00022 Exit: get_branch
00023 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00023 func3: func: func3
00023 Exit: add
00024 Enter: Operand::clone_val()
00024 Exit: clone_val
00025 Enter: AstMap::get_branch(const vector<string> &keys)
00025 keys: [svlvm, module, Helper]
00025 Exit: get_branch
00026 Enter: AstMap::get_branch(const vector<string> &keys)
00026 keys: [svlvm, module, Helper]
00026 Exit: get_branch
00027 Enter: AstMap::get_branch(const vector<string> &keys)
00027 keys: [svlvm, module, Helper, function]
00027 Exit: get_branch
00028 Enter: AstMap::get_branch(const vector<string> &keys)
00028 keys: [svlvm, module, Helper, function]
00028 Exit: get_branch
00029 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00029 me: func: me
00029 Exit: add
00030 Enter: AstMap::get_branch(const vector<string> &keys)
00030 keys: [svlvm, module, Prompt]
00030 Exit: get_branch
00031 Enter: AstMap::get_branch(const vector<string> &keys)
00031 keys: [svlvm, module, Prompt]
00031 Exit: get_branch
00032 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00032 last: {"code": []}
00032 Exit: add
00033 Enter: AstMap::get_branch(const vector<string> &keys)
00033 keys: [svlvm, module, Prompt]
00033 Exit: get_branch
00034 Enter: AstMap::get_branch(const vector<string> &keys)
00034 keys: [svlvm, module, Main, function, main, code]
00034 Exit: get_branch
00035 Enter: Operand::clone_val()
00035 Exit: clone_val
00036 Enter: AstMap::get_branch(const vector<string> &keys)
00036 keys: [svlvm]
00036 Exit: get_branch
00037 Enter: AstMap::get_branch(const vector<string> &keys)
00037 keys: [svlvm, frames]
00037 Exit: get_branch
00038 Enter: Operand::clone_val()
00038 Exit: clone_val
00039 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00040 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00041 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00041 Exit: evaluate
00040 Exit: evaluate
00042 Enter: AstList::clone()
00042 Exit: clone
00043 Enter: Operand::clone_val()
00043 Exit: clone_val
00044 Enter: Operand::clone_val()
00044 Exit: clone_val
00045 Enter: AstList::clone()
00045 Exit: clone
00046 Enter: Operand::clone_val()
00046 Exit: clone_val
00047 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00047 a = {1,2,24,hello}
00048 Enter: AstMap::get_branch(const vector<string> &keys)
00048 keys: [svlm_lang]
00048 Exit: get_branch
00049 Enter: AstMap::get_branch(const vector<string> &keys)
00049 keys: [svlvm, frames]
00049 Exit: get_branch
00050 Enter: Operand::clone_val()
00050 Exit: clone_val
00051 Enter: AstMap::get_branch(const vector<string> &keys)
00051 keys: [svlvm, module, Main, mvar]
00051 Exit: get_branch
00052 Enter: AstMap::get_branch(const vector<string> &keys)
00052 keys: [svlvm, module, Main, mvar]
00052 Exit: get_branch
00047 sub_node.add() before
00053 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00053 a: {1,2,24,hello}
00053 Exit: add
00047 sub_node.add() after
00047 Exit: assign
00039 Exit: evaluate
00054 Enter: AstMap::get_branch(const vector<string> &keys)
00054 keys: [svlvm, module, Main, mvar, a]
00054 Exit: get_branch
00055 Enter: AstMap::get_branch(const vector<string> &keys)
00055 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00055 Exit: get_branch
00056 Enter: AstMap::get_branch(const vector<string> &keys)
00056 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00056 Exit: get_branch
00057 Enter: AstMap::get_branch(const vector<string> &keys)
00057 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00057 Exit: get_branch
00058 Enter: AstMap::get_branch(const vector<string> &keys)
00058 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00058 Exit: get_branch
00059 Enter: AstMap::get_branch(const vector<string> &keys)
00059 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00059 Exit: get_branch
00060 Enter: AstMap::get_branch(const vector<string> &keys)
00060 keys: [svlvm, module, Main, mvar, a, ulist]
00060 Exit: get_branch
00061 Enter: AstMap::get_branch(const vector<string> &keys)
00061 keys: [svlvm, module, Main, mvar, a, ulist]
00061 Exit: get_branch
00062 Enter: AstMap::get_branch(const vector<string> &keys)
00062 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00062 Exit: get_branch
00063 Enter: AstMap::get_branch(const vector<string> &keys)
00063 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00063 Exit: get_branch
00064 Enter: AstMap::get_branch(const vector<string> &keys)
00064 keys: [svlvm, module, Main, mvar, a, turbotuple]
00064 Exit: get_branch
00065 Enter: AstMap::get_branch(const vector<string> &keys)
00065 keys: [svlvm, module, Main, mvar, a, turbotuple]
00065 Exit: get_branch
00066 Enter: AstMvar::AstMvar(const string &v)
00066 var_name: a
00067 Enter: Operand::clone_val()
00067 Exit: clone_val
00066 Exit: AstMvar
00068 Enter: AstMap::get_branch(const vector<string> &keys)
00068 keys: [svlvm, module, Prompt]
00068 Exit: get_branch
00069 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00069 last: {"code": [print nil.a]}
00069 Exit: add
00070 Enter: AstMap::get_branch(const vector<string> &keys)
00070 keys: [svlvm, module, Prompt]
00070 Exit: get_branch
00071 Enter: AstMap::get_branch(const vector<string> &keys)
00071 keys: [svlvm, module, Prompt, last, code]
00071 Exit: get_branch
00072 Enter: AstMap::get_branch(const vector<string> &keys)
00072 keys: [svlvm]
00072 Exit: get_branch
00073 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00073 var_name: a
00074 Enter: AstMap::get_branch(const vector<string> &keys)
00074 keys: [svlm_lang]
00074 Exit: get_branch
00075 Enter: AstMap::get_branch(const vector<string> &keys)
00075 keys: [svlvm, frames]
00075 Exit: get_branch
00076 Enter: Operand::clone_val()
00076 Exit: clone_val
00077 Enter: AstMap::get_branch(const vector<string> &keys)
00077 keys: [svlvm, module, Main, mvar]
00077 Exit: get_branch
00078 Enter: AstList::clone()
00078 Exit: clone
00079 Enter: Operand::clone_val()
00079 Exit: clone_val
00073 Exit: evaluate
00080 Enter: AstMvar::AstMvar(const string &v)
00080 var_name: a
00081 Enter: Operand::clone_val()
00081 Exit: clone_val
00080 Exit: AstMvar
00082 Enter: AstMap::get_branch(const vector<string> &keys)
00082 keys: [svlvm, module, Prompt]
00082 Exit: get_branch
00083 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00083 last: {"code": [print nil.a]}
00083 Exit: add
00084 Enter: AstMap::get_branch(const vector<string> &keys)
00084 keys: [svlvm, module, Prompt]
00084 Exit: get_branch
00085 Enter: AstMap::get_branch(const vector<string> &keys)
00085 keys: [svlvm, module, Prompt, last, code]
00085 Exit: get_branch
00086 Enter: AstMap::get_branch(const vector<string> &keys)
00086 keys: [svlvm]
00086 Exit: get_branch
00087 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00087 var_name: a
00088 Enter: AstMap::get_branch(const vector<string> &keys)
00088 keys: [svlm_lang]
00088 Exit: get_branch
00089 Enter: AstMap::get_branch(const vector<string> &keys)
00089 keys: [svlvm, frames]
00089 Exit: get_branch
00090 Enter: Operand::clone_val()
00090 Exit: clone_val
00091 Enter: AstMap::get_branch(const vector<string> &keys)
00091 keys: [svlvm, module, Main, mvar]
00091 Exit: get_branch
00092 Enter: AstList::clone()
00092 Exit: clone
00093 Enter: Operand::clone_val()
00093 Exit: clone_val
00087 Exit: evaluate
00094 Enter: AstMap::get_branch(const vector<string> &keys)
00094 keys: [svlvm, module, Main, mvar, a]
00094 Exit: get_branch
00000 Exit: main
