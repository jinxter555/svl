00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: AstMvar::AstMvar(const string &v)
00006 var_name: a
00007 Enter: Operand::clone_val()
00007 Exit: clone_val
00006 Exit: AstMvar
00008 Enter: Operand::clone_val()
00008 Exit: clone_val
00009 Enter: Operand::clone_val()
00009 Exit: clone_val
00010 Enter: Operand::clone_val()
00010 Exit: clone_val
00011 Enter: Operand::clone_val()
00011 Exit: clone_val
00012 Enter: AstMap::get_branch(const vector<string> &keys)
00012 keys: [svlvm, module, Main]
00012 Exit: get_branch
00013 Enter: AstMap::get_branch(const vector<string> &keys)
00013 keys: [svlvm, module, Main]
00013 Exit: get_branch
00014 Enter: AstMap::get_branch(const vector<string> &keys)
00014 keys: [svlvm, module, Main, function]
00014 Exit: get_branch
00015 Enter: AstMap::get_branch(const vector<string> &keys)
00015 keys: [svlvm, module, Main, function]
00015 Exit: get_branch
00016 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00016 main: func: main
00016 Exit: add
00017 Enter: AstMap::get_branch(const vector<string> &keys)
00017 keys: [svlvm, module, Main, function]
00017 Exit: get_branch
00018 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00018 func2: func: func2
00018 Exit: add
00019 Enter: AstMap::get_branch(const vector<string> &keys)
00019 keys: [svlvm, module, Main, function]
00019 Exit: get_branch
00020 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00020 func3: func: func3
00020 Exit: add
00021 Enter: Operand::clone_val()
00021 Exit: clone_val
00022 Enter: AstMap::get_branch(const vector<string> &keys)
00022 keys: [svlvm, module, Helper]
00022 Exit: get_branch
00023 Enter: AstMap::get_branch(const vector<string> &keys)
00023 keys: [svlvm, module, Helper]
00023 Exit: get_branch
00024 Enter: AstMap::get_branch(const vector<string> &keys)
00024 keys: [svlvm, module, Helper, function]
00024 Exit: get_branch
00025 Enter: AstMap::get_branch(const vector<string> &keys)
00025 keys: [svlvm, module, Helper, function]
00025 Exit: get_branch
00026 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00026 me: func: me
00026 Exit: add
00027 Enter: AstMap::get_branch(const vector<string> &keys)
00027 keys: [svlvm, module, Prompt]
00027 Exit: get_branch
00028 Enter: AstMap::get_branch(const vector<string> &keys)
00028 keys: [svlvm, module, Prompt]
00028 Exit: get_branch
00029 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00029 last: {"code": []}
00029 Exit: add
00030 Enter: AstMap::get_branch(const vector<string> &keys)
00030 keys: [svlvm, module, Prompt]
00030 Exit: get_branch
00031 Enter: AstMap::get_branch(const vector<string> &keys)
00031 keys: [svlvm, module, Main, function, main, code]
00031 Exit: get_branch
00032 Enter: Operand::clone_val()
00032 Exit: clone_val
00033 Enter: AstMap::get_branch(const vector<string> &keys)
00033 keys: [svlvm]
00033 Exit: get_branch
00034 Enter: AstMap::get_branch(const vector<string> &keys)
00034 keys: [svlvm, frames]
00034 Exit: get_branch
00035 Enter: Operand::clone_val()
00035 Exit: clone_val
00036 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00037 Enter: AstList::clone()
00037 Exit: clone
00038 Enter: AstList::clone()
00038 Exit: clone
00039 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00040 Enter: AstList::clone()
00040 Exit: clone
00039 a = {1,2,3,hello}
00041 Enter: AstMap::get_branch(const vector<string> &keys)
00041 keys: [svlm_lang]
00041 Exit: get_branch
00042 Enter: AstMap::get_branch(const vector<string> &keys)
00042 keys: [svlvm, frames]
00042 Exit: get_branch
00043 Enter: Operand::clone_val()
00043 Exit: clone_val
00044 Enter: AstMap::get_branch(const vector<string> &keys)
00044 keys: [svlvm, module, Main, mvar]
00044 Exit: get_branch
00045 Enter: AstMap::get_branch(const vector<string> &keys)
00045 keys: [svlvm, module, Main, mvar]
00045 Exit: get_branch
00039 sub_node.add() before
00046 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00047 Enter: AstList::clone()
00047 Exit: clone
00046 a: {1,2,3,hello}
00046 Exit: add
00039 sub_node.add() after
00039 Exit: assign
00036 Exit: evaluate
00048 Enter: AstMvar::AstMvar(const string &v)
00048 var_name: a
00049 Enter: Operand::clone_val()
00049 Exit: clone_val
00048 Exit: AstMvar
00050 Enter: AstMap::get_branch(const vector<string> &keys)
00050 keys: [svlvm, module, Prompt]
00050 Exit: get_branch
00051 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00051 last: {"code": [print nil.a]}
00051 Exit: add
00052 Enter: AstMap::get_branch(const vector<string> &keys)
00052 keys: [svlvm, module, Prompt]
00052 Exit: get_branch
00053 Enter: AstMap::get_branch(const vector<string> &keys)
00053 keys: [svlvm, module, Prompt, last, code]
00053 Exit: get_branch
00054 Enter: AstMap::get_branch(const vector<string> &keys)
00054 keys: [svlvm]
00054 Exit: get_branch
00055 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00055 var_name: a
00056 Enter: AstMap::get_branch(const vector<string> &keys)
00056 keys: [svlm_lang]
00056 Exit: get_branch
00057 Enter: AstMap::get_branch(const vector<string> &keys)
00057 keys: [svlvm, frames]
00057 Exit: get_branch
00058 Enter: Operand::clone_val()
00058 Exit: clone_val
00059 Enter: AstMap::get_branch(const vector<string> &keys)
00059 keys: [svlvm, module, Main, mvar]
00059 Exit: get_branch
00060 Enter: AstList::clone()
00060 Exit: clone
00055 Exit: evaluate
00061 Enter: AstList::clone()
00061 Exit: clone
00000 Exit: main
