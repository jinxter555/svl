00000 Enter: int main
00001 Enter: Operand::clone_val()
00001 Exit: clone_val
00002 Enter: Operand::clone_val()
00002 Exit: clone_val
00003 Enter: Operand::clone_val()
00003 Exit: clone_val
00004 Enter: Operand::clone_val()
00004 Exit: clone_val
00005 Enter: Operand::clone_val()
00005 Exit: clone_val
00006 Enter: Operand::clone_val()
00006 Exit: clone_val
00007 Enter: Operand::clone_val()
00007 Exit: clone_val
00008 Enter: AstMvar::AstMvar(const string &v)
00008 var_name: a
00009 Enter: Operand::clone_val()
00009 Exit: clone_val
00008 Exit: AstMvar
00010 Enter: Operand::clone_val()
00010 Exit: clone_val
00011 Enter: Operand::clone_val()
00011 Exit: clone_val
00012 Enter: Operand::clone_val()
00012 Exit: clone_val
00013 Enter: Operand::clone_val()
00013 Exit: clone_val
00014 Enter: AstMap::get_branch(const vector<string> &keys)
00014 keys: [svlvm, module, Main]
00014 Exit: get_branch
00015 Enter: AstMap::get_branch(const vector<string> &keys)
00015 keys: [svlvm, module, Main]
00015 Exit: get_branch
00016 Enter: AstMap::get_branch(const vector<string> &keys)
00016 keys: [svlvm, module, Main, function]
00016 Exit: get_branch
00017 Enter: AstMap::get_branch(const vector<string> &keys)
00017 keys: [svlvm, module, Main, function]
00017 Exit: get_branch
00018 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00018 main: func: main
00018 Exit: add
00019 Enter: AstMap::get_branch(const vector<string> &keys)
00019 keys: [svlvm, module, Main, function]
00019 Exit: get_branch
00020 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00020 func2: func: func2
00020 Exit: add
00021 Enter: AstMap::get_branch(const vector<string> &keys)
00021 keys: [svlvm, module, Main, function]
00021 Exit: get_branch
00022 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00022 func3: func: func3
00022 Exit: add
00023 Enter: Operand::clone_val()
00023 Exit: clone_val
00024 Enter: AstMap::get_branch(const vector<string> &keys)
00024 keys: [svlvm, module, Helper]
00024 Exit: get_branch
00025 Enter: AstMap::get_branch(const vector<string> &keys)
00025 keys: [svlvm, module, Helper]
00025 Exit: get_branch
00026 Enter: AstMap::get_branch(const vector<string> &keys)
00026 keys: [svlvm, module, Helper, function]
00026 Exit: get_branch
00027 Enter: AstMap::get_branch(const vector<string> &keys)
00027 keys: [svlvm, module, Helper, function]
00027 Exit: get_branch
00028 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00028 me: func: me
00028 Exit: add
00029 Enter: AstMap::get_branch(const vector<string> &keys)
00029 keys: [svlvm, module, Prompt]
00029 Exit: get_branch
00030 Enter: AstMap::get_branch(const vector<string> &keys)
00030 keys: [svlvm, module, Prompt]
00030 Exit: get_branch
00031 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00031 last: {"code": []}
00031 Exit: add
00032 Enter: AstMap::get_branch(const vector<string> &keys)
00032 keys: [svlvm, module, Prompt]
00032 Exit: get_branch
00033 Enter: AstMap::get_branch(const vector<string> &keys)
00033 keys: [svlvm, module, Main, function, main, code]
00033 Exit: get_branch
00034 Enter: Operand::clone_val()
00034 Exit: clone_val
00035 Enter: AstMap::get_branch(const vector<string> &keys)
00035 keys: [svlvm]
00035 Exit: get_branch
00036 Enter: AstMap::get_branch(const vector<string> &keys)
00036 keys: [svlvm, frames]
00036 Exit: get_branch
00037 Enter: Operand::clone_val()
00037 Exit: clone_val
00038 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00039 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00040 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00040 Exit: evaluate
00039 Exit: evaluate
00041 Enter: AstList::clone()
00041 Exit: clone
00042 Enter: AstList::clone()
00042 Exit: clone
00043 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00043 a = {1,2,24,hello}
00044 Enter: AstMap::get_branch(const vector<string> &keys)
00044 keys: [svlm_lang]
00044 Exit: get_branch
00045 Enter: AstMap::get_branch(const vector<string> &keys)
00045 keys: [svlvm, frames]
00045 Exit: get_branch
00046 Enter: Operand::clone_val()
00046 Exit: clone_val
00047 Enter: AstMap::get_branch(const vector<string> &keys)
00047 keys: [svlvm, module, Main, mvar]
00047 Exit: get_branch
00048 Enter: AstMap::get_branch(const vector<string> &keys)
00048 keys: [svlvm, module, Main, mvar]
00048 Exit: get_branch
00043 sub_node.add() before
00049 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00049 a: {1,2,24,hello}
00049 Exit: add
00043 sub_node.add() after
00043 Exit: assign
00038 Exit: evaluate
00050 Enter: AstMap::get_branch(const vector<string> &keys)
00050 keys: [svlvm, module, Main, mvar, a, bb]
00050 Exit: get_branch
00051 Enter: AstMap::get_branch(const vector<string> &keys)
00051 keys: [svlvm, module, Main, mvar, a]
00051 Exit: get_branch
00052 Enter: AstMap::get_branch(const vector<string> &keys)
00052 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00052 Exit: get_branch
00053 Enter: AstMap::get_branch(const vector<string> &keys)
00053 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a]
00053 Exit: get_branch
00054 Enter: AstMap::get_branch(const vector<string> &keys)
00054 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm, module, Main, mvar, a, ulist]
00054 Exit: get_branch
00055 Enter: AstMap::get_branch(const vector<string> &keys)
00055 keys: [svlvm, module, Main, mvar, a, ulist]
00055 Exit: get_branch
00000 Exit: main
