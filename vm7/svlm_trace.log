00000 Enter: int main
00001 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00001 www1: server1
00001 Exit: add
00002 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00002 www2: server2
00002 Exit: add
00003 Enter: AstMvar::AstMvar(const string &v)
00003 var_name: m
00003 Exit: AstMvar
00004 Enter: AstMvar::AstMvar(const string &v)
00004 var_name: l
00004 Exit: AstMvar
00005 Enter: AstMvar::AstMvar(const string &v)
00005 var_name: m
00005 Exit: AstMvar
00006 Enter: AstMvar::AstMvar(const string &v)
00006 var_name: l
00006 Exit: AstMvar
00007 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00007 main: func: main
00007 Exit: add
00008 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00008 last: {"code": []}
00008 Exit: add
00009 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00010 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00010 m = {"www1": server1, "www2": server2}
00011 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00011 m: {"www1": server1, "www2": server2}
00011 Exit: add
00010 Exit: assign
00009 Exit: evaluate
00012 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00013 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00013 l = [
0: 1,
1: 2,
2: 3
]
00014 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00014 l: [
0: 1,
1: 2,
2: 3
]
00014 Exit: add
00013 Exit: assign
00012 Exit: evaluate
00015 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00015 var_name: m
00015 Exit: evaluate
00016 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00016 var_name: l
00016 Exit: evaluate
00017 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00017 last: {"code": [
0: nil.m=what
]}
00017 Exit: add
00018 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00019 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00019 m = what
00020 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00020 www1: what
00020 Exit: add
00019 Exit: assign
00018 Exit: evaluate
00021 Enter: AstMvar::AstMvar(const string &v)
00021 var_name: m
00021 Exit: AstMvar
00022 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00022 last: {"code": [
0: nil.m
]}
00022 Exit: add
00023 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00023 var_name: m
00023 Exit: evaluate
00024 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00024 last: {"code": [
0: nil.m=server1
]}
00024 Exit: add
00025 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
00026 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
00026 m = server1
00027 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
00027 www1: server1
00027 Exit: add
00026 Exit: assign
00025 Exit: evaluate
00028 Enter: AstMvar::AstMvar(const string &v)
00028 var_name: m
00028 Exit: AstMvar
00029 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00029 last: {"code": [
0: nil.m
]}
00029 Exit: add
00030 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00030 var_name: m
00030 Exit: evaluate
00031 Enter: AstMvar::AstMvar(const string &v)
00031 var_name: m
00031 Exit: AstMvar
00032 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
00032 last: {"code": [
0: nil.m
]}
00032 Exit: add
00033 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
00033 var_name: m
00033 Exit: evaluate
00000 Exit: main
