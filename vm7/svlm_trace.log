[39m00000 Enter: int main
[31m00001 Enter: AstMap::add_branch(const vector<string> &keys, op)
[31m00001 keys: [svlvm, readline, commands, svlm, !!print_ast]:nil
[31m00001 Exit: add_branch
[32m00002 Enter: AstMap::add_branch(const vector<string> &keys, op)
[32m00002 keys: [svlvm, readline, commands, svlm, !!print_goodbye]:nil
[32m00002 Exit: add_branch
[33m00003 Enter: AstMap::add_branch(const vector<string> &keys, op)
[33m00003 keys: [svlvm, readline, commands, svlm, !!print_stack]:nil
[33m00003 Exit: add_branch
[34m00004 Enter: AstMap::add_branch(const vector<string> &keys, vvptr)
[34m00004 keys: [svlvm, readline, commands, svlm, !!print_tree, svlvm]:{"bigbang": 55555, "frames": [], "hello": {"one": {"two": {"three": {"four": {"Five": 456}}}}, "one-one": {"two": {"three": {"four": {"Five": somestrval}}}}}, "readline": {"commands": {"svlm": {"!!print_ast": nil, "!!print_goodbye": nil, "!!print_stack": nil}}}}
[34m00004 Exit: add_branch
[35m00005 Enter: AstMap::add_branch(const vector<string> &keys, op)
[35m00005 keys: [svlvm, readline, commands, svlm, !!reload]:nil
[35m00005 Exit: add_branch
[36m00006 Enter: AstMap::add_branch(const vector<string> &keys, op)
[36m00006 keys: [svlvm, readline, commands, svlm, !!run_program]:nil
[36m00006 Exit: add_branch
[38m00007 Enter: AstMvar::AstMvar(const string &v)
[38m00007 var_name: a
[38m00007 Exit: AstMvar
[90m00008 Enter: SvlmAst::add_module('Main')
[91m00009 Enter: SvlmAst::get_module_subnode(Main): ast_mod_t
[92m00010 Enter: AstMap::get_branch(const vector<string> &keys)
[92m00010 keys: [svlvm, module, Main]
[92m00010 Exit: get_branch
[93m00011 Enter: Operand::==(operand&)
[94m00012 Enter: OperandCmpEql::()(Nil, Nil)
[94m00012 Exit: operator()
[93m00011 Exit: operator==
[95m00013 Enter: AstMap::add_branch(const vector<string> &keys, vvptr)
[95m00013 keys: [svlvm, module, Main]:nil
[95m00013 Exit: add_branch
[96m00014 Enter: AstMap::get_branch(const vector<string> &keys)
[96m00014 keys: [svlvm, module, Main]
[96m00014 Exit: get_branch
[91m00009 Exit: get_module_subnode
[39m00015 Enter: SvlmAst::get_module_subnode(Main): ast_func_t
[31m00016 Enter: AstMap::get_branch(const vector<string> &keys)
[31m00016 keys: [svlvm, module, Main, function]
[31m00016 Exit: get_branch
[32m00017 Enter: Operand::==(operand&)
[33m00018 Enter: OperandCmpEql::()(Nil, Nil)
[33m00018 Exit: operator()
[32m00017 Exit: operator==
[34m00019 Enter: AstMap::add_branch(const vector<string> &keys, vvptr)
[34m00019 keys: [svlvm, module, Main, function]:nil
[34m00019 Exit: add_branch
[35m00020 Enter: AstMap::get_branch(const vector<string> &keys)
[35m00020 keys: [svlvm, module, Main, function]
[35m00020 Exit: get_branch
[39m00015 Exit: get_module_subnode
[36m00021 Enter: Operand::==(operand&)
[38m00022 Enter: OperandCmpEql::()(T, U)
[38m00022 Exit: operator()
[36m00021 Exit: operator==
[90m00023 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
[90m00023 main: func: main
[90m00023 Exit: add
[90m00008 Exit: add_module
[91m00024 Enter: SvlmAst::get_module_subnode(Prompt): ast_mod_t
[92m00025 Enter: AstMap::get_branch(const vector<string> &keys)
[92m00025 keys: [svlvm, module, Prompt]
[92m00025 Exit: get_branch
[93m00026 Enter: Operand::==(operand&)
[94m00027 Enter: OperandCmpEql::()(Nil, Nil)
[94m00027 Exit: operator()
[93m00026 Exit: operator==
[95m00028 Enter: AstMap::add_branch(const vector<string> &keys, vvptr)
[95m00028 keys: [svlvm, module, Prompt]:nil
[95m00028 Exit: add_branch
[96m00029 Enter: AstMap::get_branch(const vector<string> &keys)
[96m00029 keys: [svlvm, module, Prompt]
[96m00029 Exit: get_branch
[91m00024 Exit: get_module_subnode
[39m00030 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
[39m00030 last: {"code": []}
[39m00030 Exit: add
[31m00031 Enter: AstMap::get_branch(const vector<string> &keys)
[31m00031 keys: [svlvm, module, Prompt]
[31m00031 Exit: get_branch
[32m00032 Enter: AstMap::get_branch(const vector<string> &keys)
[32m00032 keys: [svlvm, module, Main, function, main, code]
[32m00032 Exit: get_branch
[33m00033 Enter: AstMap::add_branch(const vector<string> &keys, op)
[33m00033 keys: [svlvm, svlm_lang]:SvlmAst PTR
[33m00033 Exit: add_branch
[34m00034 Enter: AstMap::get_branch(const vector<string> &keys)
[34m00034 keys: [svlvm]
[34m00034 Exit: get_branch
[35m00035 Enter: AstMap::get_branch(const vector<string> &keys)
[35m00035 keys: [svlvm, frames]
[35m00035 Exit: get_branch
[36m00036 Enter: AstList::evaluate()
[38m00037 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
[90m00038 Enter: AstList::evaluate()
[90m00038 Exit: AstList::evaluate
[91m00039 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
[91m00039 a = [1,2,3]
[92m00040 Enter: AstMap::get_branch(const vector<string> &keys)
[92m00040 keys: [svlm_lang]
[92m00040 Exit: get_branch
[93m00041 Enter: Operand::==(operand&)
[94m00042 Enter: OperandCmpEql::()(Nil, Nil)
[94m00042 Exit: operator()
[93m00041 Exit: operator==
[95m00043 Enter: AstMap::get_branch(const vector<string> &keys)
[95m00043 keys: [svlvm, frames]
[95m00043 Exit: get_branch
[96m00044 Enter: Operand::[current_module]
[96m00044 Exit: operator[]
[39m00045 Enter: SvlmAst::get_module_subnode(Main): ast_mvar_t
[31m00046 Enter: AstMap::get_branch(const vector<string> &keys)
[31m00046 keys: [svlvm, module, Main, mvar]
[31m00046 Exit: get_branch
[32m00047 Enter: Operand::==(operand&)
[33m00048 Enter: OperandCmpEql::()(Nil, Nil)
[33m00048 Exit: operator()
[32m00047 Exit: operator==
[34m00049 Enter: AstMap::add_branch(const vector<string> &keys, vvptr)
[34m00049 keys: [svlvm, module, Main, mvar]:nil
[34m00049 Exit: add_branch
[35m00050 Enter: AstMap::get_branch(const vector<string> &keys)
[35m00050 keys: [svlvm, module, Main, mvar]
[35m00050 Exit: get_branch
[39m00045 Exit: get_module_subnode
[91m00039 sub_node.add() before
[36m00051 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
[36m00051 a: [1,2,3]
[36m00051 Exit: add
[91m00039 sub_node.add() after
[91m00039 Exit: assign
[38m00037 Exit: evaluate
[36m00036 Exit: AstList::evaluate
[38m00052 Enter: AstMvar::AstMvar(const string &v)
[38m00052 var_name: a
[38m00052 Exit: AstMvar
[90m00053 Enter: AstMvar::AstMvar(const string &v)
[90m00053 var_name: c
[90m00053 Exit: AstMvar
[91m00054 Enter: SvlmAst::get_module_subnode(Prompt): ast_mod_t
[92m00055 Enter: AstMap::get_branch(const vector<string> &keys)
[92m00055 keys: [svlvm, module, Prompt]
[92m00055 Exit: get_branch
[93m00056 Enter: Operand::==(operand&)
[94m00057 Enter: OperandCmpEql::()(T, U)
[94m00057 Exit: operator()
[93m00056 Exit: operator==
[91m00054 Exit: get_module_subnode
[95m00058 Enter: AstMap::add(const Operand &k, astexpr_u_ptr&& vptr, bool overwrite)
[96m00059 Enter: Operand::==(operand&)
[39m00060 Enter: OperandCmpEql::()(Nil, Nil)
[39m00060 Exit: operator()
[96m00059 Exit: operator==
[31m00061 Enter: Operand::==(operand&)
[32m00062 Enter: OperandCmpEql::()(Nil, Nil)
[32m00062 Exit: operator()
[31m00061 Exit: operator==
[95m00058 last: {"code": [$c=$a]}
[95m00058 Exit: add
[33m00063 Enter: AstMap::get_branch(const vector<string> &keys)
[33m00063 keys: [svlvm, module, Prompt]
[33m00063 Exit: get_branch
[34m00064 Enter: AstMap::get_branch(const vector<string> &keys)
[34m00064 keys: [svlvm, module, Prompt, last, code]
[34m00064 Exit: get_branch
[35m00065 Enter: AstMap::get_branch(const vector<string> &keys)
[35m00065 keys: [svlvm]
[35m00065 Exit: get_branch
[36m00066 Enter: AstList::evaluate()
[38m00067 Enter: AstBinOp::evaluate(astexpr_u_ptr& ctxt)
[90m00068 Enter: AstMvar::evaluate(astexpr_u_ptr& ctxt)
[90m00068 var_name: a
[91m00069 Enter: AstMap::get_branch(const vector<string> &keys)
[91m00069 keys: [svlm_lang]
[91m00069 Exit: get_branch
[92m00070 Enter: Operand::==(operand&)
[93m00071 Enter: OperandCmpEql::()(Nil, Nil)
[93m00071 Exit: operator()
[92m00070 Exit: operator==
[94m00072 Enter: AstMap::get_branch(const vector<string> &keys)
[94m00072 keys: [svlvm, frames]
[94m00072 Exit: get_branch
[95m00073 Enter: Operand::[current_module]
[95m00073 Exit: operator[]
[96m00074 Enter: SvlmAst::get_module_subnode(Main): ast_mvar_t
[39m00075 Enter: AstMap::get_branch(const vector<string> &keys)
[39m00075 keys: [svlvm, module, Main, mvar]
[39m00075 Exit: get_branch
[31m00076 Enter: Operand::==(operand&)
[32m00077 Enter: OperandCmpEql::()(T, U)
[32m00077 Exit: operator()
[31m00076 Exit: operator==
[96m00074 Exit: get_module_subnode
[90m00068 Exit: evaluate
[33m00078 Enter: AstMvar::assign(astexpr_u_ptr& ctxt, const Operand& v)
[33m00078 c = [1,2,3]
[34m00079 Enter: AstMap::get_branch(const vector<string> &keys)
[34m00079 keys: [svlm_lang]
[34m00079 Exit: get_branch
[35m00080 Enter: Operand::==(operand&)
[36m00081 Enter: OperandCmpEql::()(Nil, Nil)
[36m00081 Exit: operator()
[35m00080 Exit: operator==
[38m00082 Enter: AstMap::get_branch(const vector<string> &keys)
[38m00082 keys: [svlvm, frames]
[38m00082 Exit: get_branch
[90m00083 Enter: Operand::[current_module]
[90m00083 Exit: operator[]
[91m00084 Enter: SvlmAst::get_module_subnode(Main): ast_mvar_t
[92m00085 Enter: AstMap::get_branch(const vector<string> &keys)
[92m00085 keys: [svlvm, module, Main, mvar]
[92m00085 Exit: get_branch
[93m00086 Enter: Operand::==(operand&)
[94m00087 Enter: OperandCmpEql::()(T, U)
[94m00087 Exit: operator()
[93m00086 Exit: operator==
[91m00084 Exit: get_module_subnode
[33m00078 sub_node.add() before
[95m00088 Enter: AstMap::add(const Operand &k, const AstExpr& v, bool overwrite): 
[95m00088 c: [1,2,3]
[95m00088 Exit: add
[33m00078 sub_node.add() after
[33m00078 Exit: assign
[38m00067 Exit: evaluate
[36m00066 Exit: AstList::evaluate
[96m00089 Enter: Operand::==(operand&)
[39m00090 Enter: OperandCmpEql::()(T, U)
[39m00090 Exit: operator()
[96m00089 Exit: operator==
[39m00000 Exit: main
