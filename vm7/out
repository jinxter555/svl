g++ -std=c++17  -ggdb -g -c operand.cc -o operand.o
In file included from /usr/include/c++/11/variant:36,
                 from operand.cc:1:
/usr/include/c++/11/type_traits: In substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = Operand::OpCode; _Args = {const std::unique_ptr<AstExpr, std::default_delete<AstExpr> >&}]’:
/usr/include/c++/11/variant:1087:14:   required from ‘constexpr bool std::__detail::__variant::__check_visitor_results(std::index_sequence<_Ind ...>) [with _Visitor = Operand::OpCode; _Variant = const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&; long unsigned int ..._Idxs = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12>]’
/usr/include/c++/11/variant:1751:44:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = Operand::OpCode; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = AstOpCode]’
operand.cc:224:15:   required from here
/usr/include/c++/11/type_traits:3016:11: error: no type named ‘type’ in ‘struct std::invoke_result<Operand::OpCode, const std::unique_ptr<AstExpr, std::default_delete<AstExpr> >&>’
 3016 |     using invoke_result_t = typename invoke_result<_Fn, _Args...>::type;
      |           ^~~~~~~~~~~~~~~
In file included from operand.cc:1:
/usr/include/c++/11/variant: In instantiation of ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = Operand::OpCode; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = AstOpCode]’:
operand.cc:224:15:   required from here
/usr/include/c++/11/variant:1751:44:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__check_visitor_results<Operand::OpCode, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12>((std::make_index_sequence<13>(), std::make_index_sequence<13>()))’
/usr/include/c++/11/variant:1750:26: error: ‘constexpr’ call flows off the end of the function
 1750 |           constexpr bool __visit_rettypes_match = __detail::__variant::
      |                          ^~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:1755:29: error: non-constant condition for static assertion
 1755 |               static_assert(__visit_rettypes_match,
      |                             ^~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:1758:15: error: return-statement with no value, in function returning ‘std::__detail::__variant::__visit_result_t<Operand::OpCode, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&>’ {aka ‘AstOpCode’} [-fpermissive]
 1758 |               return;
      |               ^~~~~~
/usr/include/c++/11/variant: In instantiation of ‘static constexpr decltype(auto) std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::__visit_invoke(_Visitor&&, _Variants ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode&&; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; long unsigned int ...__indices = {12}]’:
/usr/include/c++/11/variant:1032:28:   required from ‘static constexpr auto std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply() [with _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode&&; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; long unsigned int ...__indices = {12}]’
/usr/include/c++/11/variant:968:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = false; long unsigned int __index = 12; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode&&; long unsigned int ...__dimensions = {13}; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:947:48:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<AstOpCode>, Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = Operand::OpCode; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = AstOpCode]’
operand.cc:224:15:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&), 13>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:932:19:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&), 13>, std::integer_sequence<long unsigned int> >::_S_apply_all_alts<0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12>(__vtable, (std::make_index_sequence<13>(), std::make_index_sequence<13>()))’
/usr/include/c++/11/variant:1016:31: error: no matching function for call to ‘__invoke(Operand::OpCode, const std::unique_ptr<AstExpr>&)’
 1016 |           return std::__invoke(std::forward<_Visitor>(__visitor),
      |                  ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1017 |               __element_by_index_or_cookie<__indices>(
      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1018 |                 std::forward<_Variants>(__vars))...);
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/11/variant:42,
                 from operand.cc:1:
/usr/include/c++/11/bits/invoke.h:90:5: note: candidate: ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...)’
   90 |     __invoke(_Callable&& __fn, _Args&&... __args)
      |     ^~~~~~~~
/usr/include/c++/11/bits/invoke.h:90:5: note:   template argument deduction/substitution failed:
/usr/include/c++/11/bits/invoke.h: In substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = Operand::OpCode; _Args = {const std::unique_ptr<AstExpr, std::default_delete<AstExpr> >&}]’:
/usr/include/c++/11/variant:1016:24:   required from ‘static constexpr decltype(auto) std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::__visit_invoke(_Visitor&&, _Variants ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode&&; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; long unsigned int ...__indices = {12}]’
/usr/include/c++/11/variant:1032:28:   required from ‘static constexpr auto std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply() [with _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode&&; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; long unsigned int ...__indices = {12}]’
/usr/include/c++/11/variant:968:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = false; long unsigned int __index = 12; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode&&; long unsigned int ...__dimensions = {13}; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:947:48:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<AstOpCode>, Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = Operand::OpCode; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = AstOpCode]’
operand.cc:224:15:   required from here
/usr/include/c++/11/bits/invoke.h:90:5: error: no type named ‘type’ in ‘struct std::__invoke_result<Operand::OpCode, const std::unique_ptr<AstExpr, std::default_delete<AstExpr> >&>’
In file included from operand.cc:1:
/usr/include/c++/11/variant: In instantiation of ‘static constexpr auto std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply() [with _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode&&; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; long unsigned int ...__indices = {12}]’:
/usr/include/c++/11/variant:968:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = false; long unsigned int __index = 12; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode&&; long unsigned int ...__dimensions = {13}; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:947:48:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<AstOpCode>, Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = Operand::OpCode; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = AstOpCode]’
operand.cc:224:15:   required from here
/usr/include/c++/11/variant:1040:49: error: invalid conversion from ‘decltype(auto) (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)’ to ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>::__untag_result<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>::element_type’ {aka ‘AstOpCode (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)’} [-fpermissive]
 1040 |               return _Array_type{&__visit_invoke};
      |                                                 ^
      |                                                 |
      |                                                 decltype(auto) (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)
/usr/include/c++/11/variant:1040:49: error: inconsistent deduction for auto return type: ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_S_apply()::__cannot_match’ and then ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>’
/usr/include/c++/11/variant:1040:49: error: no matching function for call to ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_S_apply()::__cannot_match::__cannot_match(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_Array_type)’
/usr/include/c++/11/variant:1036:24: note: candidate: ‘constexpr std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_S_apply()::__cannot_match::__cannot_match()’
 1036 |                 struct __cannot_match {};
      |                        ^~~~~~~~~~~~~~
/usr/include/c++/11/variant:1036:24: note:   candidate expects 0 arguments, 1 provided
/usr/include/c++/11/variant:1036:24: note: candidate: ‘constexpr std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_S_apply()::__cannot_match::__cannot_match(const std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_S_apply()::__cannot_match&)’
/usr/include/c++/11/variant:1036:24: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_Array_type’ to ‘const std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_S_apply()::__cannot_match&’
/usr/include/c++/11/variant:1036:24: note: candidate: ‘constexpr std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_S_apply()::__cannot_match::__cannot_match(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_S_apply()::__cannot_match&&)’
/usr/include/c++/11/variant:1036:24: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_Array_type’ to ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_S_apply()::__cannot_match&&’
/usr/include/c++/11/variant: In instantiation of ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = false; long unsigned int __index = 12; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode&&; long unsigned int ...__dimensions = {13}; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; long unsigned int ...__indices = {}]’:
/usr/include/c++/11/variant:947:48:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<AstOpCode>, Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = Operand::OpCode; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = AstOpCode]’
operand.cc:224:15:   required from here
/usr/include/c++/11/variant:969:29: error: static assertion failed: std::visit requires the visitor to have the same return type for all alternatives of a variant
  969 |               static_assert(is_same_v<_Tp, decltype(__tmp_element)>,
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:969:29: note: ‘std::is_same_v<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_S_apply()::__cannot_match>’ evaluates to false
/usr/include/c++/11/variant:972:25: error: no match for ‘operator=’ (operand types are ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>’ and ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_S_apply()::__cannot_match’)
  972 |               __element = __tmp_element;
      |               ~~~~~~~~~~^~~~~~~~~~~~~~~
/usr/include/c++/11/variant:814:12: note: candidate: ‘constexpr std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>& std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>::operator=(const std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>&)’
  814 |     struct _Multi_array<_Tp>
      |            ^~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:814:12: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_S_apply()::__cannot_match’ to ‘const std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>&’
/usr/include/c++/11/variant:814:12: note: candidate: ‘constexpr std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>& std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>::operator=(std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>&&)’
/usr/include/c++/11/variant:814:12: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>, std::integer_sequence<long unsigned int, 12> >::_S_apply()::__cannot_match’ to ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>&&’
/usr/include/c++/11/variant: In instantiation of ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<AstOpCode>, Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&>::_S_vtable’:
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = Operand::OpCode; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = AstOpCode]’
operand.cc:224:15:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&), 13>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:932:19:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&), 13>, std::integer_sequence<long unsigned int> >::_S_apply_all_alts<0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12>(__vtable, (std::make_index_sequence<13>(), std::make_index_sequence<13>()))’
/usr/include/c++/11/variant:947:55: error: ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = false; long unsigned int __index = 12; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode&&; long unsigned int ...__dimensions = {13}; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; long unsigned int ...__indices = {}]’ called in a constant expression
  947 |             (_S_apply_single_alt<false, __var_indices>(
      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
  948 |               __vtable._M_arr[__var_indices]), ...);
      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~          
/usr/include/c++/11/variant:953:9: note: ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = false; long unsigned int __index = 12; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<AstOpCode> (*)(Operand::OpCode&&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<AstOpCode>; _Visitor = Operand::OpCode&&; long unsigned int ...__dimensions = {13}; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, SvlmAst*, AstExpr*, std::shared_ptr<AstExpr>, std::unique_ptr<AstExpr, std::default_delete<AstExpr> > >&}; long unsigned int ...__indices = {}]’ is not usable as a ‘constexpr’ function because:
  953 |         _S_apply_single_alt(_Tp& __element, _Tp* __cookie_element = nullptr)
      |         ^~~~~~~~~~~~~~~~~~~
make: *** [Makefile:25: operand.o] Error 1
