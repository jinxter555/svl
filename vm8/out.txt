operand.cc: In member function ‘bool Operand::addk(const Operand&, const Operand&, bool)’:
operand.cc:124:8: error: no matching function for call to ‘visit(Operand::AddK, const operand_variant_t&, const operand_variant_t&, bool&)’
  124 |   visit(AddK(m), k.value_, v.value_, overwrite );
      |   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from operand.hh:3,
                 from operand.cc:3:
/usr/include/c++/11/variant:1734:5: note: candidate: ‘template<class _Visitor, class ... _Variants> constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...)’
 1734 |     visit(_Visitor&& __visitor, _Variants&&... __variants)
      |     ^~~~~
/usr/include/c++/11/variant:1734:5: note:   template argument deduction/substitution failed:
/usr/include/c++/11/variant: In substitution of ‘template<class _Visitor, class ... _Variants> using __visit_result_t = std::invoke_result_t<_Visitor, std::__detail::__variant::__get_t<0, _Variants, decltype (std::__detail::__variant::__as(declval<_Variants>())), typename std::variant_alternative<0, typename std::remove_reference<decltype (std::__detail::__variant::__as(declval<_Variants>()))>::type>::type>...> [with _Visitor = Operand::AddK; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, std::vector<Operand, std::allocator<Operand> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Operand, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Operand> > >, Operand*, std::shared_ptr<Operand>, std::unique_ptr<Operand, std::default_delete<Operand> > >&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, std::vector<Operand, std::allocator<Operand> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Operand, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Operand> > >, Operand*, std::shared_ptr<Operand>, std::unique_ptr<Operand, std::default_delete<Operand> > >&, bool&}]’:
/usr/include/c++/11/variant:1734:5:   required by substitution of ‘template<class _Visitor, class ... _Variants> constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = Operand::AddK; _Variants = {const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, std::vector<Operand, std::allocator<Operand> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Operand, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Operand> > >, Operand*, std::shared_ptr<Operand>, std::unique_ptr<Operand, std::default_delete<Operand> > >&, const std::variant<Nil, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Number, ControlFlow, AstOpCode, OperandErrorCode, OperandStatusCode, OperandType, std::vector<Operand, std::allocator<Operand> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Operand, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Operand> > >, Operand*, std::shared_ptr<Operand>, std::unique_ptr<Operand, std::default_delete<Operand> > >&, bool&}]’
operand.cc:124:8:   required from here
/usr/include/c++/11/variant:1071:47: error: no matching function for call to ‘__as(bool&)’
 1071 |       typename _AsV = decltype(__variant::__as(std::declval<_Variant>())),
      |                                ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:209:5: note: candidate: ‘template<class ... _Types> constexpr std::variant<_Types ...>& std::__detail::__variant::__as(std::variant<_Types ...>&)’
  209 |     __as(std::variant<_Types...>& __v) noexcept
      |     ^~~~
/usr/include/c++/11/variant:209:5: note:   template argument deduction/substitution failed:
/usr/include/c++/11/variant:1071:47: note:   mismatched types ‘std::variant<_Types ...>’ and ‘bool’
 1071 |       typename _AsV = decltype(__variant::__as(std::declval<_Variant>())),
      |                                ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:214:5: note: candidate: ‘template<class ... _Types> constexpr const std::variant<_Types ...>& std::__detail::__variant::__as(const std::variant<_Types ...>&)’
  214 |     __as(const std::variant<_Types...>& __v) noexcept
      |     ^~~~
/usr/include/c++/11/variant:214:5: note:   template argument deduction/substitution failed:
/usr/include/c++/11/variant:1071:47: note:   mismatched types ‘const std::variant<_Types ...>’ and ‘bool’
 1071 |       typename _AsV = decltype(__variant::__as(std::declval<_Variant>())),
      |                                ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:219:5: note: candidate: ‘template<class ... _Types> constexpr std::variant<_Types ...>&& std::__detail::__variant::__as(std::variant<_Types ...>&&)’
  219 |     __as(std::variant<_Types...>&& __v) noexcept
      |     ^~~~
/usr/include/c++/11/variant:219:5: note:   template argument deduction/substitution failed:
/usr/include/c++/11/variant:1071:47: note:   mismatched types ‘std::variant<_Types ...>’ and ‘bool’
 1071 |       typename _AsV = decltype(__variant::__as(std::declval<_Variant>())),
      |                                ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:224:5: note: candidate: ‘template<class ... _Types> constexpr const std::variant<_Types ...>&& std::__detail::__variant::__as(const std::variant<_Types ...>&&)’
  224 |     __as(const std::variant<_Types...>&& __v) noexcept
      |     ^~~~
/usr/include/c++/11/variant:224:5: note:   template argument deduction/substitution failed:
/usr/include/c++/11/variant:1071:47: note:   mismatched types ‘const std::variant<_Types ...>’ and ‘bool’
 1071 |       typename _AsV = decltype(__variant::__as(std::declval<_Variant>())),
      |                                ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
operand.cc: In member function ‘bool Operand::AddK::operator()(Nil, Nil, bool)’:
operand.cc:656:1: warning: no return statement in function returning non-void [-Wreturn-type]
  656 | }
      | ^
