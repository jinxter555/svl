Makefile:85: warning: overriding recipe for target 'ast.o'
Makefile:52: warning: ignoring old recipe for target 'ast.o'
g++ -std=c++17 -g -c operand.cc
In file included from /usr/include/c++/11/variant:36,
                 from operand.cc:1:
/usr/include/c++/11/type_traits: In instantiation of ‘struct std::is_copy_constructible<Tuple>’:
/usr/include/c++/11/type_traits:3180:33:   required from ‘constexpr const bool std::is_copy_constructible_v<Tuple>’
/usr/include/c++/11/variant:310:5:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_copy_ctor’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:987:52: error: static assertion failed: template argument must be a complete class or an unbounded array
  987 |       static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/type_traits:987:52: note: ‘std::__is_complete_or_unbounded<std::__type_identity<Tuple> >((std::__type_identity<Tuple>{}, std::__type_identity<Tuple>()))’ evaluates to false
/usr/include/c++/11/type_traits: In instantiation of ‘struct std::is_copy_assignable<Tuple>’:
/usr/include/c++/11/type_traits:3187:73:   required from ‘constexpr const bool std::is_copy_assignable_v<Tuple>’
/usr/include/c++/11/variant:315:8:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_copy_assign’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:1110:52: error: static assertion failed: template argument must be a complete class or an unbounded array
 1110 |       static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/type_traits:1110:52: note: ‘std::__is_complete_or_unbounded<std::__type_identity<Tuple> >((std::__type_identity<Tuple>{}, std::__type_identity<Tuple>()))’ evaluates to false
/usr/include/c++/11/type_traits: In instantiation of ‘struct std::is_move_constructible<Tuple>’:
/usr/include/c++/11/type_traits:3183:33:   required from ‘constexpr const bool std::is_move_constructible_v<Tuple>’
/usr/include/c++/11/variant:312:5:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_move_ctor’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:1010:52: error: static assertion failed: template argument must be a complete class or an unbounded array
 1010 |       static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/type_traits:1010:52: note: ‘std::__is_complete_or_unbounded<std::__type_identity<Tuple> >((std::__type_identity<Tuple>{}, std::__type_identity<Tuple>()))’ evaluates to false
/usr/include/c++/11/type_traits: In instantiation of ‘struct std::is_move_assignable<Tuple>’:
/usr/include/c++/11/type_traits:3189:73:   required from ‘constexpr const bool std::is_move_assignable_v<Tuple>’
/usr/include/c++/11/variant:318:8:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_move_assign’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:1131:52: error: static assertion failed: template argument must be a complete class or an unbounded array
 1131 |       static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/type_traits:1131:52: note: ‘std::__is_complete_or_unbounded<std::__type_identity<Tuple> >((std::__type_identity<Tuple>{}, std::__type_identity<Tuple>()))’ evaluates to false
/usr/include/c++/11/type_traits: In instantiation of ‘struct std::is_trivially_destructible<Tuple>’:
/usr/include/c++/11/type_traits:3215:37:   required from ‘constexpr const bool std::is_trivially_destructible_v<Tuple>’
/usr/include/c++/11/variant:321:5:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_dtor’
/usr/include/c++/11/variant:330:4:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_move_assign’
/usr/include/c++/11/variant:696:11:   required by substitution of ‘template<class ... _Types> using _Move_assign_alias = std::__detail::__variant::_Move_assign_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_move_assign, _Types ...> [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:700:12:   required from ‘struct std::__detail::__variant::_Variant_base<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:1339:37: error: invalid use of incomplete type ‘class Tuple’
 1339 |                     __bool_constant<__has_trivial_destructor(_Tp)>>
      |                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from operand.hh:6,
                 from operand.cc:5:
lang.hh:51:33: note: forward declaration of ‘class Tuple’
   51 | class Number; class Atom; class Tuple;
      |                                 ^~~~~
In file included from /usr/include/c++/11/variant:36,
                 from operand.cc:1:
/usr/include/c++/11/type_traits:1341:52: error: static assertion failed: template argument must be a complete class or an unbounded array
 1341 |       static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/type_traits:1341:52: note: ‘std::__is_complete_or_unbounded<std::__type_identity<Tuple> >((std::__type_identity<Tuple>{}, std::__type_identity<Tuple>()))’ evaluates to false
/usr/include/c++/11/type_traits: In instantiation of ‘constexpr const bool std::is_trivially_destructible_v<Tuple>’:
/usr/include/c++/11/variant:321:5:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_dtor’
/usr/include/c++/11/variant:330:4:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_move_assign’
/usr/include/c++/11/variant:696:11:   required by substitution of ‘template<class ... _Types> using _Move_assign_alias = std::__detail::__variant::_Move_assign_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_move_assign, _Types ...> [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:700:12:   required from ‘struct std::__detail::__variant::_Variant_base<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:3215:37: error: ‘value’ is not a member of ‘std::is_trivially_destructible<Tuple>’
 3215 |     is_trivially_destructible<_Tp>::value;
      |                                     ^~~~~
/usr/include/c++/11/type_traits: In instantiation of ‘struct std::__is_trivially_move_constructible_impl<Tuple, true>’:
/usr/include/c++/11/type_traits:1277:12:   required from ‘struct std::is_trivially_move_constructible<Tuple>’
/usr/include/c++/11/type_traits:3203:43:   required from ‘constexpr const bool std::is_trivially_move_constructible_v<Tuple>’
/usr/include/c++/11/variant:325:5:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_move_ctor’
/usr/include/c++/11/variant:330:23:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_move_assign’
/usr/include/c++/11/variant:696:11:   required by substitution of ‘template<class ... _Types> using _Move_assign_alias = std::__detail::__variant::_Move_assign_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_move_assign, _Types ...> [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:700:12:   required from ‘struct std::__detail::__variant::_Variant_base<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:1272:25: error: invalid use of incomplete type ‘class Tuple’
 1272 |                         __is_trivially_constructible(_Tp, _Tp&&)>>
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from operand.hh:6,
                 from operand.cc:5:
lang.hh:51:33: note: forward declaration of ‘class Tuple’
   51 | class Number; class Atom; class Tuple;
      |                                 ^~~~~
In file included from /usr/include/c++/11/variant:36,
                 from operand.cc:1:
/usr/include/c++/11/type_traits: In instantiation of ‘struct std::is_trivially_move_constructible<Tuple>’:
/usr/include/c++/11/type_traits:3203:43:   required from ‘constexpr const bool std::is_trivially_move_constructible_v<Tuple>’
/usr/include/c++/11/variant:325:5:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_move_ctor’
/usr/include/c++/11/variant:330:23:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_move_assign’
/usr/include/c++/11/variant:696:11:   required by substitution of ‘template<class ... _Types> using _Move_assign_alias = std::__detail::__variant::_Move_assign_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_move_assign, _Types ...> [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:700:12:   required from ‘struct std::__detail::__variant::_Variant_base<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:1280:52: error: static assertion failed: template argument must be a complete class or an unbounded array
 1280 |       static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/type_traits:1280:52: note: ‘std::__is_complete_or_unbounded<std::__type_identity<Tuple> >((std::__type_identity<Tuple>{}, std::__type_identity<Tuple>()))’ evaluates to false
/usr/include/c++/11/type_traits: In instantiation of ‘constexpr const bool std::is_trivially_move_constructible_v<Tuple>’:
/usr/include/c++/11/variant:325:5:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_move_ctor’
/usr/include/c++/11/variant:330:23:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_move_assign’
/usr/include/c++/11/variant:696:11:   required by substitution of ‘template<class ... _Types> using _Move_assign_alias = std::__detail::__variant::_Move_assign_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_move_assign, _Types ...> [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:700:12:   required from ‘struct std::__detail::__variant::_Variant_base<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:3203:43: error: ‘value’ is not a member of ‘std::is_trivially_move_constructible<Tuple>’
 3203 |     is_trivially_move_constructible<_Tp>::value;
      |                                           ^~~~~
/usr/include/c++/11/type_traits: In instantiation of ‘struct std::is_trivially_move_assignable<Tuple>’:
/usr/include/c++/11/type_traits:3212:40:   required from ‘constexpr const bool std::is_trivially_move_assignable_v<Tuple>’
/usr/include/c++/11/variant:331:8:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_move_assign’
/usr/include/c++/11/variant:696:11:   required by substitution of ‘template<class ... _Types> using _Move_assign_alias = std::__detail::__variant::_Move_assign_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_move_assign, _Types ...> [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:700:12:   required from ‘struct std::__detail::__variant::_Variant_base<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:1331:52: error: static assertion failed: template argument must be a complete class or an unbounded array
 1331 |       static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/type_traits:1331:52: note: ‘std::__is_complete_or_unbounded<std::__type_identity<Tuple> >((std::__type_identity<Tuple>{}, std::__type_identity<Tuple>()))’ evaluates to false
/usr/include/c++/11/type_traits: In instantiation of ‘struct std::__is_trivially_copy_constructible_impl<Tuple, true>’:
/usr/include/c++/11/type_traits:1254:12:   required from ‘struct std::is_trivially_copy_constructible<Tuple>’
/usr/include/c++/11/type_traits:3200:43:   required from ‘constexpr const bool std::is_trivially_copy_constructible_v<Tuple>’
/usr/include/c++/11/variant:323:5:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_copy_ctor’
/usr/include/c++/11/variant:327:23:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_copy_assign’
/usr/include/c++/11/variant:653:11:   required by substitution of ‘template<class ... _Types> using _Copy_assign_alias = std::__detail::__variant::_Copy_assign_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_copy_assign, _Types ...> [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:657:12:   required from ‘struct std::__detail::__variant::_Move_assign_base<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:700:12:   required from ‘struct std::__detail::__variant::_Variant_base<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:1249:25: error: invalid use of incomplete type ‘class Tuple’
 1249 |                         __is_trivially_constructible(_Tp, const _Tp&)>>
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from operand.hh:6,
                 from operand.cc:5:
lang.hh:51:33: note: forward declaration of ‘class Tuple’
   51 | class Number; class Atom; class Tuple;
      |                                 ^~~~~
In file included from /usr/include/c++/11/variant:36,
                 from operand.cc:1:
/usr/include/c++/11/type_traits: In instantiation of ‘struct std::is_trivially_copy_constructible<Tuple>’:
/usr/include/c++/11/type_traits:3200:43:   required from ‘constexpr const bool std::is_trivially_copy_constructible_v<Tuple>’
/usr/include/c++/11/variant:323:5:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_copy_ctor’
/usr/include/c++/11/variant:327:23:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_copy_assign’
/usr/include/c++/11/variant:653:11:   required by substitution of ‘template<class ... _Types> using _Copy_assign_alias = std::__detail::__variant::_Copy_assign_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_copy_assign, _Types ...> [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:657:12:   required from ‘struct std::__detail::__variant::_Move_assign_base<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:700:12:   required from ‘struct std::__detail::__variant::_Variant_base<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:1257:52: error: static assertion failed: template argument must be a complete class or an unbounded array
 1257 |       static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/type_traits:1257:52: note: ‘std::__is_complete_or_unbounded<std::__type_identity<Tuple> >((std::__type_identity<Tuple>{}, std::__type_identity<Tuple>()))’ evaluates to false
/usr/include/c++/11/type_traits: In instantiation of ‘constexpr const bool std::is_trivially_copy_constructible_v<Tuple>’:
/usr/include/c++/11/variant:323:5:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_copy_ctor’
/usr/include/c++/11/variant:327:23:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_copy_assign’
/usr/include/c++/11/variant:653:11:   required by substitution of ‘template<class ... _Types> using _Copy_assign_alias = std::__detail::__variant::_Copy_assign_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_copy_assign, _Types ...> [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:657:12:   required from ‘struct std::__detail::__variant::_Move_assign_base<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:700:12:   required from ‘struct std::__detail::__variant::_Variant_base<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:3200:43: error: ‘value’ is not a member of ‘std::is_trivially_copy_constructible<Tuple>’
 3200 |     is_trivially_copy_constructible<_Tp>::value;
      |                                           ^~~~~
/usr/include/c++/11/type_traits: In instantiation of ‘struct std::is_trivially_copy_assignable<Tuple>’:
/usr/include/c++/11/type_traits:3209:40:   required from ‘constexpr const bool std::is_trivially_copy_assignable_v<Tuple>’
/usr/include/c++/11/variant:328:8:   required from ‘constexpr const bool std::__detail::__variant::_Traits<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_S_trivial_copy_assign’
/usr/include/c++/11/variant:653:11:   required by substitution of ‘template<class ... _Types> using _Copy_assign_alias = std::__detail::__variant::_Copy_assign_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_copy_assign, _Types ...> [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:657:12:   required from ‘struct std::__detail::__variant::_Move_assign_base<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:700:12:   required from ‘struct std::__detail::__variant::_Variant_base<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
/usr/include/c++/11/variant:1326:11:   required from ‘class std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’
operand.hh:15:18:   required from here
/usr/include/c++/11/type_traits:1310:52: error: static assertion failed: template argument must be a complete class or an unbounded array
 1310 |       static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/type_traits:1310:52: note: ‘std::__is_complete_or_unbounded<std::__type_identity<Tuple> >((std::__type_identity<Tuple>{}, std::__type_identity<Tuple>()))’ evaluates to false
In file included from operand.cc:5:
operand.hh:27:28: error: ‘any’ is not a member of ‘std’
   27 |   Operand(std::vector<std::any>  l); // tuple
      |                            ^~~
operand.hh:9:1: note: ‘std::any’ is defined in header ‘<any>’; did you forget to ‘#include <any>’?
    8 | #include "atom.hh"
  +++ |+#include <any>
    9 | 
operand.hh:27:31: error: template argument 1 is invalid
   27 |   Operand(std::vector<std::any>  l); // tuple
      |                               ^
operand.hh:27:31: error: template argument 2 is invalid
operand.hh:27:3: error: ‘Operand::Operand(int)’ cannot be overloaded with ‘Operand::Operand(int)’
   27 |   Operand(std::vector<std::any>  l); // tuple
      |   ^~~~~~~
operand.hh:21:3: note: previous declaration ‘Operand::Operand(int)’
   21 |   Operand(int value) ;
      |   ^~~~~~~
In file included from operand.cc:1:
/usr/include/c++/11/variant: In instantiation of ‘struct std::__detail::__variant::_Arr<Tuple>’:
/usr/include/c++/11/variant:770:12:   recursively required by substitution of ‘template<long unsigned int _Ind, class _Tp, class _Ti> struct std::__detail::__variant::_Build_FUN<_Ind, _Tp, _Ti, std::void_t<decltype (std::__detail::__variant::_Arr<_Ti>{{declval<_Tp>()}})> > [with long unsigned int _Ind = 3; _Tp = bool&; _Ti = Tuple]’
/usr/include/c++/11/variant:770:12:   required from ‘struct std::__detail::__variant::_Build_FUNs<bool&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >, std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5> >’
/usr/include/c++/11/variant:780:52:   required by substitution of ‘template<class _Tp, class _Variant> struct std::__detail::__variant::__accepted_index<_Tp, _Variant, std::void_t<decltype (std::__detail::__variant::_Build_FUNs<_Tp, _Variant, std::make_integer_sequence<long unsigned int, variant_size_v<_Variant> > >::_S_fun(declval<_Tp>()))> > [with _Tp = bool&; _Variant = std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >]’
/usr/include/c++/11/variant:1369:59:   required from ‘constexpr const size_t std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::__accepted_index<bool&>’
/usr/include/c++/11/variant:1375:36:   required by substitution of ‘template<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = bool&; <template-parameter-2-2> = void; _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:1405:9:   required by substitution of ‘template<class _Tp, class, class, class _Tj, class> constexpr std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::variant(_Tp&&) [with _Tp = bool&; <template-parameter-1-2> = void; <template-parameter-1-3> = void; _Tj = <missing>; <template-parameter-1-5> = <missing>]’
operand.cc:8:32:   required from here
/usr/include/c++/11/variant:745:44: error: ‘std::__detail::__variant::_Arr<_Ti>::_M_x’ has incomplete type
  745 |   template<typename _Ti> struct _Arr { _Ti _M_x[1]; };
      |                                            ^~~~
In file included from operand.hh:6,
                 from operand.cc:5:
lang.hh:51:33: note: forward declaration of ‘class Tuple’
   51 | class Number; class Atom; class Tuple;
      |                                 ^~~~~
operand.cc:15:35: error: ‘any’ is not a member of ‘std’
   15 | Operand::Operand(std::vector<std::any>  l) {
      |                                   ^~~
operand.cc:6:1: note: ‘std::any’ is defined in header ‘<any>’; did you forget to ‘#include <any>’?
    5 | #include "operand.hh"
  +++ |+#include <any>
    6 | 
operand.cc:15:38: error: template argument 1 is invalid
   15 | Operand::Operand(std::vector<std::any>  l) {
      |                                      ^
operand.cc:15:38: error: template argument 2 is invalid
operand.cc:15:1: error: redefinition of ‘Operand::Operand(int)’
   15 | Operand::Operand(std::vector<std::any>  l) {
      | ^~~~~~~
operand.cc:9:1: note: ‘Operand::Operand(int)’ previously defined here
    9 | Operand::Operand(int value) : value_(Number(value)) { type_ = VarTypeEnum::num_t; }
      | ^~~~~~~
operand.cc: In member function ‘bool Operand::list_cmp(const Operand&) const’:
operand.cc:245:24: error: ‘any_cast’ is not a member of ‘std’
  245 |     Operand a_e = std::any_cast<Operand>(a[i]);
      |                        ^~~~~~~~
operand.cc:245:24: note: ‘std::any_cast’ is defined in header ‘<any>’; did you forget to ‘#include <any>’?
operand.cc:245:40: error: expected primary-expression before ‘>’ token
  245 |     Operand a_e = std::any_cast<Operand>(a[i]);
      |                                        ^
operand.cc:246:24: error: ‘any_cast’ is not a member of ‘std’
  246 |     Operand b_e = std::any_cast<Operand>(b[i]);
      |                        ^~~~~~~~
operand.cc:246:24: note: ‘std::any_cast’ is defined in header ‘<any>’; did you forget to ‘#include <any>’?
operand.cc:246:40: error: expected primary-expression before ‘>’ token
  246 |     Operand b_e = std::any_cast<Operand>(b[i]);
      |                                        ^
operand.cc: In function ‘std::ostream& operator<<(std::ostream&, std::vector<Operand>)’:
operand.cc:286:21: error: use of deleted function ‘Operand::Operand(const Operand&)’
  286 |   for(auto operand: operand_vector) {
      |                     ^~~~~~~~~~~~~~
In file included from operand.cc:5:
operand.hh:12:7: note: ‘Operand::Operand(const Operand&)’ is implicitly deleted because the default definition would be ill-formed:
   12 | class Operand {
      |       ^~~~~~~
operand.hh:12:7: error: use of deleted function ‘std::variant<_Types>::variant(const std::variant<_Types>&) [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
In file included from operand.cc:1:
/usr/include/c++/11/variant:1396:7: note: ‘std::variant<_Types>::variant(const std::variant<_Types>&) [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’ is implicitly deleted because the default definition would be ill-formed:
 1396 |       variant(const variant& __rhs) = default;
      |       ^~~~~~~
/usr/include/c++/11/variant:1396:7: error: use of deleted function ‘constexpr std::_Enable_copy_move<false, false, false, false, _Tag>::_Enable_copy_move(const std::_Enable_copy_move<false, false, false, false, _Tag>&) [with _Tag = std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >]’
In file included from /usr/include/c++/11/variant:38,
                 from operand.cc:1:
/usr/include/c++/11/bits/enable_special_members.h:304:15: note: declared here
  304 |     constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept  = delete;
      |               ^~~~~~~~~~~~~~~~~
operand.cc: In instantiation of ‘operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)> [with auto:22 = Tuple]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Args = {const Tuple&}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, const Tuple&>’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, const Tuple&>’
/usr/include/c++/11/type_traits:3004:12:   required from ‘struct std::invoke_result<operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, const Tuple&>’
/usr/include/c++/11/type_traits:3016:11:   required by substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Args = {const Tuple&}]’
/usr/include/c++/11/variant:1087:14:   required from ‘constexpr bool std::__detail::__variant::__check_visitor_results(std::index_sequence<_Ind ...>) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variant = const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&; long unsigned int ..._Idxs = {0, 1, 2, 3, 4, 5}; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:1751:44:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
operand.cc:281:44: error: no match for ‘operator<<’ (operand types are ‘std::ostream’ {aka ‘std::basic_ostream<char>’} and ‘const Tuple’)
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:108:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^~~~~~~~
/usr/include/c++/11/ostream:108:36: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&)’ {aka ‘std::basic_ostream<char>& (*)(std::basic_ostream<char>&)’}
  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/ostream:117:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type& (*)(std::basic_ostream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::basic_ostream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]’
  117 |       operator<<(__ios_type& (*__pf)(__ios_type&))
      |       ^~~~~~~~
/usr/include/c++/11/ostream:117:32: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘std::basic_ostream<char>::__ios_type& (*)(std::basic_ostream<char>::__ios_type&)’ {aka ‘std::basic_ios<char>& (*)(std::basic_ios<char>&)’}
  117 |       operator<<(__ios_type& (*__pf)(__ios_type&))
      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~
/usr/include/c++/11/ostream:127:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  127 |       operator<<(ios_base& (*__pf) (ios_base&))
      |       ^~~~~~~~
/usr/include/c++/11/ostream:127:30: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘std::ios_base& (*)(std::ios_base&)’
  127 |       operator<<(ios_base& (*__pf) (ios_base&))
      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
/usr/include/c++/11/ostream:166:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  166 |       operator<<(long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:166:23: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘long int’
  166 |       operator<<(long __n)
      |                  ~~~~~^~~
/usr/include/c++/11/ostream:170:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  170 |       operator<<(unsigned long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:170:32: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘long unsigned int’
  170 |       operator<<(unsigned long __n)
      |                  ~~~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:174:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(bool) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  174 |       operator<<(bool __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:174:23: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘bool’
  174 |       operator<<(bool __n)
      |                  ~~~~~^~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:91:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(short int) [with _CharT = char; _Traits = std::char_traits<char>]’
   91 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:92:22: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘short int’
   92 |     operator<<(short __n)
      |                ~~~~~~^~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:181:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(short unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  181 |       operator<<(unsigned short __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:181:33: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘short unsigned int’
  181 |       operator<<(unsigned short __n)
      |                  ~~~~~~~~~~~~~~~^~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:105:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(int) [with _CharT = char; _Traits = std::char_traits<char>]’
  105 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:106:20: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘int’
  106 |     operator<<(int __n)
      |                ~~~~^~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:192:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  192 |       operator<<(unsigned int __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:192:31: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘unsigned int’
  192 |       operator<<(unsigned int __n)
      |                  ~~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:201:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  201 |       operator<<(long long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:201:28: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘long long int’
  201 |       operator<<(long long __n)
      |                  ~~~~~~~~~~^~~
/usr/include/c++/11/ostream:205:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  205 |       operator<<(unsigned long long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:205:37: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘long long unsigned int’
  205 |       operator<<(unsigned long long __n)
      |                  ~~~~~~~~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:220:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  220 |       operator<<(double __f)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:220:25: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘double’
  220 |       operator<<(double __f)
      |                  ~~~~~~~^~~
/usr/include/c++/11/ostream:224:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(float) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  224 |       operator<<(float __f)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:224:24: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘float’
  224 |       operator<<(float __f)
      |                  ~~~~~~^~~
/usr/include/c++/11/ostream:232:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  232 |       operator<<(long double __f)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:232:30: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘long double’
  232 |       operator<<(long double __f)
      |                  ~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:245:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(const void*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  245 |       operator<<(const void* __p)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:245:30: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘const void*’
  245 |       operator<<(const void* __p)
      |                  ~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:250:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::nullptr_t) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::nullptr_t = std::nullptr_t]’
  250 |       operator<<(nullptr_t)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:250:18: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘std::nullptr_t’
  250 |       operator<<(nullptr_t)
      |                  ^~~~~~~~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:119:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]’
  119 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:120:34: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘std::basic_ostream<char>::__streambuf_type*’ {aka ‘std::basic_streambuf<char>*’}
  120 |     operator<<(__streambuf_type* __sbin)
      |                ~~~~~~~~~~~~~~~~~~^~~~~~
In file included from /usr/include/c++/11/bits/basic_string.h:48,
                 from /usr/include/c++/11/string:55,
                 from operand.cc:2:
/usr/include/c++/11/string_view:667:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::basic_string_view<_CharT, _Traits>)’
  667 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^~~~~~~~
/usr/include/c++/11/string_view:667:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   ‘Tuple’ is not derived from ‘std::basic_string_view<_CharT, _Traits>’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/string:55,
                 from operand.cc:2:
/usr/include/c++/11/bits/basic_string.h:6531:5: note: candidate: ‘template<class _CharT, class _Traits, class _Alloc> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&)’
 6531 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^~~~~~~~
/usr/include/c++/11/bits/basic_string.h:6531:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   ‘const Tuple’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Allocator>’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/bits/ios_base.h:46,
                 from /usr/include/c++/11/ios:42,
                 from /usr/include/c++/11/ostream:38,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/system_error:279:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::error_code&)’
  279 |     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
      |     ^~~~~~~~
/usr/include/c++/11/system_error:279:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘const std::error_code&’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:513:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, _CharT)’
  513 |     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:513:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   deduced conflicting types for parameter ‘_CharT’ (‘char’ and ‘Tuple’)
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:518:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, char)’
  518 |     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:518:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘char’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:524:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, char)’
  524 |     operator<<(basic_ostream<char, _Traits>& __out, char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:524:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘char’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:530:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, signed char)’
  530 |     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:530:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘signed char’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:535:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, unsigned char)’
  535 |     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:535:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘unsigned char’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:594:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const _CharT*)’
  594 |     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:594:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   mismatched types ‘const _CharT*’ and ‘Tuple’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:321:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const char*)’
  321 |     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:321:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘const char*’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:611:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*)’
  611 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:611:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘const char*’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:624:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const signed char*)’
  624 |     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:624:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘const signed char*’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:629:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const unsigned char*)’
  629 |     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:629:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘const unsigned char*’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:750:5: note: candidate: ‘template<class _Ostream, class _Tp> _Ostream&& std::operator<<(_Ostream&&, const _Tp&)’
  750 |     operator<<(_Ostream&& __os, const _Tp& __x)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:750:5: note:   template argument deduction/substitution failed:
/usr/include/c++/11/ostream: In substitution of ‘template<class _Ostream, class _Tp> _Ostream&& std::operator<<(_Ostream&&, const _Tp&) [with _Ostream = std::basic_ostream<char>&; _Tp = Tuple]’:
operand.cc:281:44:   required from ‘operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)> [with auto:22 = Tuple]’
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Args = {const Tuple&}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, const Tuple&>’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, const Tuple&>’
/usr/include/c++/11/type_traits:3004:12:   required from ‘struct std::invoke_result<operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, const Tuple&>’
/usr/include/c++/11/type_traits:3016:11:   required by substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Args = {const Tuple&}]’
/usr/include/c++/11/variant:1087:14:   required from ‘constexpr bool std::__detail::__variant::__check_visitor_results(std::index_sequence<_Ind ...>) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variant = const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&; long unsigned int ..._Idxs = {0, 1, 2, 3, 4, 5}; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:1751:44:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/ostream:750:5: error: no type named ‘type’ in ‘struct std::enable_if<false, void>’
operand.cc: In instantiation of ‘operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)> [with auto:22 = Tuple]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Args = {const Tuple&}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, const Tuple&>’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, const Tuple&>’
/usr/include/c++/11/type_traits:3004:12:   required from ‘struct std::invoke_result<operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, const Tuple&>’
/usr/include/c++/11/type_traits:3016:11:   required by substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Args = {const Tuple&}]’
/usr/include/c++/11/variant:1087:14:   required from ‘constexpr bool std::__detail::__variant::__check_visitor_results(std::index_sequence<_Ind ...>) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variant = const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&; long unsigned int ..._Idxs = {0, 1, 2, 3, 4, 5}; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:1751:44:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
operand.cc:280:15: note: candidate: ‘std::ostream& operator<<(std::ostream&, const Operand&)’
  280 | std::ostream& operator<<(std::ostream& os, const Operand& operand) {
      |               ^~~~~~~~
operand.cc:280:59: note:   no known conversion for argument 2 from ‘const Tuple’ to ‘const Operand&’
  280 | std::ostream& operator<<(std::ostream& os, const Operand& operand) {
      |                                            ~~~~~~~~~~~~~~~^~~~~~~
operand.cc:285:15: note: candidate: ‘std::ostream& operator<<(std::ostream&, std::vector<Operand>)’
  285 | std::ostream& operator<<(std::ostream& os, const std::vector<Operand> operand_vector) {
      |               ^~~~~~~~
operand.cc:285:71: note:   no known conversion for argument 2 from ‘const Tuple’ to ‘std::vector<Operand>’
  285 | std::ostream& operator<<(std::ostream& os, const std::vector<Operand> operand_vector) {
      |                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
In file included from operand.cc:1:
/usr/include/c++/11/variant: In instantiation of ‘struct std::__detail::__variant::_Never_valueless_alt<Tuple>’:
/usr/include/c++/11/variant:394:36:   required from ‘constexpr bool std::__detail::__variant::__never_valueless() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:800:57:   required from ‘struct std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’
/usr/include/c++/11/variant:805:60:   required from ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::value’
/usr/include/c++/11/variant:863:44:   required from ‘constexpr const int std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>::__do_cookie’
/usr/include/c++/11/variant:875:53:   required from ‘struct std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>’
/usr/include/c++/11/variant:1054:36:   required from ‘struct std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/variant:377:28: error: invalid application of ‘sizeof’ to incomplete type ‘Tuple’
  377 |     : __and_<bool_constant<sizeof(_Tp) <= 256>, is_trivially_copyable<_Tp>>
      |                            ^~~~~~~~~~~
/usr/include/c++/11/variant: In instantiation of ‘constexpr bool std::__detail::__variant::__never_valueless() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’:
/usr/include/c++/11/variant:800:57:   required from ‘struct std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’
/usr/include/c++/11/variant:805:60:   required from ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::value’
/usr/include/c++/11/variant:863:44:   required from ‘constexpr const int std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>::__do_cookie’
/usr/include/c++/11/variant:875:53:   required from ‘struct std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>’
/usr/include/c++/11/variant:1054:36:   required from ‘struct std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/variant:394:43: error: ‘value’ is not a member of ‘std::__detail::__variant::_Never_valueless_alt<Tuple>’
  394 |         && (_Never_valueless_alt<_Types>::value && ...);
      |                                           ^~~~~
/usr/include/c++/11/variant: In instantiation of ‘struct std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’:
/usr/include/c++/11/variant:805:60:   required from ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::value’
/usr/include/c++/11/variant:863:44:   required from ‘constexpr const int std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>::__do_cookie’
/usr/include/c++/11/variant:875:53:   required from ‘struct std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>’
/usr/include/c++/11/variant:1054:36:   required from ‘struct std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/variant:800:57:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__never_valueless<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >()’
/usr/include/c++/11/variant:799:16: error: ‘constexpr’ call flows off the end of the function
  799 |         struct _Variant_never_valueless<variant<_Types...>>
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:800:64: note: in template argument for type ‘bool’
  800 |         : bool_constant<__variant::__never_valueless<_Types...>()> {};
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/11/variant: In instantiation of ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::value’:
/usr/include/c++/11/variant:863:44:   required from ‘constexpr const int std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>::__do_cookie’
/usr/include/c++/11/variant:875:53:   required from ‘struct std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>’
/usr/include/c++/11/variant:1054:36:   required from ‘struct std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/variant:805:67: error: ‘value’ is not a member of ‘std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’
  805 |         && !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
      |                                                                   ^~~~~
/usr/include/c++/11/variant: In instantiation of ‘struct std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>’:
/usr/include/c++/11/variant:1054:36:   required from ‘struct std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/variant:875:51: error: size of array is not an integral constant-expression
  875 |       _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
      |                                           ~~~~~~~~^~~~~~~~~~~~~
/usr/include/c++/11/variant: In instantiation of ‘struct std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’:
/usr/include/c++/11/variant:805:60:   required from ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >::value’
/usr/include/c++/11/variant:942:65:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:800:57:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__never_valueless<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >()’
/usr/include/c++/11/variant:799:16: error: ‘constexpr’ call flows off the end of the function
  799 |         struct _Variant_never_valueless<variant<_Types...>>
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:800:64: note: in template argument for type ‘bool’
  800 |         : bool_constant<__variant::__never_valueless<_Types...>()> {};
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/11/variant: In instantiation of ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >::value’:
/usr/include/c++/11/variant:942:65:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/variant:805:67: error: ‘value’ is not a member of ‘std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’
  805 |         && !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
      |                                                                   ^~~~~
/usr/include/c++/11/variant: In instantiation of ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’:
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:932:26: error: ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’ called in a constant expression
  932 |         _S_apply_all_alts(
      |         ~~~~~~~~~~~~~~~~~^
  933 |           __vtable, make_index_sequence<variant_size_v<_Next>>());
      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:939:9: note: ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’ is not usable as a ‘constexpr’ function because:
  939 |         _S_apply_all_alts(_Array_type& __vtable,
      |         ^~~~~~~~~~~~~~~~~
operand.cc: In instantiation of ‘operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)> [with auto:23 = Tuple]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Args = {Tuple&}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, Tuple&>’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, Tuple&>’
/usr/include/c++/11/type_traits:3004:12:   required from ‘struct std::invoke_result<operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, Tuple&>’
/usr/include/c++/11/type_traits:3016:11:   required by substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Args = {Tuple&}]’
/usr/include/c++/11/variant:1087:14:   required from ‘constexpr bool std::__detail::__variant::__check_visitor_results(std::index_sequence<_Ind ...>) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variant = std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&; long unsigned int ..._Idxs = {0, 1, 2, 3, 4, 5}; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:1751:44:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
operand.cc:287:46: error: no match for ‘operator<<’ (operand types are ‘std::ostream’ {aka ‘std::basic_ostream<char>’} and ‘const Tuple’)
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:108:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^~~~~~~~
/usr/include/c++/11/ostream:108:36: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&)’ {aka ‘std::basic_ostream<char>& (*)(std::basic_ostream<char>&)’}
  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/ostream:117:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type& (*)(std::basic_ostream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::basic_ostream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]’
  117 |       operator<<(__ios_type& (*__pf)(__ios_type&))
      |       ^~~~~~~~
/usr/include/c++/11/ostream:117:32: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘std::basic_ostream<char>::__ios_type& (*)(std::basic_ostream<char>::__ios_type&)’ {aka ‘std::basic_ios<char>& (*)(std::basic_ios<char>&)’}
  117 |       operator<<(__ios_type& (*__pf)(__ios_type&))
      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~
/usr/include/c++/11/ostream:127:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  127 |       operator<<(ios_base& (*__pf) (ios_base&))
      |       ^~~~~~~~
/usr/include/c++/11/ostream:127:30: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘std::ios_base& (*)(std::ios_base&)’
  127 |       operator<<(ios_base& (*__pf) (ios_base&))
      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
/usr/include/c++/11/ostream:166:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  166 |       operator<<(long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:166:23: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘long int’
  166 |       operator<<(long __n)
      |                  ~~~~~^~~
/usr/include/c++/11/ostream:170:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  170 |       operator<<(unsigned long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:170:32: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘long unsigned int’
  170 |       operator<<(unsigned long __n)
      |                  ~~~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:174:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(bool) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  174 |       operator<<(bool __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:174:23: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘bool’
  174 |       operator<<(bool __n)
      |                  ~~~~~^~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:91:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(short int) [with _CharT = char; _Traits = std::char_traits<char>]’
   91 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:92:22: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘short int’
   92 |     operator<<(short __n)
      |                ~~~~~~^~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:181:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(short unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  181 |       operator<<(unsigned short __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:181:33: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘short unsigned int’
  181 |       operator<<(unsigned short __n)
      |                  ~~~~~~~~~~~~~~~^~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:105:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(int) [with _CharT = char; _Traits = std::char_traits<char>]’
  105 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:106:20: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘int’
  106 |     operator<<(int __n)
      |                ~~~~^~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:192:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  192 |       operator<<(unsigned int __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:192:31: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘unsigned int’
  192 |       operator<<(unsigned int __n)
      |                  ~~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:201:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  201 |       operator<<(long long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:201:28: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘long long int’
  201 |       operator<<(long long __n)
      |                  ~~~~~~~~~~^~~
/usr/include/c++/11/ostream:205:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  205 |       operator<<(unsigned long long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:205:37: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘long long unsigned int’
  205 |       operator<<(unsigned long long __n)
      |                  ~~~~~~~~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:220:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  220 |       operator<<(double __f)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:220:25: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘double’
  220 |       operator<<(double __f)
      |                  ~~~~~~~^~~
/usr/include/c++/11/ostream:224:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(float) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  224 |       operator<<(float __f)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:224:24: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘float’
  224 |       operator<<(float __f)
      |                  ~~~~~~^~~
/usr/include/c++/11/ostream:232:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  232 |       operator<<(long double __f)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:232:30: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘long double’
  232 |       operator<<(long double __f)
      |                  ~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:245:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(const void*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  245 |       operator<<(const void* __p)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:245:30: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘const void*’
  245 |       operator<<(const void* __p)
      |                  ~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:250:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::nullptr_t) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::nullptr_t = std::nullptr_t]’
  250 |       operator<<(nullptr_t)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:250:18: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘std::nullptr_t’
  250 |       operator<<(nullptr_t)
      |                  ^~~~~~~~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:119:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]’
  119 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:120:34: note:   no known conversion for argument 1 from ‘const Tuple’ to ‘std::basic_ostream<char>::__streambuf_type*’ {aka ‘std::basic_streambuf<char>*’}
  120 |     operator<<(__streambuf_type* __sbin)
      |                ~~~~~~~~~~~~~~~~~~^~~~~~
In file included from /usr/include/c++/11/bits/basic_string.h:48,
                 from /usr/include/c++/11/string:55,
                 from operand.cc:2:
/usr/include/c++/11/string_view:667:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::basic_string_view<_CharT, _Traits>)’
  667 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^~~~~~~~
/usr/include/c++/11/string_view:667:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   ‘Tuple’ is not derived from ‘std::basic_string_view<_CharT, _Traits>’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/string:55,
                 from operand.cc:2:
/usr/include/c++/11/bits/basic_string.h:6531:5: note: candidate: ‘template<class _CharT, class _Traits, class _Alloc> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&)’
 6531 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^~~~~~~~
/usr/include/c++/11/bits/basic_string.h:6531:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   ‘const Tuple’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Allocator>’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/bits/ios_base.h:46,
                 from /usr/include/c++/11/ios:42,
                 from /usr/include/c++/11/ostream:38,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/system_error:279:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::error_code&)’
  279 |     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
      |     ^~~~~~~~
/usr/include/c++/11/system_error:279:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘const std::error_code&’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:513:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, _CharT)’
  513 |     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:513:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   deduced conflicting types for parameter ‘_CharT’ (‘char’ and ‘Tuple’)
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:518:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, char)’
  518 |     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:518:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘char’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:524:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, char)’
  524 |     operator<<(basic_ostream<char, _Traits>& __out, char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:524:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘char’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:530:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, signed char)’
  530 |     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:530:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘signed char’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:535:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, unsigned char)’
  535 |     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:535:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘unsigned char’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:594:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const _CharT*)’
  594 |     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:594:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   mismatched types ‘const _CharT*’ and ‘Tuple’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:321:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const char*)’
  321 |     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:321:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘const char*’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:611:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*)’
  611 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:611:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘const char*’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:624:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const signed char*)’
  624 |     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:624:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘const signed char*’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:629:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const unsigned char*)’
  629 |     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:629:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const Tuple’) to type ‘const unsigned char*’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:750:5: note: candidate: ‘template<class _Ostream, class _Tp> _Ostream&& std::operator<<(_Ostream&&, const _Tp&)’
  750 |     operator<<(_Ostream&& __os, const _Tp& __x)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:750:5: note:   template argument deduction/substitution failed:
/usr/include/c++/11/ostream: In substitution of ‘template<class _Ostream, class _Tp> _Ostream&& std::operator<<(_Ostream&&, const _Tp&) [with _Ostream = std::basic_ostream<char>&; _Tp = Tuple]’:
operand.cc:287:46:   required from ‘operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)> [with auto:23 = Tuple]’
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Args = {Tuple&}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, Tuple&>’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, Tuple&>’
/usr/include/c++/11/type_traits:3004:12:   required from ‘struct std::invoke_result<operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, Tuple&>’
/usr/include/c++/11/type_traits:3016:11:   required by substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Args = {Tuple&}]’
/usr/include/c++/11/variant:1087:14:   required from ‘constexpr bool std::__detail::__variant::__check_visitor_results(std::index_sequence<_Ind ...>) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variant = std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&; long unsigned int ..._Idxs = {0, 1, 2, 3, 4, 5}; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:1751:44:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
/usr/include/c++/11/ostream:750:5: error: no type named ‘type’ in ‘struct std::enable_if<false, void>’
operand.cc: In instantiation of ‘operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)> [with auto:23 = Tuple]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Args = {Tuple&}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, Tuple&>’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, Tuple&>’
/usr/include/c++/11/type_traits:3004:12:   required from ‘struct std::invoke_result<operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, Tuple&>’
/usr/include/c++/11/type_traits:3016:11:   required by substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Args = {Tuple&}]’
/usr/include/c++/11/variant:1087:14:   required from ‘constexpr bool std::__detail::__variant::__check_visitor_results(std::index_sequence<_Ind ...>) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variant = std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&; long unsigned int ..._Idxs = {0, 1, 2, 3, 4, 5}; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:1751:44:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
operand.cc:280:15: note: candidate: ‘std::ostream& operator<<(std::ostream&, const Operand&)’
  280 | std::ostream& operator<<(std::ostream& os, const Operand& operand) {
      |               ^~~~~~~~
operand.cc:280:59: note:   no known conversion for argument 2 from ‘const Tuple’ to ‘const Operand&’
  280 | std::ostream& operator<<(std::ostream& os, const Operand& operand) {
      |                                            ~~~~~~~~~~~~~~~^~~~~~~
operand.cc:285:15: note: candidate: ‘std::ostream& operator<<(std::ostream&, std::vector<Operand>)’
  285 | std::ostream& operator<<(std::ostream& os, const std::vector<Operand> operand_vector) {
      |               ^~~~~~~~
operand.cc:285:71: note:   no known conversion for argument 2 from ‘const Tuple’ to ‘std::vector<Operand>’
  285 | std::ostream& operator<<(std::ostream& os, const std::vector<Operand> operand_vector) {
      |                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
In file included from operand.cc:1:
/usr/include/c++/11/variant: In instantiation of ‘struct std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’:
/usr/include/c++/11/variant:805:60:   required from ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::value’
/usr/include/c++/11/variant:863:44:   required from ‘constexpr const int std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>::__do_cookie’
/usr/include/c++/11/variant:875:53:   required from ‘struct std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>’
/usr/include/c++/11/variant:1054:36:   required from ‘struct std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
/usr/include/c++/11/variant:800:57:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__never_valueless<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >()’
/usr/include/c++/11/variant:799:16: error: ‘constexpr’ call flows off the end of the function
  799 |         struct _Variant_never_valueless<variant<_Types...>>
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:800:64: note: in template argument for type ‘bool’
  800 |         : bool_constant<__variant::__never_valueless<_Types...>()> {};
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/11/variant: In instantiation of ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::value’:
/usr/include/c++/11/variant:863:44:   required from ‘constexpr const int std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>::__do_cookie’
/usr/include/c++/11/variant:875:53:   required from ‘struct std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>’
/usr/include/c++/11/variant:1054:36:   required from ‘struct std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
/usr/include/c++/11/variant:805:67: error: ‘value’ is not a member of ‘std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’
  805 |         && !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
      |                                                                   ^~~~~
/usr/include/c++/11/variant: In instantiation of ‘struct std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>’:
/usr/include/c++/11/variant:1054:36:   required from ‘struct std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
/usr/include/c++/11/variant:875:51: error: size of array is not an integral constant-expression
  875 |       _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
      |                                           ~~~~~~~~^~~~~~~~~~~~~
/usr/include/c++/11/variant: In instantiation of ‘struct std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’:
/usr/include/c++/11/variant:805:60:   required from ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >::value’
/usr/include/c++/11/variant:942:65:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:800:57:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__never_valueless<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >()’
/usr/include/c++/11/variant:799:16: error: ‘constexpr’ call flows off the end of the function
  799 |         struct _Variant_never_valueless<variant<_Types...>>
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:800:64: note: in template argument for type ‘bool’
  800 |         : bool_constant<__variant::__never_valueless<_Types...>()> {};
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/11/variant: In instantiation of ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >::value’:
/usr/include/c++/11/variant:942:65:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
/usr/include/c++/11/variant:805:67: error: ‘value’ is not a member of ‘std::__detail::__variant::_Extra_visit_slot_needed<std::__detail::__variant::__deduce_visit_result<void>, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’
  805 |         && !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
      |                                                                   ^~~~~
/usr/include/c++/11/variant: In instantiation of ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’:
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:932:26: error: ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’ called in a constant expression
  932 |         _S_apply_all_alts(
      |         ~~~~~~~~~~~~~~~~~^
  933 |           __vtable, make_index_sequence<variant_size_v<_Next>>());
      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:939:9: note: ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’ is not usable as a ‘constexpr’ function because:
  939 |         _S_apply_all_alts(_Array_type& __vtable,
      |         ^~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant: In instantiation of ‘constexpr bool std::__detail::__variant::_Variant_storage<false, _Types ...>::_M_valid() const [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’:
/usr/include/c++/11/variant:424:15:   required from ‘void std::__detail::__variant::_Variant_storage<false, _Types ...>::_M_reset() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:436:9:   required from ‘std::__detail::__variant::_Variant_storage<false, _Types ...>::~_Variant_storage() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:511:12:   required from here
/usr/include/c++/11/variant:441:55:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__never_valueless<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >()’
/usr/include/c++/11/variant:441:9: error: ‘constexpr’ call flows off the end of the function
  441 |         if constexpr (__variant::__never_valueless<_Types...>())
      |         ^~
/usr/include/c++/11/variant: In instantiation of ‘struct std::__detail::__variant::_Extra_visit_slot_needed<void, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’:
/usr/include/c++/11/variant:805:60:   required from ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<void, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::value’
/usr/include/c++/11/variant:863:44:   required from ‘constexpr const int std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>::__do_cookie’
/usr/include/c++/11/variant:875:53:   required from ‘struct std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>’
/usr/include/c++/11/variant:1054:36:   required from ‘struct std::__detail::__variant::__gen_vtable<void, std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:427:23:   required from ‘void std::__detail::__variant::_Variant_storage<false, _Types ...>::_M_reset() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:436:9:   required from ‘std::__detail::__variant::_Variant_storage<false, _Types ...>::~_Variant_storage() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:511:12:   required from here
/usr/include/c++/11/variant:800:57:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__never_valueless<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >()’
/usr/include/c++/11/variant:799:16: error: ‘constexpr’ call flows off the end of the function
  799 |         struct _Variant_never_valueless<variant<_Types...>>
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:800:64: note: in template argument for type ‘bool’
  800 |         : bool_constant<__variant::__never_valueless<_Types...>()> {};
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/11/variant: In instantiation of ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<void, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::value’:
/usr/include/c++/11/variant:863:44:   required from ‘constexpr const int std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>::__do_cookie’
/usr/include/c++/11/variant:875:53:   required from ‘struct std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>’
/usr/include/c++/11/variant:1054:36:   required from ‘struct std::__detail::__variant::__gen_vtable<void, std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:427:23:   required from ‘void std::__detail::__variant::_Variant_storage<false, _Types ...>::_M_reset() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:436:9:   required from ‘std::__detail::__variant::_Variant_storage<false, _Types ...>::~_Variant_storage() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:511:12:   required from here
/usr/include/c++/11/variant:805:67: error: ‘value’ is not a member of ‘std::__detail::__variant::_Extra_visit_slot_needed<void, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’
  805 |         && !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
      |                                                                   ^~~~~
/usr/include/c++/11/variant: In instantiation of ‘struct std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>’:
/usr/include/c++/11/variant:1054:36:   required from ‘struct std::__detail::__variant::__gen_vtable<void, std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:427:23:   required from ‘void std::__detail::__variant::_Variant_storage<false, _Types ...>::_M_reset() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:436:9:   required from ‘std::__detail::__variant::_Variant_storage<false, _Types ...>::~_Variant_storage() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:511:12:   required from here
/usr/include/c++/11/variant:875:51: error: size of array is not an integral constant-expression
  875 |       _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
      |                                           ~~~~~~~~^~~~~~~~~~~~~
/usr/include/c++/11/variant: In instantiation of ‘struct std::__detail::__variant::_Extra_visit_slot_needed<void, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’:
/usr/include/c++/11/variant:805:60:   required from ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<void, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >::value’
/usr/include/c++/11/variant:942:65:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<void, std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:427:23:   required from ‘void std::__detail::__variant::_Variant_storage<false, _Types ...>::_M_reset() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:436:9:   required from ‘std::__detail::__variant::_Variant_storage<false, _Types ...>::~_Variant_storage() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:511:12:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:800:57:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__never_valueless<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >()’
/usr/include/c++/11/variant:799:16: error: ‘constexpr’ call flows off the end of the function
  799 |         struct _Variant_never_valueless<variant<_Types...>>
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:800:64: note: in template argument for type ‘bool’
  800 |         : bool_constant<__variant::__never_valueless<_Types...>()> {};
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/11/variant: In instantiation of ‘constexpr const bool std::__detail::__variant::_Extra_visit_slot_needed<void, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >::value’:
/usr/include/c++/11/variant:942:65:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<void, std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:427:23:   required from ‘void std::__detail::__variant::_Variant_storage<false, _Types ...>::_M_reset() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:436:9:   required from ‘std::__detail::__variant::_Variant_storage<false, _Types ...>::~_Variant_storage() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:511:12:   required from here
/usr/include/c++/11/variant:805:67: error: ‘value’ is not a member of ‘std::__detail::__variant::_Extra_visit_slot_needed<void, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >::_Variant_never_valueless<std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > > >’
  805 |         && !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
      |                                                                   ^~~~~
/usr/include/c++/11/variant: In instantiation of ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<void, std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’:
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:427:23:   required from ‘void std::__detail::__variant::_Variant_storage<false, _Types ...>::_M_reset() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:436:9:   required from ‘std::__detail::__variant::_Variant_storage<false, _Types ...>::~_Variant_storage() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:511:12:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:932:26: error: ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’ called in a constant expression
  932 |         _S_apply_all_alts(
      |         ~~~~~~~~~~~~~~~~~^
  933 |           __vtable, make_index_sequence<variant_size_v<_Next>>());
      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:939:9: note: ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’ is not usable as a ‘constexpr’ function because:
  939 |         _S_apply_all_alts(_Array_type& __vtable,
      |         ^~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant: In instantiation of ‘constexpr std::size_t std::variant<_Types>::index() const [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}; std::size_t = long unsigned int]’:
/usr/include/c++/11/variant:1702:20:   required from ‘constexpr std::variant_alternative_t<_Np, std::variant<_Types ...> >& std::get(const std::variant<_Types ...>&) [with long unsigned int _Np = 1; _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}; std::variant_alternative_t<_Np, std::variant<_Types ...> > = Number]’
/usr/include/c++/11/variant:1141:73:   required from ‘constexpr const _Tp& std::get(const std::variant<_Types ...>&) [with _Tp = Number; _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
operand.cc:30:36:   required from here
/usr/include/c++/11/variant:1593:65:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__never_valueless<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >()’
/usr/include/c++/11/variant:1593:9: error: ‘constexpr’ call flows off the end of the function
 1593 |         if constexpr (__detail::__variant::__never_valueless<_Types...>())
      |         ^~
operand.cc: In instantiation of ‘operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)> [with auto:22 = std::__detail::__variant::__variant_cookie]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Args = {std::__detail::__variant::__variant_cookie}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, std::__detail::__variant::__variant_cookie>’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, std::__detail::__variant::__variant_cookie>’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Args = {std::__detail::__variant::__variant_cookie}]’
/usr/include/c++/11/variant:1016:24:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:962:61:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 0; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
operand.cc:281:44: error: no match for ‘operator<<’ (operand types are ‘std::ostream’ {aka ‘std::basic_ostream<char>’} and ‘const std::__detail::__variant::__variant_cookie’)
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:108:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^~~~~~~~
/usr/include/c++/11/ostream:108:36: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&)’ {aka ‘std::basic_ostream<char>& (*)(std::basic_ostream<char>&)’}
  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/ostream:117:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type& (*)(std::basic_ostream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::basic_ostream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]’
  117 |       operator<<(__ios_type& (*__pf)(__ios_type&))
      |       ^~~~~~~~
/usr/include/c++/11/ostream:117:32: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘std::basic_ostream<char>::__ios_type& (*)(std::basic_ostream<char>::__ios_type&)’ {aka ‘std::basic_ios<char>& (*)(std::basic_ios<char>&)’}
  117 |       operator<<(__ios_type& (*__pf)(__ios_type&))
      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~
/usr/include/c++/11/ostream:127:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  127 |       operator<<(ios_base& (*__pf) (ios_base&))
      |       ^~~~~~~~
/usr/include/c++/11/ostream:127:30: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘std::ios_base& (*)(std::ios_base&)’
  127 |       operator<<(ios_base& (*__pf) (ios_base&))
      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
/usr/include/c++/11/ostream:166:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  166 |       operator<<(long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:166:23: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘long int’
  166 |       operator<<(long __n)
      |                  ~~~~~^~~
/usr/include/c++/11/ostream:170:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  170 |       operator<<(unsigned long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:170:32: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘long unsigned int’
  170 |       operator<<(unsigned long __n)
      |                  ~~~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:174:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(bool) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  174 |       operator<<(bool __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:174:23: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘bool’
  174 |       operator<<(bool __n)
      |                  ~~~~~^~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:91:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(short int) [with _CharT = char; _Traits = std::char_traits<char>]’
   91 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:92:22: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘short int’
   92 |     operator<<(short __n)
      |                ~~~~~~^~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:181:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(short unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  181 |       operator<<(unsigned short __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:181:33: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘short unsigned int’
  181 |       operator<<(unsigned short __n)
      |                  ~~~~~~~~~~~~~~~^~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:105:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(int) [with _CharT = char; _Traits = std::char_traits<char>]’
  105 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:106:20: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘int’
  106 |     operator<<(int __n)
      |                ~~~~^~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:192:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  192 |       operator<<(unsigned int __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:192:31: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘unsigned int’
  192 |       operator<<(unsigned int __n)
      |                  ~~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:201:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  201 |       operator<<(long long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:201:28: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘long long int’
  201 |       operator<<(long long __n)
      |                  ~~~~~~~~~~^~~
/usr/include/c++/11/ostream:205:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  205 |       operator<<(unsigned long long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:205:37: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘long long unsigned int’
  205 |       operator<<(unsigned long long __n)
      |                  ~~~~~~~~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:220:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  220 |       operator<<(double __f)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:220:25: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘double’
  220 |       operator<<(double __f)
      |                  ~~~~~~~^~~
/usr/include/c++/11/ostream:224:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(float) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  224 |       operator<<(float __f)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:224:24: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘float’
  224 |       operator<<(float __f)
      |                  ~~~~~~^~~
/usr/include/c++/11/ostream:232:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  232 |       operator<<(long double __f)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:232:30: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘long double’
  232 |       operator<<(long double __f)
      |                  ~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:245:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(const void*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  245 |       operator<<(const void* __p)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:245:30: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘const void*’
  245 |       operator<<(const void* __p)
      |                  ~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:250:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::nullptr_t) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::nullptr_t = std::nullptr_t]’
  250 |       operator<<(nullptr_t)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:250:18: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘std::nullptr_t’
  250 |       operator<<(nullptr_t)
      |                  ^~~~~~~~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:119:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]’
  119 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:120:34: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘std::basic_ostream<char>::__streambuf_type*’ {aka ‘std::basic_streambuf<char>*’}
  120 |     operator<<(__streambuf_type* __sbin)
      |                ~~~~~~~~~~~~~~~~~~^~~~~~
In file included from /usr/include/c++/11/bits/basic_string.h:48,
                 from /usr/include/c++/11/string:55,
                 from operand.cc:2:
/usr/include/c++/11/string_view:667:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::basic_string_view<_CharT, _Traits>)’
  667 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^~~~~~~~
/usr/include/c++/11/string_view:667:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   ‘std::__detail::__variant::__variant_cookie’ is not derived from ‘std::basic_string_view<_CharT, _Traits>’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/string:55,
                 from operand.cc:2:
/usr/include/c++/11/bits/basic_string.h:6531:5: note: candidate: ‘template<class _CharT, class _Traits, class _Alloc> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&)’
 6531 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^~~~~~~~
/usr/include/c++/11/bits/basic_string.h:6531:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   ‘const std::__detail::__variant::__variant_cookie’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Allocator>’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/bits/ios_base.h:46,
                 from /usr/include/c++/11/ios:42,
                 from /usr/include/c++/11/ostream:38,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/system_error:279:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::error_code&)’
  279 |     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
      |     ^~~~~~~~
/usr/include/c++/11/system_error:279:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘const std::error_code&’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:513:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, _CharT)’
  513 |     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:513:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   deduced conflicting types for parameter ‘_CharT’ (‘char’ and ‘std::__detail::__variant::__variant_cookie’)
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:518:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, char)’
  518 |     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:518:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘char’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:524:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, char)’
  524 |     operator<<(basic_ostream<char, _Traits>& __out, char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:524:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘char’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:530:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, signed char)’
  530 |     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:530:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘signed char’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:535:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, unsigned char)’
  535 |     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:535:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘unsigned char’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:594:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const _CharT*)’
  594 |     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:594:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   mismatched types ‘const _CharT*’ and ‘std::__detail::__variant::__variant_cookie’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:321:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const char*)’
  321 |     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:321:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘const char*’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:611:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*)’
  611 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:611:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘const char*’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:624:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const signed char*)’
  624 |     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:624:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘const signed char*’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:629:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const unsigned char*)’
  629 |     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:629:5: note:   template argument deduction/substitution failed:
operand.cc:281:44: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘const unsigned char*’
  281 |   std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                         ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:750:5: note: candidate: ‘template<class _Ostream, class _Tp> _Ostream&& std::operator<<(_Ostream&&, const _Tp&)’
  750 |     operator<<(_Ostream&& __os, const _Tp& __x)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:750:5: note:   template argument deduction/substitution failed:
/usr/include/c++/11/ostream: In substitution of ‘template<class _Ostream, class _Tp> _Ostream&& std::operator<<(_Ostream&&, const _Tp&) [with _Ostream = std::basic_ostream<char>&; _Tp = std::__detail::__variant::__variant_cookie]’:
operand.cc:281:44:   required from ‘operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)> [with auto:22 = std::__detail::__variant::__variant_cookie]’
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Args = {std::__detail::__variant::__variant_cookie}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, std::__detail::__variant::__variant_cookie>’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, std::__detail::__variant::__variant_cookie>’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Args = {std::__detail::__variant::__variant_cookie}]’
/usr/include/c++/11/variant:1016:24:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:962:61:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 0; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/ostream:750:5: error: no type named ‘type’ in ‘struct std::enable_if<false, void>’
operand.cc: In instantiation of ‘operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)> [with auto:22 = std::__detail::__variant::__variant_cookie]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Args = {std::__detail::__variant::__variant_cookie}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, std::__detail::__variant::__variant_cookie>’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>, std::__detail::__variant::__variant_cookie>’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Args = {std::__detail::__variant::__variant_cookie}]’
/usr/include/c++/11/variant:1016:24:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:962:61:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 0; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
operand.cc:280:15: note: candidate: ‘std::ostream& operator<<(std::ostream&, const Operand&)’
  280 | std::ostream& operator<<(std::ostream& os, const Operand& operand) {
      |               ^~~~~~~~
operand.cc:280:59: note:   no known conversion for argument 2 from ‘const std::__detail::__variant::__variant_cookie’ to ‘const Operand&’
  280 | std::ostream& operator<<(std::ostream& os, const Operand& operand) {
      |                                            ~~~~~~~~~~~~~~~^~~~~~~
In file included from operand.cc:1:
/usr/include/c++/11/variant: In instantiation of ‘constexpr decltype(auto) std::__detail::__variant::__get(std::in_place_index_t<0>, _Union&&) [with _Union = const std::__detail::__variant::_Variadic_union<Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&]’:
/usr/include/c++/11/variant:291:30:   recursively required from ‘constexpr decltype(auto) std::__detail::__variant::__get(std::in_place_index_t<_Idx>, _Union&&) [with long unsigned int _Np = 2; _Union = const std::__detail::__variant::_Variadic_union<Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&]’
/usr/include/c++/11/variant:291:30:   required from ‘constexpr decltype(auto) std::__detail::__variant::__get(std::in_place_index_t<_Idx>, _Union&&) [with long unsigned int _Np = 3; _Union = const std::__detail::__variant::_Variadic_union<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&]’
/usr/include/c++/11/variant:300:30:   required from ‘constexpr decltype(auto) std::__detail::__variant::__get(_Variant&&) [with long unsigned int _Np = 3; _Variant = const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&]’
/usr/include/c++/11/variant:994:38:   required from ‘static constexpr decltype(auto) std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::__element_by_index_or_cookie(_Variant&&) [with long unsigned int __index = 3; _Variant = const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {3}]’
/usr/include/c++/11/variant:1017:47:   required from ‘static constexpr decltype(auto) std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::__visit_invoke(_Visitor&&, _Variants ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {3}]’
/usr/include/c++/11/variant:1032:28:   required from ‘static constexpr auto std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply() [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {3}]’
/usr/include/c++/11/variant:959:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 3; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/variant:285:40: error: ‘const union std::__detail::__variant::_Variadic_union<Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’ has no member named ‘_M_first’
  285 |     { return std::forward<_Union>(__u)._M_first._M_get(); }
      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~
/usr/include/c++/11/variant: In instantiation of ‘static constexpr auto std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply() [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {3}]’:
/usr/include/c++/11/variant:959:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 3; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/variant:1040:49: error: invalid conversion from ‘decltype(auto) (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)’ to ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::__untag_result<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::element_type’ {aka ‘void (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)’} [-fpermissive]
 1040 |               return _Array_type{&__visit_invoke};
      |                                                 ^
      |                                                 |
      |                                                 decltype(auto) (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)
/usr/include/c++/11/variant:1040:49: error: inconsistent deduction for auto return type: ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’ and then ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>’
/usr/include/c++/11/variant:1040:49: error: no matching function for call to ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match::__cannot_match(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_Array_type)’
/usr/include/c++/11/variant:1036:24: note: candidate: ‘constexpr std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match::__cannot_match()’
 1036 |                 struct __cannot_match {};
      |                        ^~~~~~~~~~~~~~
/usr/include/c++/11/variant:1036:24: note:   candidate expects 0 arguments, 1 provided
/usr/include/c++/11/variant:1036:24: note: candidate: ‘constexpr std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match::__cannot_match(const std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match&)’
/usr/include/c++/11/variant:1036:24: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_Array_type’ to ‘const std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match&’
/usr/include/c++/11/variant:1036:24: note: candidate: ‘constexpr std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match::__cannot_match(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match&&)’
/usr/include/c++/11/variant:1036:24: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_Array_type’ to ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match&&’
/usr/include/c++/11/variant: In instantiation of ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 3; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’:
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/variant:957:25: error: no match for ‘operator=’ (operand types are ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>’ and ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’)
  957 |               __element = __gen_vtable_impl<
      |               ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~
  958 |                 _Tp,
      |                 ~~~~     
  959 |                 std::index_sequence<__indices..., __index>>::_S_apply();
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:814:12: note: candidate: ‘constexpr std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>& std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::operator=(const std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&)’
  814 |     struct _Multi_array<_Tp>
      |            ^~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:814:12: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’ to ‘const std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&’
/usr/include/c++/11/variant:814:12: note: candidate: ‘constexpr std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>& std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::operator=(std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&&)’
/usr/include/c++/11/variant:814:12: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’ to ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&&’
/usr/include/c++/11/variant: In instantiation of ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = false; long unsigned int __index = 3; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’:
/usr/include/c++/11/variant:947:48:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:281:13:   required from here
/usr/include/c++/11/variant:969:29: error: static assertion failed: std::visit requires the visitor to have the same return type for all alternatives of a variant
  969 |               static_assert(is_same_v<_Tp, decltype(__tmp_element)>,
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:969:29: note: ‘std::is_same_v<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match>’ evaluates to false
/usr/include/c++/11/variant:972:25: error: no match for ‘operator=’ (operand types are ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>’ and ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’)
  972 |               __element = __tmp_element;
      |               ~~~~~~~~~~^~~~~~~~~~~~~~~
/usr/include/c++/11/variant:814:12: note: candidate: ‘constexpr std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>& std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::operator=(const std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&)’
  814 |     struct _Multi_array<_Tp>
      |            ^~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:814:12: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’ to ‘const std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&’
/usr/include/c++/11/variant:814:12: note: candidate: ‘constexpr std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>& std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::operator=(std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&&)’
/usr/include/c++/11/variant:814:12: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’ to ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, const Operand&)::<lambda(const auto:22&)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&&’
operand.cc: In instantiation of ‘operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)> [with auto:23 = std::__detail::__variant::__variant_cookie]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Args = {std::__detail::__variant::__variant_cookie}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, std::__detail::__variant::__variant_cookie>’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, std::__detail::__variant::__variant_cookie>’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Args = {std::__detail::__variant::__variant_cookie}]’
/usr/include/c++/11/variant:1016:24:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:962:61:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 0; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
operand.cc:287:46: error: no match for ‘operator<<’ (operand types are ‘std::ostream’ {aka ‘std::basic_ostream<char>’} and ‘const std::__detail::__variant::__variant_cookie’)
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:108:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^~~~~~~~
/usr/include/c++/11/ostream:108:36: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&)’ {aka ‘std::basic_ostream<char>& (*)(std::basic_ostream<char>&)’}
  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/ostream:117:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type& (*)(std::basic_ostream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::basic_ostream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]’
  117 |       operator<<(__ios_type& (*__pf)(__ios_type&))
      |       ^~~~~~~~
/usr/include/c++/11/ostream:117:32: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘std::basic_ostream<char>::__ios_type& (*)(std::basic_ostream<char>::__ios_type&)’ {aka ‘std::basic_ios<char>& (*)(std::basic_ios<char>&)’}
  117 |       operator<<(__ios_type& (*__pf)(__ios_type&))
      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~
/usr/include/c++/11/ostream:127:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  127 |       operator<<(ios_base& (*__pf) (ios_base&))
      |       ^~~~~~~~
/usr/include/c++/11/ostream:127:30: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘std::ios_base& (*)(std::ios_base&)’
  127 |       operator<<(ios_base& (*__pf) (ios_base&))
      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
/usr/include/c++/11/ostream:166:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  166 |       operator<<(long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:166:23: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘long int’
  166 |       operator<<(long __n)
      |                  ~~~~~^~~
/usr/include/c++/11/ostream:170:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  170 |       operator<<(unsigned long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:170:32: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘long unsigned int’
  170 |       operator<<(unsigned long __n)
      |                  ~~~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:174:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(bool) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  174 |       operator<<(bool __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:174:23: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘bool’
  174 |       operator<<(bool __n)
      |                  ~~~~~^~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:91:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(short int) [with _CharT = char; _Traits = std::char_traits<char>]’
   91 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:92:22: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘short int’
   92 |     operator<<(short __n)
      |                ~~~~~~^~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:181:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(short unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  181 |       operator<<(unsigned short __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:181:33: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘short unsigned int’
  181 |       operator<<(unsigned short __n)
      |                  ~~~~~~~~~~~~~~~^~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:105:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(int) [with _CharT = char; _Traits = std::char_traits<char>]’
  105 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:106:20: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘int’
  106 |     operator<<(int __n)
      |                ~~~~^~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:192:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  192 |       operator<<(unsigned int __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:192:31: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘unsigned int’
  192 |       operator<<(unsigned int __n)
      |                  ~~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:201:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  201 |       operator<<(long long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:201:28: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘long long int’
  201 |       operator<<(long long __n)
      |                  ~~~~~~~~~~^~~
/usr/include/c++/11/ostream:205:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  205 |       operator<<(unsigned long long __n)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:205:37: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘long long unsigned int’
  205 |       operator<<(unsigned long long __n)
      |                  ~~~~~~~~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:220:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  220 |       operator<<(double __f)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:220:25: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘double’
  220 |       operator<<(double __f)
      |                  ~~~~~~~^~~
/usr/include/c++/11/ostream:224:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(float) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  224 |       operator<<(float __f)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:224:24: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘float’
  224 |       operator<<(float __f)
      |                  ~~~~~~^~~
/usr/include/c++/11/ostream:232:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  232 |       operator<<(long double __f)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:232:30: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘long double’
  232 |       operator<<(long double __f)
      |                  ~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:245:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(const void*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  245 |       operator<<(const void* __p)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:245:30: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘const void*’
  245 |       operator<<(const void* __p)
      |                  ~~~~~~~~~~~~^~~
/usr/include/c++/11/ostream:250:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::nullptr_t) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::nullptr_t = std::nullptr_t]’
  250 |       operator<<(nullptr_t)
      |       ^~~~~~~~
/usr/include/c++/11/ostream:250:18: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘std::nullptr_t’
  250 |       operator<<(nullptr_t)
      |                  ^~~~~~~~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:119:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]’
  119 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:120:34: note:   no known conversion for argument 1 from ‘const std::__detail::__variant::__variant_cookie’ to ‘std::basic_ostream<char>::__streambuf_type*’ {aka ‘std::basic_streambuf<char>*’}
  120 |     operator<<(__streambuf_type* __sbin)
      |                ~~~~~~~~~~~~~~~~~~^~~~~~
In file included from /usr/include/c++/11/bits/basic_string.h:48,
                 from /usr/include/c++/11/string:55,
                 from operand.cc:2:
/usr/include/c++/11/string_view:667:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::basic_string_view<_CharT, _Traits>)’
  667 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^~~~~~~~
/usr/include/c++/11/string_view:667:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   ‘std::__detail::__variant::__variant_cookie’ is not derived from ‘std::basic_string_view<_CharT, _Traits>’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/string:55,
                 from operand.cc:2:
/usr/include/c++/11/bits/basic_string.h:6531:5: note: candidate: ‘template<class _CharT, class _Traits, class _Alloc> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&)’
 6531 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^~~~~~~~
/usr/include/c++/11/bits/basic_string.h:6531:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   ‘const std::__detail::__variant::__variant_cookie’ is not derived from ‘const std::__cxx11::basic_string<_CharT, _Traits, _Allocator>’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/bits/ios_base.h:46,
                 from /usr/include/c++/11/ios:42,
                 from /usr/include/c++/11/ostream:38,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/system_error:279:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::error_code&)’
  279 |     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
      |     ^~~~~~~~
/usr/include/c++/11/system_error:279:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘const std::error_code&’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:513:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, _CharT)’
  513 |     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:513:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   deduced conflicting types for parameter ‘_CharT’ (‘char’ and ‘std::__detail::__variant::__variant_cookie’)
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:518:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, char)’
  518 |     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:518:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘char’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:524:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, char)’
  524 |     operator<<(basic_ostream<char, _Traits>& __out, char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:524:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘char’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:530:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, signed char)’
  530 |     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:530:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘signed char’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:535:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, unsigned char)’
  535 |     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:535:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘unsigned char’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:594:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const _CharT*)’
  594 |     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:594:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   mismatched types ‘const _CharT*’ and ‘std::__detail::__variant::__variant_cookie’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/ostream:829,
                 from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/bits/ostream.tcc:321:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const char*)’
  321 |     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/bits/ostream.tcc:321:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘const char*’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:611:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*)’
  611 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:611:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘const char*’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:624:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const signed char*)’
  624 |     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:624:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘const signed char*’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:629:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const unsigned char*)’
  629 |     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:629:5: note:   template argument deduction/substitution failed:
operand.cc:287:46: note:   cannot convert ‘value’ (type ‘const std::__detail::__variant::__variant_cookie’) to type ‘const unsigned char*’
  287 |     std::visit([&os](const auto& value) { os << value; }, operand.value_);
      |                                           ~~~^~~~~~~~
In file included from /usr/include/c++/11/iostream:39,
                 from operand.cc:4:
/usr/include/c++/11/ostream:750:5: note: candidate: ‘template<class _Ostream, class _Tp> _Ostream&& std::operator<<(_Ostream&&, const _Tp&)’
  750 |     operator<<(_Ostream&& __os, const _Tp& __x)
      |     ^~~~~~~~
/usr/include/c++/11/ostream:750:5: note:   template argument deduction/substitution failed:
/usr/include/c++/11/ostream: In substitution of ‘template<class _Ostream, class _Tp> _Ostream&& std::operator<<(_Ostream&&, const _Tp&) [with _Ostream = std::basic_ostream<char>&; _Tp = std::__detail::__variant::__variant_cookie]’:
operand.cc:287:46:   required from ‘operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)> [with auto:23 = std::__detail::__variant::__variant_cookie]’
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Args = {std::__detail::__variant::__variant_cookie}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, std::__detail::__variant::__variant_cookie>’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, std::__detail::__variant::__variant_cookie>’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Args = {std::__detail::__variant::__variant_cookie}]’
/usr/include/c++/11/variant:1016:24:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:962:61:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 0; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
/usr/include/c++/11/ostream:750:5: error: no type named ‘type’ in ‘struct std::enable_if<false, void>’
operand.cc: In instantiation of ‘operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)> [with auto:23 = std::__detail::__variant::__variant_cookie]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Args = {std::__detail::__variant::__variant_cookie}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, std::__detail::__variant::__variant_cookie>’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>, std::__detail::__variant::__variant_cookie>’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Args = {std::__detail::__variant::__variant_cookie}]’
/usr/include/c++/11/variant:1016:24:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:962:61:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 0; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
operand.cc:280:15: note: candidate: ‘std::ostream& operator<<(std::ostream&, const Operand&)’
  280 | std::ostream& operator<<(std::ostream& os, const Operand& operand) {
      |               ^~~~~~~~
operand.cc:280:59: note:   no known conversion for argument 2 from ‘const std::__detail::__variant::__variant_cookie’ to ‘const Operand&’
  280 | std::ostream& operator<<(std::ostream& os, const Operand& operand) {
      |                                            ~~~~~~~~~~~~~~~^~~~~~~
operand.cc:285:15: note: candidate: ‘std::ostream& operator<<(std::ostream&, std::vector<Operand>)’
  285 | std::ostream& operator<<(std::ostream& os, const std::vector<Operand> operand_vector) {
      |               ^~~~~~~~
operand.cc:285:71: note:   no known conversion for argument 2 from ‘const std::__detail::__variant::__variant_cookie’ to ‘std::vector<Operand>’
  285 | std::ostream& operator<<(std::ostream& os, const std::vector<Operand> operand_vector) {
      |                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
In file included from operand.cc:1:
/usr/include/c++/11/variant: In instantiation of ‘constexpr decltype(auto) std::__detail::__variant::__get(std::in_place_index_t<0>, _Union&&) [with _Union = std::__detail::__variant::_Variadic_union<Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&]’:
/usr/include/c++/11/variant:291:30:   recursively required from ‘constexpr decltype(auto) std::__detail::__variant::__get(std::in_place_index_t<_Idx>, _Union&&) [with long unsigned int _Np = 2; _Union = std::__detail::__variant::_Variadic_union<Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&]’
/usr/include/c++/11/variant:291:30:   required from ‘constexpr decltype(auto) std::__detail::__variant::__get(std::in_place_index_t<_Idx>, _Union&&) [with long unsigned int _Np = 3; _Union = std::__detail::__variant::_Variadic_union<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&]’
/usr/include/c++/11/variant:300:30:   required from ‘constexpr decltype(auto) std::__detail::__variant::__get(_Variant&&) [with long unsigned int _Np = 3; _Variant = std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&]’
/usr/include/c++/11/variant:994:38:   required from ‘static constexpr decltype(auto) std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::__element_by_index_or_cookie(_Variant&&) [with long unsigned int __index = 3; _Variant = std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {3}]’
/usr/include/c++/11/variant:1017:47:   required from ‘static constexpr decltype(auto) std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::__visit_invoke(_Visitor&&, _Variants ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {3}]’
/usr/include/c++/11/variant:1032:28:   required from ‘static constexpr auto std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply() [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {3}]’
/usr/include/c++/11/variant:959:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 3; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
/usr/include/c++/11/variant:285:40: error: ‘union std::__detail::__variant::_Variadic_union<Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >’ has no member named ‘_M_first’
  285 |     { return std::forward<_Union>(__u)._M_first._M_get(); }
      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~
/usr/include/c++/11/variant: In instantiation of ‘static constexpr auto std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply() [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {3}]’:
/usr/include/c++/11/variant:959:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 3; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
/usr/include/c++/11/variant:1040:49: error: invalid conversion from ‘decltype(auto) (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)’ to ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::__untag_result<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::element_type’ {aka ‘void (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)’} [-fpermissive]
 1040 |               return _Array_type{&__visit_invoke};
      |                                                 ^
      |                                                 |
      |                                                 decltype(auto) (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)
/usr/include/c++/11/variant:1040:49: error: inconsistent deduction for auto return type: ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’ and then ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>’
/usr/include/c++/11/variant:1040:49: error: no matching function for call to ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match::__cannot_match(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_Array_type)’
/usr/include/c++/11/variant:1036:24: note: candidate: ‘constexpr std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match::__cannot_match()’
 1036 |                 struct __cannot_match {};
      |                        ^~~~~~~~~~~~~~
/usr/include/c++/11/variant:1036:24: note:   candidate expects 0 arguments, 1 provided
/usr/include/c++/11/variant:1036:24: note: candidate: ‘constexpr std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match::__cannot_match(const std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match&)’
/usr/include/c++/11/variant:1036:24: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_Array_type’ to ‘const std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match&’
/usr/include/c++/11/variant:1036:24: note: candidate: ‘constexpr std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match::__cannot_match(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match&&)’
/usr/include/c++/11/variant:1036:24: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_Array_type’ to ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match&&’
/usr/include/c++/11/variant: In instantiation of ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 3; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’:
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
/usr/include/c++/11/variant:957:25: error: no match for ‘operator=’ (operand types are ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>’ and ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’)
  957 |               __element = __gen_vtable_impl<
      |               ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~
  958 |                 _Tp,
      |                 ~~~~     
  959 |                 std::index_sequence<__indices..., __index>>::_S_apply();
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:814:12: note: candidate: ‘constexpr std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>& std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::operator=(const std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&)’
  814 |     struct _Multi_array<_Tp>
      |            ^~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:814:12: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’ to ‘const std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&’
/usr/include/c++/11/variant:814:12: note: candidate: ‘constexpr std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>& std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::operator=(std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&&)’
/usr/include/c++/11/variant:814:12: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’ to ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&&’
/usr/include/c++/11/variant: In instantiation of ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = false; long unsigned int __index = 3; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’:
/usr/include/c++/11/variant:947:48:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__deduce_visit_result<void>, operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__deduce_visit_result<void>; _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:1761:34:   required from ‘constexpr std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> std::visit(_Visitor&&, _Variants&& ...) [with _Visitor = operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; std::__detail::__variant::__visit_result_t<_Visitor, _Variants ...> = void]’
operand.cc:287:15:   required from here
/usr/include/c++/11/variant:969:29: error: static assertion failed: std::visit requires the visitor to have the same return type for all alternatives of a variant
  969 |               static_assert(is_same_v<_Tp, decltype(__tmp_element)>,
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:969:29: note: ‘std::is_same_v<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match>’ evaluates to false
/usr/include/c++/11/variant:972:25: error: no match for ‘operator=’ (operand types are ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>’ and ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’)
  972 |               __element = __tmp_element;
      |               ~~~~~~~~~~^~~~~~~~~~~~~~~
/usr/include/c++/11/variant:814:12: note: candidate: ‘constexpr std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>& std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::operator=(const std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&)’
  814 |     struct _Multi_array<_Tp>
      |            ^~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:814:12: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’ to ‘const std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&’
/usr/include/c++/11/variant:814:12: note: candidate: ‘constexpr std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>& std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::operator=(std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&&)’
/usr/include/c++/11/variant:814:12: note:   no known conversion for argument 1 from ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>, std::integer_sequence<long unsigned int, 3> >::_S_apply()::__cannot_match’ to ‘std::__detail::__variant::_Multi_array<std::__detail::__variant::__deduce_visit_result<void> (*)(operator<<(std::ostream&, std::vector<Operand>)::<lambda(const auto:23&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>&&’
/usr/include/c++/11/variant: In instantiation of ‘constexpr decltype(auto) std::__detail::__variant::__get(std::in_place_index_t<_Idx>, _Union&&) [with long unsigned int _Np = 18446744073709551609; _Union = std::__detail::__variant::_Variadic_union<>&]’:
/usr/include/c++/11/variant:291:30:   recursively required from ‘constexpr decltype(auto) std::__detail::__variant::__get(std::in_place_index_t<_Idx>, _Union&&) [with long unsigned int _Np = 18446744073709551614; _Union = std::__detail::__variant::_Variadic_union<Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&]’
/usr/include/c++/11/variant:291:30:   required from ‘constexpr decltype(auto) std::__detail::__variant::__get(std::in_place_index_t<_Idx>, _Union&&) [with long unsigned int _Np = 18446744073709551615; _Union = std::__detail::__variant::_Variadic_union<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&]’
/usr/include/c++/11/variant:300:30:   required from ‘constexpr decltype(auto) std::__detail::__variant::__get(_Variant&&) [with long unsigned int _Np = 18446744073709551615; _Variant = std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&]’
/usr/include/c++/11/variant:1022:35:   required from ‘static constexpr decltype(auto) std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::__visit_invoke(_Visitor&&, _Variants ...) [with _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {18446744073709551615}]’
/usr/include/c++/11/variant:1043:23:   required from ‘static constexpr auto std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply() [with _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {18446744073709551615}]’
/usr/include/c++/11/variant:962:61:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 0; _Tp = std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<void, std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:427:23:   required from ‘void std::__detail::__variant::_Variant_storage<false, _Types ...>::_M_reset() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:436:9:   required from ‘std::__detail::__variant::_Variant_storage<false, _Types ...>::~_Variant_storage() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:511:12:   required from here
/usr/include/c++/11/variant:292:57: error: ‘union std::__detail::__variant::_Variadic_union<>’ has no member named ‘_M_rest’
  292 |                               std::forward<_Union>(__u)._M_rest);
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
/usr/include/c++/11/variant: In instantiation of ‘static constexpr auto std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply() [with _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {18446744073709551615}]’:
/usr/include/c++/11/variant:962:61:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 0; _Tp = std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<void, std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:427:23:   required from ‘void std::__detail::__variant::_Variant_storage<false, _Types ...>::_M_reset() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:436:9:   required from ‘std::__detail::__variant::_Variant_storage<false, _Types ...>::~_Variant_storage() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:511:12:   required from here
/usr/include/c++/11/variant:1043:45: error: invalid conversion from ‘decltype(auto) (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)’ to ‘std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::__untag_result<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::element_type’ {aka ‘void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)’} [-fpermissive]
 1043 |           return _Array_type{&__visit_invoke};
      |                                             ^
      |                                             |
      |                                             decltype(auto) (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)
/usr/include/c++/11/variant: In instantiation of ‘static constexpr auto std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...)>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply() [with _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {3}]’:
/usr/include/c++/11/variant:959:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 3; _Tp = std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>; _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_all_alts(std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type&, std::index_sequence<__var_indices ...>) [with long unsigned int ...__var_indices = {0, 1, 2, 3, 4, 5}; _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&; long unsigned int ...__dimensions = {6}; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}; long unsigned int ...__indices = {}; std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_Array_type = std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&), 6>, std::integer_sequence<long unsigned int> >::_Array_type; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2, 3, 4, 5>]’
/usr/include/c++/11/variant:932:19:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<void, std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = void; _Visitor = std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>; _Variants = {std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&}]’
/usr/include/c++/11/variant:427:23:   required from ‘void std::__detail::__variant::_Variant_storage<false, _Types ...>::_M_reset() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:436:9:   required from ‘std::__detail::__variant::_Variant_storage<false, _Types ...>::~_Variant_storage() [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
/usr/include/c++/11/variant:511:12:   required from here
/usr/include/c++/11/variant:1043:45: error: invalid conversion from ‘decltype(auto) (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)’ to ‘std::__detail::__variant::_Multi_array<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::__untag_result<void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)>::element_type’ {aka ‘void (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)’} [-fpermissive]
 1043 |           return _Array_type{&__visit_invoke};
      |                                             ^
      |                                             |
      |                                             decltype(auto) (*)(std::__detail::__variant::_Variant_storage<false, bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >::_M_reset()::<lambda(auto:1&&)>&&, std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >&)
In file included from /usr/include/c++/11/deque:66,
                 from /usr/include/c++/11/stack:60,
                 from vm_type.hh:3,
                 from lang.hh:2,
                 from operand.hh:6,
                 from operand.cc:5:
/usr/include/c++/11/bits/stl_uninitialized.h: In instantiation of ‘_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<const Operand*, std::vector<Operand> >; _ForwardIterator = Operand*]’:
/usr/include/c++/11/bits/stl_uninitialized.h:333:37:   required from ‘_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<const Operand*, std::vector<Operand> >; _ForwardIterator = Operand*; _Tp = Operand]’
/usr/include/c++/11/bits/stl_vector.h:558:31:   required from ‘std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = Operand; _Alloc = std::allocator<Operand>]’
operand.cc:218:49:   required from here
/usr/include/c++/11/bits/stl_uninitialized.h:138:72: error: static assertion failed: result type must be constructible from value type of input range
  138 |       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
      |                                                                        ^~~~~
/usr/include/c++/11/bits/stl_uninitialized.h:138:72: note: ‘std::integral_constant<bool, false>::value’ evaluates to false
In file included from /usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h:33,
                 from /usr/include/c++/11/bits/allocator.h:46,
                 from /usr/include/c++/11/string:41,
                 from operand.cc:2:
/usr/include/c++/11/ext/new_allocator.h: In instantiation of ‘void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = Operand; _Args = {Operand}; _Tp = Operand]’:
/usr/include/c++/11/bits/alloc_traits.h:516:17:   required from ‘static void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, _Up*, _Args&& ...) [with _Up = Operand; _Args = {Operand}; _Tp = Operand; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<Operand>]’
/usr/include/c++/11/bits/vector.tcc:115:30:   required from ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {Operand}; _Tp = Operand; _Alloc = std::allocator<Operand>; std::vector<_Tp, _Alloc>::reference = Operand&]’
/usr/include/c++/11/bits/stl_vector.h:1204:21:   required from ‘void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = Operand; _Alloc = std::allocator<Operand>; std::vector<_Tp, _Alloc>::value_type = Operand]’
operand.cc:221:16:   required from here
/usr/include/c++/11/ext/new_allocator.h:162:11: error: use of deleted function ‘Operand::Operand(Operand&&)’
  162 |         { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from operand.cc:5:
operand.hh:12:7: note: ‘Operand::Operand(Operand&&)’ is implicitly deleted because the default definition would be ill-formed:
   12 | class Operand {
      |       ^~~~~~~
operand.hh:12:7: error: use of deleted function ‘std::variant<_Types>::variant(std::variant<_Types>&&) [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’
In file included from operand.cc:1:
/usr/include/c++/11/variant:1397:7: note: ‘std::variant<_Types>::variant(std::variant<_Types>&&) [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> >}]’ is implicitly deleted because the default definition would be ill-formed:
 1397 |       variant(variant&&) = default;
      |       ^~~~~~~
/usr/include/c++/11/variant:1397:7: error: use of deleted function ‘constexpr std::_Enable_copy_move<false, false, false, false, _Tag>::_Enable_copy_move(std::_Enable_copy_move<false, false, false, false, _Tag>&&) [with _Tag = std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Operand, std::allocator<Operand> > >]’
In file included from /usr/include/c++/11/variant:38,
                 from operand.cc:1:
/usr/include/c++/11/bits/enable_special_members.h:305:15: note: declared here
  305 |     constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept       = delete;
      |               ^~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/11/deque:66,
                 from /usr/include/c++/11/stack:60,
                 from vm_type.hh:3,
                 from lang.hh:2,
                 from operand.hh:6,
                 from operand.cc:5:
/usr/include/c++/11/bits/stl_uninitialized.h: In instantiation of ‘_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = std::move_iterator<Operand*>; _ForwardIterator = Operand*]’:
/usr/include/c++/11/bits/stl_uninitialized.h:333:37:   required from ‘_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = std::move_iterator<Operand*>; _ForwardIterator = Operand*; _Tp = Operand]’
/usr/include/c++/11/bits/stl_uninitialized.h:355:2:   required from ‘_ForwardIterator std::__uninitialized_move_if_noexcept_a(_InputIterator, _InputIterator, _ForwardIterator, _Allocator&) [with _InputIterator = Operand*; _ForwardIterator = Operand*; _Allocator = std::allocator<Operand>]’
/usr/include/c++/11/bits/vector.tcc:474:3:   required from ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(std::vector<_Tp, _Alloc>::iterator, _Args&& ...) [with _Args = {Operand}; _Tp = Operand; _Alloc = std::allocator<Operand>; std::vector<_Tp, _Alloc>::iterator = std::vector<Operand>::iterator]’
/usr/include/c++/11/bits/vector.tcc:121:21:   required from ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {Operand}; _Tp = Operand; _Alloc = std::allocator<Operand>; std::vector<_Tp, _Alloc>::reference = Operand&]’
/usr/include/c++/11/bits/stl_vector.h:1204:21:   required from ‘void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = Operand; _Alloc = std::allocator<Operand>; std::vector<_Tp, _Alloc>::value_type = Operand]’
operand.cc:221:16:   required from here
/usr/include/c++/11/bits/stl_uninitialized.h:138:72: error: static assertion failed: result type must be constructible from value type of input range
  138 |       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
      |                                                                        ^~~~~
/usr/include/c++/11/bits/stl_uninitialized.h:138:72: note: ‘std::integral_constant<bool, false>::value’ evaluates to false
make: *** [Makefile:46: operand.o] Error 1
