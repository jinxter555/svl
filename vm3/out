Makefile:85: warning: overriding recipe for target 'ast.o'
Makefile:52: warning: ignoring old recipe for target 'ast.o'
g++ -std=c++17 -g -c operand.cc
In file included from operand.cc:1:
/usr/include/c++/11/variant: In instantiation of ‘std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)> mutable [with auto:17 = const Atom&; auto:18 = std::integral_constant<long unsigned int, 2>]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>; _Args = {const Atom&, std::integral_constant<long unsigned int, 2>}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>, const Atom&, std::integral_constant<long unsigned int, 2> >’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>, const Atom&, std::integral_constant<long unsigned int, 2> >’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>; _Args = {const Atom&, std::integral_constant<long unsigned int, 2>}]’
/usr/include/c++/11/variant:1005:17:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:959:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 2; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>; _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>&&; long unsigned int ...__dimensions = {5}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__variant_idx_cookie, std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:201:44:   required from ‘constexpr void std::__detail::__variant::__raw_idx_visit(_Visitor&&, _Variants&& ...) [with _Visitor = std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:1235:3:   required from ‘constexpr bool std::operator>(const std::variant<_Types ...>&, const std::variant<_Types ...>&) [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >}]’
operand.cc:216:27:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:932:19:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply_all_alts<0, 1, 2, 3, 4>(__vtable, (std::make_index_sequence<5>(), std::make_index_sequence<5>()))’
/usr/include/c++/11/variant:1235:3: error: no match for ‘operator>’ (operand types are ‘const Atom’ and ‘const Atom’)
 1235 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
      |   ^
In file included from /usr/include/c++/11/utility:70,
                 from /usr/include/c++/11/variant:37,
                 from operand.cc:1:
/usr/include/c++/11/bits/stl_pair.h:502:5: note: candidate: ‘template<class _T1, class _T2> constexpr bool std::operator>(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&)’
  502 |     operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
      |     ^~~~~~~~
/usr/include/c++/11/bits/stl_pair.h:502:5: note:   template argument deduction/substitution failed:
In file included from operand.cc:1:
/usr/include/c++/11/variant:1235:3: note:   ‘const Atom’ is not derived from ‘const std::pair<_T1, _T2>’
 1235 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
      |   ^
/usr/include/c++/11/variant:1235:3: note: candidate: ‘template<class ... _Types> constexpr bool std::operator>(const std::variant<_Types ...>&, const std::variant<_Types ...>&)’
 1235 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:1235:3: note:   template argument deduction/substitution failed:
/usr/include/c++/11/variant:1235:3: note:   ‘const Atom’ is not derived from ‘const std::variant<_Types ...>’
 1235 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
      |   ^
/usr/include/c++/11/variant: In instantiation of ‘std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)> mutable [with auto:17 = const Tuple&; auto:18 = std::integral_constant<long unsigned int, 3>]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>; _Args = {const Tuple&, std::integral_constant<long unsigned int, 3>}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>, const Tuple&, std::integral_constant<long unsigned int, 3> >’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>, const Tuple&, std::integral_constant<long unsigned int, 3> >’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>; _Args = {const Tuple&, std::integral_constant<long unsigned int, 3>}]’
/usr/include/c++/11/variant:1005:17:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:959:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 3; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>; _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>&&; long unsigned int ...__dimensions = {5}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__variant_idx_cookie, std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:201:44:   required from ‘constexpr void std::__detail::__variant::__raw_idx_visit(_Visitor&&, _Variants&& ...) [with _Visitor = std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:1235:3:   required from ‘constexpr bool std::operator>(const std::variant<_Types ...>&, const std::variant<_Types ...>&) [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >}]’
operand.cc:216:27:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:932:19:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator><bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:17&&, auto:18)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply_all_alts<0, 1, 2, 3, 4>(__vtable, (std::make_index_sequence<5>(), std::make_index_sequence<5>()))’
/usr/include/c++/11/variant:1235:3: error: no match for ‘operator>’ (operand types are ‘const Tuple’ and ‘const Tuple’)
In file included from /usr/include/c++/11/utility:70,
                 from /usr/include/c++/11/variant:37,
                 from operand.cc:1:
/usr/include/c++/11/bits/stl_pair.h:502:5: note: candidate: ‘template<class _T1, class _T2> constexpr bool std::operator>(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&)’
  502 |     operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
      |     ^~~~~~~~
/usr/include/c++/11/bits/stl_pair.h:502:5: note:   template argument deduction/substitution failed:
In file included from operand.cc:1:
/usr/include/c++/11/variant:1235:3: note:   ‘const Tuple’ is not derived from ‘const std::pair<_T1, _T2>’
 1235 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
      |   ^
/usr/include/c++/11/variant:1235:3: note: candidate: ‘template<class ... _Types> constexpr bool std::operator>(const std::variant<_Types ...>&, const std::variant<_Types ...>&)’
 1235 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:1235:3: note:   template argument deduction/substitution failed:
/usr/include/c++/11/variant:1235:3: note:   ‘const Tuple’ is not derived from ‘const std::variant<_Types ...>’
 1235 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
      |   ^
/usr/include/c++/11/variant: In instantiation of ‘std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)> mutable [with auto:7 = const Atom&; auto:8 = std::integral_constant<long unsigned int, 2>]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>; _Args = {const Atom&, std::integral_constant<long unsigned int, 2>}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>, const Atom&, std::integral_constant<long unsigned int, 2> >’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>, const Atom&, std::integral_constant<long unsigned int, 2> >’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>; _Args = {const Atom&, std::integral_constant<long unsigned int, 2>}]’
/usr/include/c++/11/variant:1005:17:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:959:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 2; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>; _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>&&; long unsigned int ...__dimensions = {5}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__variant_idx_cookie, std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:201:44:   required from ‘constexpr void std::__detail::__variant::__raw_idx_visit(_Visitor&&, _Variants&& ...) [with _Visitor = std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:1230:3:   required from ‘constexpr bool std::operator<(const std::variant<_Types ...>&, const std::variant<_Types ...>&) [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >}]’
operand.cc:218:27:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:932:19:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply_all_alts<0, 1, 2, 3, 4>(__vtable, (std::make_index_sequence<5>(), std::make_index_sequence<5>()))’
/usr/include/c++/11/variant:1230:3: error: no match for ‘operator<’ (operand types are ‘const Atom’ and ‘const Atom’)
 1230 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
      |   ^
In file included from /usr/include/c++/11/utility:70,
                 from /usr/include/c++/11/variant:37,
                 from operand.cc:1:
/usr/include/c++/11/bits/stl_pair.h:489:5: note: candidate: ‘template<class _T1, class _T2> constexpr bool std::operator<(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&)’
  489 |     operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
      |     ^~~~~~~~
/usr/include/c++/11/bits/stl_pair.h:489:5: note:   template argument deduction/substitution failed:
In file included from operand.cc:1:
/usr/include/c++/11/variant:1230:3: note:   ‘const Atom’ is not derived from ‘const std::pair<_T1, _T2>’
 1230 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
      |   ^
/usr/include/c++/11/variant:1230:3: note: candidate: ‘template<class ... _Types> constexpr bool std::operator<(const std::variant<_Types ...>&, const std::variant<_Types ...>&)’
 1230 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:1230:3: note:   template argument deduction/substitution failed:
/usr/include/c++/11/variant:1230:3: note:   ‘const Atom’ is not derived from ‘const std::variant<_Types ...>’
 1230 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
      |   ^
/usr/include/c++/11/variant: In instantiation of ‘std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)> mutable [with auto:7 = const Tuple&; auto:8 = std::integral_constant<long unsigned int, 3>]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>; _Args = {const Tuple&, std::integral_constant<long unsigned int, 3>}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>, const Tuple&, std::integral_constant<long unsigned int, 3> >’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>, const Tuple&, std::integral_constant<long unsigned int, 3> >’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>; _Args = {const Tuple&, std::integral_constant<long unsigned int, 3>}]’
/usr/include/c++/11/variant:1005:17:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:959:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 3; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>; _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>&&; long unsigned int ...__dimensions = {5}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__variant_idx_cookie, std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:201:44:   required from ‘constexpr void std::__detail::__variant::__raw_idx_visit(_Visitor&&, _Variants&& ...) [with _Visitor = std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:1230:3:   required from ‘constexpr bool std::operator<(const std::variant<_Types ...>&, const std::variant<_Types ...>&) [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >}]’
operand.cc:218:27:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:932:19:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator< <bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:7&&, auto:8)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply_all_alts<0, 1, 2, 3, 4>(__vtable, (std::make_index_sequence<5>(), std::make_index_sequence<5>()))’
/usr/include/c++/11/variant:1230:3: error: no match for ‘operator<’ (operand types are ‘const Tuple’ and ‘const Tuple’)
In file included from /usr/include/c++/11/utility:70,
                 from /usr/include/c++/11/variant:37,
                 from operand.cc:1:
/usr/include/c++/11/bits/stl_pair.h:489:5: note: candidate: ‘template<class _T1, class _T2> constexpr bool std::operator<(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&)’
  489 |     operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
      |     ^~~~~~~~
/usr/include/c++/11/bits/stl_pair.h:489:5: note:   template argument deduction/substitution failed:
In file included from operand.cc:1:
/usr/include/c++/11/variant:1230:3: note:   ‘const Tuple’ is not derived from ‘const std::pair<_T1, _T2>’
 1230 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
      |   ^
/usr/include/c++/11/variant:1230:3: note: candidate: ‘template<class ... _Types> constexpr bool std::operator<(const std::variant<_Types ...>&, const std::variant<_Types ...>&)’
 1230 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:1230:3: note:   template argument deduction/substitution failed:
/usr/include/c++/11/variant:1230:3: note:   ‘const Tuple’ is not derived from ‘const std::variant<_Types ...>’
 1230 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
      |   ^
/usr/include/c++/11/variant: In instantiation of ‘std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)> mutable [with auto:9 = const Atom&; auto:10 = std::integral_constant<long unsigned int, 2>]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>; _Args = {const Atom&, std::integral_constant<long unsigned int, 2>}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>, const Atom&, std::integral_constant<long unsigned int, 2> >’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>, const Atom&, std::integral_constant<long unsigned int, 2> >’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>; _Args = {const Atom&, std::integral_constant<long unsigned int, 2>}]’
/usr/include/c++/11/variant:1005:17:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:959:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 2; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>; _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>&&; long unsigned int ...__dimensions = {5}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__variant_idx_cookie, std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:201:44:   required from ‘constexpr void std::__detail::__variant::__raw_idx_visit(_Visitor&&, _Variants&& ...) [with _Visitor = std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:1231:3:   required from ‘constexpr bool std::operator<=(const std::variant<_Types ...>&, const std::variant<_Types ...>&) [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >}]’
operand.cc:220:28:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:932:19:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply_all_alts<0, 1, 2, 3, 4>(__vtable, (std::make_index_sequence<5>(), std::make_index_sequence<5>()))’
/usr/include/c++/11/variant:1231:3: error: no match for ‘operator<=’ (operand types are ‘const Atom’ and ‘const Atom’)
 1231 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
      |   ^
In file included from /usr/include/c++/11/utility:70,
                 from /usr/include/c++/11/variant:37,
                 from operand.cc:1:
/usr/include/c++/11/bits/stl_pair.h:508:5: note: candidate: ‘template<class _T1, class _T2> constexpr bool std::operator<=(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&)’
  508 |     operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
      |     ^~~~~~~~
/usr/include/c++/11/bits/stl_pair.h:508:5: note:   template argument deduction/substitution failed:
In file included from operand.cc:1:
/usr/include/c++/11/variant:1231:3: note:   ‘const Atom’ is not derived from ‘const std::pair<_T1, _T2>’
 1231 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
      |   ^
/usr/include/c++/11/variant:1231:3: note: candidate: ‘template<class ... _Types> constexpr bool std::operator<=(const std::variant<_Types ...>&, const std::variant<_Types ...>&)’
 1231 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:1231:3: note:   template argument deduction/substitution failed:
/usr/include/c++/11/variant:1231:3: note:   ‘const Atom’ is not derived from ‘const std::variant<_Types ...>’
 1231 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
      |   ^
/usr/include/c++/11/variant: In instantiation of ‘std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)> mutable [with auto:9 = const Tuple&; auto:10 = std::integral_constant<long unsigned int, 3>]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>; _Args = {const Tuple&, std::integral_constant<long unsigned int, 3>}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>, const Tuple&, std::integral_constant<long unsigned int, 3> >’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>, const Tuple&, std::integral_constant<long unsigned int, 3> >’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>; _Args = {const Tuple&, std::integral_constant<long unsigned int, 3>}]’
/usr/include/c++/11/variant:1005:17:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:959:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 3; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>; _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>&&; long unsigned int ...__dimensions = {5}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__variant_idx_cookie, std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:201:44:   required from ‘constexpr void std::__detail::__variant::__raw_idx_visit(_Visitor&&, _Variants&& ...) [with _Visitor = std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:1231:3:   required from ‘constexpr bool std::operator<=(const std::variant<_Types ...>&, const std::variant<_Types ...>&) [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >}]’
operand.cc:220:28:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:932:19:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator<=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:9&&, auto:10)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply_all_alts<0, 1, 2, 3, 4>(__vtable, (std::make_index_sequence<5>(), std::make_index_sequence<5>()))’
/usr/include/c++/11/variant:1231:3: error: no match for ‘operator<=’ (operand types are ‘const Tuple’ and ‘const Tuple’)
In file included from /usr/include/c++/11/utility:70,
                 from /usr/include/c++/11/variant:37,
                 from operand.cc:1:
/usr/include/c++/11/bits/stl_pair.h:508:5: note: candidate: ‘template<class _T1, class _T2> constexpr bool std::operator<=(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&)’
  508 |     operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
      |     ^~~~~~~~
/usr/include/c++/11/bits/stl_pair.h:508:5: note:   template argument deduction/substitution failed:
In file included from operand.cc:1:
/usr/include/c++/11/variant:1231:3: note:   ‘const Tuple’ is not derived from ‘const std::pair<_T1, _T2>’
 1231 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
      |   ^
/usr/include/c++/11/variant:1231:3: note: candidate: ‘template<class ... _Types> constexpr bool std::operator<=(const std::variant<_Types ...>&, const std::variant<_Types ...>&)’
 1231 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:1231:3: note:   template argument deduction/substitution failed:
/usr/include/c++/11/variant:1231:3: note:   ‘const Tuple’ is not derived from ‘const std::variant<_Types ...>’
 1231 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
      |   ^
/usr/include/c++/11/variant: In instantiation of ‘std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)> mutable [with auto:15 = const Atom&; auto:16 = std::integral_constant<long unsigned int, 2>]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>; _Args = {const Atom&, std::integral_constant<long unsigned int, 2>}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>, const Atom&, std::integral_constant<long unsigned int, 2> >’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>, const Atom&, std::integral_constant<long unsigned int, 2> >’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>; _Args = {const Atom&, std::integral_constant<long unsigned int, 2>}]’
/usr/include/c++/11/variant:1005:17:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:959:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 2; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>; _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>&&; long unsigned int ...__dimensions = {5}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__variant_idx_cookie, std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:201:44:   required from ‘constexpr void std::__detail::__variant::__raw_idx_visit(_Visitor&&, _Variants&& ...) [with _Visitor = std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:1234:3:   required from ‘constexpr bool std::operator>=(const std::variant<_Types ...>&, const std::variant<_Types ...>&) [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >}]’
operand.cc:222:28:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:932:19:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply_all_alts<0, 1, 2, 3, 4>(__vtable, (std::make_index_sequence<5>(), std::make_index_sequence<5>()))’
/usr/include/c++/11/variant:1234:3: error: no match for ‘operator>=’ (operand types are ‘const Atom’ and ‘const Atom’)
 1234 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
      |   ^
In file included from /usr/include/c++/11/utility:70,
                 from /usr/include/c++/11/variant:37,
                 from operand.cc:1:
/usr/include/c++/11/bits/stl_pair.h:514:5: note: candidate: ‘template<class _T1, class _T2> constexpr bool std::operator>=(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&)’
  514 |     operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
      |     ^~~~~~~~
/usr/include/c++/11/bits/stl_pair.h:514:5: note:   template argument deduction/substitution failed:
In file included from operand.cc:1:
/usr/include/c++/11/variant:1234:3: note:   ‘const Atom’ is not derived from ‘const std::pair<_T1, _T2>’
 1234 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
      |   ^
/usr/include/c++/11/variant:1234:3: note: candidate: ‘template<class ... _Types> constexpr bool std::operator>=(const std::variant<_Types ...>&, const std::variant<_Types ...>&)’
 1234 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:1234:3: note:   template argument deduction/substitution failed:
/usr/include/c++/11/variant:1234:3: note:   ‘const Atom’ is not derived from ‘const std::variant<_Types ...>’
 1234 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
      |   ^
/usr/include/c++/11/variant: In instantiation of ‘std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)> mutable [with auto:15 = const Tuple&; auto:16 = std::integral_constant<long unsigned int, 3>]’:
/usr/include/c++/11/type_traits:2530:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>; _Args = {const Tuple&, std::integral_constant<long unsigned int, 3>}]’
/usr/include/c++/11/type_traits:2541:55:   required from ‘struct std::__result_of_impl<false, false, std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>, const Tuple&, std::integral_constant<long unsigned int, 3> >’
/usr/include/c++/11/type_traits:2546:12:   required from ‘struct std::__invoke_result<std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>, const Tuple&, std::integral_constant<long unsigned int, 3> >’
/usr/include/c++/11/bits/invoke.h:90:5:   required by substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>; _Args = {const Tuple&, std::integral_constant<long unsigned int, 3>}]’
/usr/include/c++/11/variant:1005:17:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/11/variant:959:56:   required from ‘static constexpr void std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<_Result_type (*)(_Visitor, _Variants ...), __dimensions ...>, std::integer_sequence<long unsigned int, __indices ...> >::_S_apply_single_alt(_Tp&, _Tp*) [with bool __do_cookie = true; long unsigned int __index = 3; _Tp = std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>; _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>&&; long unsigned int ...__dimensions = {5}; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}; long unsigned int ...__indices = {}]’
/usr/include/c++/11/variant:943:47:   required from ‘constexpr const _Array_type std::__detail::__variant::__gen_vtable<std::__detail::__variant::__variant_idx_cookie, std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&>::_S_vtable’
/usr/include/c++/11/variant:1724:45:   required from ‘constexpr decltype(auto) std::__do_visit(_Visitor&&, _Variants&& ...) [with _Result_type = std::__detail::__variant::__variant_idx_cookie; _Visitor = std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:201:44:   required from ‘constexpr void std::__detail::__variant::__raw_idx_visit(_Visitor&&, _Variants&& ...) [with _Visitor = std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>; _Variants = {const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&}]’
/usr/include/c++/11/variant:1234:3:   required from ‘constexpr bool std::operator>=(const std::variant<_Types ...>&, const std::variant<_Types ...>&) [with _Types = {bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >}]’
operand.cc:222:28:   required from here
/usr/include/c++/11/variant:1055:67:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply()’
/usr/include/c++/11/variant:932:19:   in ‘constexpr’ expansion of ‘std::__detail::__variant::__gen_vtable_impl<std::__detail::__variant::_Multi_array<std::__detail::__variant::__variant_idx_cookie (*)(std::operator>=<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)::<lambda(auto:15&&, auto:16)>&&, const std::variant<bool, Number, Atom, Tuple, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&), 5>, std::integer_sequence<long unsigned int> >::_S_apply_all_alts<0, 1, 2, 3, 4>(__vtable, (std::make_index_sequence<5>(), std::make_index_sequence<5>()))’
/usr/include/c++/11/variant:1234:3: error: no match for ‘operator>=’ (operand types are ‘const Tuple’ and ‘const Tuple’)
In file included from /usr/include/c++/11/utility:70,
                 from /usr/include/c++/11/variant:37,
                 from operand.cc:1:
/usr/include/c++/11/bits/stl_pair.h:514:5: note: candidate: ‘template<class _T1, class _T2> constexpr bool std::operator>=(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&)’
  514 |     operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
      |     ^~~~~~~~
/usr/include/c++/11/bits/stl_pair.h:514:5: note:   template argument deduction/substitution failed:
In file included from operand.cc:1:
/usr/include/c++/11/variant:1234:3: note:   ‘const Tuple’ is not derived from ‘const std::pair<_T1, _T2>’
 1234 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
      |   ^
/usr/include/c++/11/variant:1234:3: note: candidate: ‘template<class ... _Types> constexpr bool std::operator>=(const std::variant<_Types ...>&, const std::variant<_Types ...>&)’
 1234 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/11/variant:1234:3: note:   template argument deduction/substitution failed:
/usr/include/c++/11/variant:1234:3: note:   ‘const Tuple’ is not derived from ‘const std::variant<_Types ...>’
 1234 |   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
      |   ^
make: *** [Makefile:46: operand.o] Error 1
